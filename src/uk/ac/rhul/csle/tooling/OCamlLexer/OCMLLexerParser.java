package uk.ac.rhul.csle.tooling.OCamlLexer;

import uk.ac.rhul.csle.text.DefaultTextHandler;
import uk.ac.rhul.csle.text.Text;

/*******************************************************************************
*
* OCMLLexerParser.java
*
*******************************************************************************/
public class OCMLLexerParser extends uk.ac.rhul.csle.gll.GLLHashPool {
	private static boolean[] ARTSet1;
	private static boolean[] ARTSet5;
	private static boolean[] ARTSet6;
	private static boolean[] ARTSet8;
	private static boolean[] ARTSet10;
	private static boolean[] ARTSet11;
	private static boolean[] ARTSet13;
	private static boolean[] ARTSet19;
	private static boolean[] ARTSet20;
	private static boolean[] ARTSet22;
	private static boolean[] ARTSet24;
	private static boolean[] ARTSet26;
	private static boolean[] ARTSet27;
	private static boolean[] ARTSet28;
	private static boolean[] ARTSet30;
	private static boolean[] ARTSet31;
	private static boolean[] ARTSet32;
	private static boolean[] ARTSet33;
	private static boolean[] ARTSet34;
	private static boolean[] ARTSet35;
	private static boolean[] ARTSet36;
	private static boolean[] ARTSet37;
	private static boolean[] ARTSet38;
	private static boolean[] ARTSet39;
	private static boolean[] ARTSet40;
	private static boolean[] ARTSet41;
	private static boolean[] ARTSet42;
	private static boolean[] ARTSet43;
	private static boolean[] ARTSet44;
	private static boolean[] ARTSet45;
	private static boolean[] ARTSet46;
	private static boolean[] ARTSet47;
	private static boolean[] ARTSet48;
	private static boolean[] ARTSet49;
	private static boolean[] ARTSet50;
	private static boolean[] ARTSet51;
	private static boolean[] ARTSet52;
	private static boolean[] ARTSet53;
	private static boolean[] ARTSet54;
	private static boolean[] ARTSet55;
	private static boolean[] ARTSet56;
	private static boolean[] ARTSet57;
	private static boolean[] ARTSet58;
	private static boolean[] ARTSet59;
	private static boolean[] ARTSet60;
	private static boolean[] ARTSet61;
	private static boolean[] ARTSet62;
	private static boolean[] ARTSet63;
	private static boolean[] ARTSet64;
	private static boolean[] ARTSet65;
	private static boolean[] ARTSet66;
	private static boolean[] ARTSet67;
	private static boolean[] ARTSet68;
	private static boolean[] ARTSet69;
	private static boolean[] ARTSet70;
	private static boolean[] ARTSet71;
	private static boolean[] ARTSet72;
	private static boolean[] ARTSet73;
	private static boolean[] ARTSet74;
	private static boolean[] ARTSet75;
	private static boolean[] ARTSet76;
	private static boolean[] ARTSet77;
	private static boolean[] ARTSet78;
	private static boolean[] ARTSet79;
	private static boolean[] ARTSet80;
	private static boolean[] ARTSet81;
	private static boolean[] ARTSet83;
	private static boolean[] ARTSet84;
	private static boolean[] ARTSet85;
	private static boolean[] ARTSet86;
	private static boolean[] ARTSet87;
	private static boolean[] ARTSet88;
	private static boolean[] ARTSet90;
	private static boolean[] ARTSet92;
	private static boolean[] ARTSet95;
	private static boolean[] ARTSet96;
	private static boolean[] ARTSet97;
	private static boolean[] ARTSet98;
	private static boolean[] ARTSet99;
	private static boolean[] ARTSet100;
	private static boolean[] ARTSet101;
	private static boolean[] ARTSet102;
	private static boolean[] ARTSet103;
	private static boolean[] ARTSet104;
	private static boolean[] ARTSet105;
	private static boolean[] ARTSet106;
	private static boolean[] ARTSet107;
	private static boolean[] ARTSet108;
	private static boolean[] ARTSet109;
	private static boolean[] ARTSet110;
	private static boolean[] ARTSet111;
	private static boolean[] ARTSet112;
	private static boolean[] ARTSet113;
	private static boolean[] ARTSet114;
	private static boolean[] ARTSet115;
	private static boolean[] ARTSet116;
	private static boolean[] ARTSet117;
	private static boolean[] ARTSet119;
	private static boolean[] ARTSet121;
	private static boolean[] ARTSet122;
	private static boolean[] ARTSet123;
	private static boolean[] ARTSet124;
	private static boolean[] ARTSet125;
	private static boolean[] ARTSet126;
	private static boolean[] ARTSet127;
	private static boolean[] ARTSet128;
	private static boolean[] ARTSet129;
	private static boolean[] ARTSet130;
	private static boolean[] ARTSet131;
	private static boolean[] ARTSet133;
	private static boolean[] ARTSet134;
	private static boolean[] ARTSet135;
	private static boolean[] ARTSet136;
	private static boolean[] ARTSet137;
	private static boolean[] ARTSet138;
	private static boolean[] ARTSet139;
	private static boolean[] ARTSet140;
	private static boolean[] ARTSet141;
	private static boolean[] ARTSet142;
	private static boolean[] ARTSet143;
	private static boolean[] ARTSet144;
	private static boolean[] ARTSet145;
	private static boolean[] ARTSet146;
	private static boolean[] ARTSet147;
	private static boolean[] ARTSet148;
	private static boolean[] ARTSet149;
	private static boolean[] ARTSet150;
	private static boolean[] ARTSet151;
	private static boolean[] ARTSet152;
	private static boolean[] ARTSet153;
	private static boolean[] ARTSet154;
	private static boolean[] ARTSet155;
	private static boolean[] ARTSet156;
	private static boolean[] ARTSet157;
	private static boolean[] ARTSet158;
	private static boolean[] ARTSet159;
	private static boolean[] ARTSet160;
	private static boolean[] ARTSet161;
	private static boolean[] ARTSet162;
	private static boolean[] ARTSet163;

	/* Start of artLabel enumeration */
	public static final int ART_X_EOS = 0;
	public static final int ART_TC_ = 1;
	public static final int ART_TC__BEL = 2;
	public static final int ART_TC__BS = 3;
	public static final int ART_TC__HT = 4;
	public static final int ART_TC__LF = 5;
	public static final int ART_TC__VT = 6;
	public static final int ART_TC__FF = 7;
	public static final int ART_TC__CR = 8;
	public static final int ART_TC__SPACE = 9;
	public static final int ART_TC__SHREIK = 10;
	public static final int ART_TC__DBLQUOTE = 11;
	public static final int ART_TC__HASH = 12;
	public static final int ART_TC__DOLLAR = 13;
	public static final int ART_TC__PERCENT = 14;
	public static final int ART_TC__AMPERSAND = 15;
	public static final int ART_TC__QUOTE = 16;
	public static final int ART_TC__LPAR = 17;
	public static final int ART_TC__RPAR = 18;
	public static final int ART_TC__STAR = 19;
	public static final int ART_TC__PLUS = 20;
	public static final int ART_TC__COMMA = 21;
	public static final int ART_TC__MINUS = 22;
	public static final int ART_TC__PERIOD = 23;
	public static final int ART_TC__SLASH = 24;
	public static final int ART_TC_0 = 25;
	public static final int ART_TC_1 = 26;
	public static final int ART_TC_2 = 27;
	public static final int ART_TC_3 = 28;
	public static final int ART_TC_4 = 29;
	public static final int ART_TC_5 = 30;
	public static final int ART_TC_6 = 31;
	public static final int ART_TC_7 = 32;
	public static final int ART_TC_8 = 33;
	public static final int ART_TC_9 = 34;
	public static final int ART_TC__COLON = 35;
	public static final int ART_TC__SEMICOLON = 36;
	public static final int ART_TC__LT = 37;
	public static final int ART_TC__EQUAL = 38;
	public static final int ART_TC__GT = 39;
	public static final int ART_TC__QUERY = 40;
	public static final int ART_TC__AT = 41;
	public static final int ART_TC_A = 42;
	public static final int ART_TC_B = 43;
	public static final int ART_TC_C = 44;
	public static final int ART_TC_D = 45;
	public static final int ART_TC_E = 46;
	public static final int ART_TC_F = 47;
	public static final int ART_TC_G = 48;
	public static final int ART_TC_H = 49;
	public static final int ART_TC_I = 50;
	public static final int ART_TC_J = 51;
	public static final int ART_TC_K = 52;
	public static final int ART_TC_L = 53;
	public static final int ART_TC_M = 54;
	public static final int ART_TC_N = 55;
	public static final int ART_TC_O = 56;
	public static final int ART_TC_P = 57;
	public static final int ART_TC_Q = 58;
	public static final int ART_TC_R = 59;
	public static final int ART_TC_S = 60;
	public static final int ART_TC_T = 61;
	public static final int ART_TC_U = 62;
	public static final int ART_TC_V = 63;
	public static final int ART_TC_W = 64;
	public static final int ART_TC_X = 65;
	public static final int ART_TC_Y = 66;
	public static final int ART_TC_Z = 67;
	public static final int ART_TC__LBRACK = 68;
	public static final int ART_TC__BACKSLASH = 69;
	public static final int ART_TC__RBRACK = 70;
	public static final int ART_TC__UPARROW = 71;
	public static final int ART_TC__ = 72;
	public static final int ART_TC__BACKQUOTE = 73;
	public static final int ART_TC_a = 74;
	public static final int ART_TC_b = 75;
	public static final int ART_TC_c = 76;
	public static final int ART_TC_d = 77;
	public static final int ART_TC_e = 78;
	public static final int ART_TC_f = 79;
	public static final int ART_TC_g = 80;
	public static final int ART_TC_h = 81;
	public static final int ART_TC_i = 82;
	public static final int ART_TC_j = 83;
	public static final int ART_TC_k = 84;
	public static final int ART_TC_l = 85;
	public static final int ART_TC_m = 86;
	public static final int ART_TC_n = 87;
	public static final int ART_TC_o = 88;
	public static final int ART_TC_p = 89;
	public static final int ART_TC_q = 90;
	public static final int ART_TC_r = 91;
	public static final int ART_TC_s = 92;
	public static final int ART_TC_t = 93;
	public static final int ART_TC_u = 94;
	public static final int ART_TC_v = 95;
	public static final int ART_TC_w = 96;
	public static final int ART_TC_x = 97;
	public static final int ART_TC_y = 98;
	public static final int ART_TC_z = 99;
	public static final int ART_TC__LBRACE = 100;
	public static final int ART_TC__BAR = 101;
	public static final int ART_TC__RBRACE = 102;
	public static final int ART_TC__TILDE = 103;
	public static final int ART_X_EPSILON = 104;
	public static final int ART_L_OcamlLexer_input = 105;
	public static final int ART_L_OcamlLexer_input_5 = 106;
	public static final int ART_L_OcamlLexer_input_9 = 107;
	public static final int ART_L_OcamlLexer_input_11 = 108;
	public static final int ART_L_OcamlLexer_input_13 = 109;
	public static final int ART_L_OcamlLexer_input_15 = 110;
	public static final int ART_L_OcamlLexer_input_17 = 111;
	public static final int ART_L_OcamlLexer_input_19 = 112;
	public static final int ART_L_OcamlLexer_input_21 = 113;
	public static final int ART_L_OcamlLexer_input_23 = 114;
	public static final int ART_L_OcamlLexer_input_25 = 115;
	public static final int ART_L_OcamlLexer_input_27 = 116;
	public static final int ART_L_OcamlLexer_input_29 = 117;
	public static final int ART_L_OcamlLexer_input_31 = 118;
	public static final int ART_L_OcamlLexer_input_33 = 119;
	public static final int ART_L_OcamlLexer_input_35 = 120;
	public static final int ART_L_OcamlLexer_input_37 = 121;
	public static final int ART_L_OcamlLexer_input_39 = 122;
	public static final int ART_L_OcamlLexer_input_41 = 123;
	public static final int ART_L_OcamlLexer_input_43 = 124;
	public static final int ART_L_OcamlLexer_input_45 = 125;
	public static final int ART_L_OcamlLexer_input_47 = 126;
	public static final int ART_L_OcamlLexer_input_49 = 127;
	public static final int ART_L_OcamlLexer_input_51 = 128;
	public static final int ART_L_OcamlLexer_input_53 = 129;
	public static final int ART_L_OcamlLexer_input_55 = 130;
	public static final int ART_L_OcamlLexer_input_57 = 131;
	public static final int ART_L_OcamlLexer_input_59 = 132;
	public static final int ART_L_OcamlLexer_input_61 = 133;
	public static final int ART_L_OcamlLexer_input_63 = 134;
	public static final int ART_L_OcamlLexer_input_65 = 135;
	public static final int ART_L_OcamlLexer_input_67 = 136;
	public static final int ART_L_OcamlLexer_input_69 = 137;
	public static final int ART_L_OcamlLexer_input_71 = 138;
	public static final int ART_L_OcamlLexer_input_73 = 139;
	public static final int ART_L_OcamlLexer_input_75 = 140;
	public static final int ART_L_OcamlLexer_input_77 = 141;
	public static final int ART_L_OcamlLexer_input_79 = 142;
	public static final int ART_L_OcamlLexer_input_81 = 143;
	public static final int ART_L_OcamlLexer_input_83 = 144;
	public static final int ART_L_OcamlLexer_input_85 = 145;
	public static final int ART_L_OcamlLexer_input_87 = 146;
	public static final int ART_L_OcamlLexer_input_89 = 147;
	public static final int ART_L_OcamlLexer_input_91 = 148;
	public static final int ART_L_OcamlLexer_input_93 = 149;
	public static final int ART_L_OcamlLexer_input_95 = 150;
	public static final int ART_L_OcamlLexer_input_97 = 151;
	public static final int ART_L_OcamlLexer_input_99 = 152;
	public static final int ART_L_OcamlLexer_input_101 = 153;
	public static final int ART_L_OcamlLexer_input_103 = 154;
	public static final int ART_L_OcamlLexer_input_105 = 155;
	public static final int ART_L_OcamlLexer_input_107 = 156;
	public static final int ART_L_OcamlLexer_input_109 = 157;
	public static final int ART_L_OcamlLexer_input_111 = 158;
	public static final int ART_L_OcamlLexer_input_113 = 159;
	public static final int ART_L_OcamlLexer_input_115 = 160;
	public static final int ART_L_OcamlLexer_input_117 = 161;
	public static final int ART_L_OcamlLexer_input_119 = 162;
	public static final int ART_L_OcamlLexer_input_121 = 163;
	public static final int ART_L_OcamlLexer_input_123 = 164;
	public static final int ART_L_OcamlLexer_input_125 = 165;
	public static final int ART_L_OcamlLexer_input_127 = 166;
	public static final int ART_L_OcamlLexer_input_129 = 167;
	public static final int ART_L_OcamlLexer_input_131 = 168;
	public static final int ART_L_OcamlLexer_input_133 = 169;
	public static final int ART_L_OcamlLexer_input_135 = 170;
	public static final int ART_L_OcamlLexer_input_137 = 171;
	public static final int ART_L_OcamlLexer_input_139 = 172;
	public static final int ART_L_OcamlLexer_input_141 = 173;
	public static final int ART_L_OcamlLexer_input_143 = 174;
	public static final int ART_L_OcamlLexer_input_145 = 175;
	public static final int ART_L_OcamlLexer_input_147 = 176;
	public static final int ART_L_OcamlLexer_input_149 = 177;
	public static final int ART_L_OcamlLexer_input_151 = 178;
	public static final int ART_L_OcamlLexer_input_153 = 179;
	public static final int ART_L_OcamlLexer_input_155 = 180;
	public static final int ART_L_OcamlLexer_input_157 = 181;
	public static final int ART_L_OcamlLexer_input_159 = 182;
	public static final int ART_L_OcamlLexer_input_161 = 183;
	public static final int ART_L_OcamlLexer_input_163 = 184;
	public static final int ART_L_OcamlLexer_input_165 = 185;
	public static final int ART_L_OcamlLexer_input_167 = 186;
	public static final int ART_L_OcamlLexer_input_169 = 187;
	public static final int ART_L_OcamlLexer_input_171 = 188;
	public static final int ART_L_OcamlLexer_input_173 = 189;
	public static final int ART_L_OcamlLexer_input_175 = 190;
	public static final int ART_L_OcamlLexer_input_177 = 191;
	public static final int ART_L_OcamlLexer_input_179 = 192;
	public static final int ART_L_OcamlLexer_input_181 = 193;
	public static final int ART_L_OcamlLexer_input_183 = 194;
	public static final int ART_L_OcamlLexer_input_185 = 195;
	public static final int ART_L_OcamlLexer_input_187 = 196;
	public static final int ART_L_OcamlLexer_input_189 = 197;
	public static final int ART_L_OcamlLexer_input_191 = 198;
	public static final int ART_L_OcamlLexer_input_193 = 199;
	public static final int ART_L_OcamlLexer_input_195 = 200;
	public static final int ART_L_OcamlLexer_input_197 = 201;
	public static final int ART_L_OcamlLexer_input_199 = 202;
	public static final int ART_L_OcamlLexer_input_201 = 203;
	public static final int ART_L_OcamlLexer_input_203 = 204;
	public static final int ART_L_OcamlLexer_input_205 = 205;
	public static final int ART_L_OcamlLexer_input_207 = 206;
	public static final int ART_L_OcamlLexer_input_209 = 207;
	public static final int ART_L_OcamlLexer_input_211 = 208;
	public static final int ART_L_OcamlLexer_input_213 = 209;
	public static final int ART_L_OcamlLexer_input_215 = 210;
	public static final int ART_L_OcamlLexer_input_217 = 211;
	public static final int ART_L_OcamlLexer_input_219 = 212;
	public static final int ART_L_OcamlLexer_input_221 = 213;
	public static final int ART_L_OcamlLexer_input_223 = 214;
	public static final int ART_L_OcamlLexer_input_225 = 215;
	public static final int ART_L_OcamlLexer_input_227 = 216;
	public static final int ART_L_OcamlLexer_input_229 = 217;
	public static final int ART_L_OcamlLexer_input_231 = 218;
	public static final int ART_L_OcamlLexer_input_233 = 219;
	public static final int ART_L_OcamlLexer_input_235 = 220;
	public static final int ART_L_OcamlLexer_input_237 = 221;
	public static final int ART_L_OcamlLexer_input_239 = 222;
	public static final int ART_L_OcamlLexer_input_241 = 223;
	public static final int ART_L_OcamlLexer_input_243 = 224;
	public static final int ART_L_OcamlLexer_input_245 = 225;
	public static final int ART_L_OcamlLexer_input_247 = 226;
	public static final int ART_L_OcamlLexer_input_249 = 227;
	public static final int ART_L_OcamlLexer_input_251 = 228;
	public static final int ART_L_OcamlLexer_input_253 = 229;
	public static final int ART_L_OcamlLexer_input_255 = 230;
	public static final int ART_L_OcamlLexer_input_257 = 231;
	public static final int ART_L_OcamlLexer_input_259 = 232;
	public static final int ART_L_OcamlLexer_input_261 = 233;
	public static final int ART_L_OcamlLexer_input_263 = 234;
	public static final int ART_L_OcamlLexer_input_265 = 235;
	public static final int ART_L_OcamlLexer_input_267 = 236;
	public static final int ART_L_OcamlLexer_input_269 = 237;
	public static final int ART_L_OcamlLexer_input_271 = 238;
	public static final int ART_L_OcamlLexer_input_273 = 239;
	public static final int ART_L_OcamlLexer_input_275 = 240;
	public static final int ART_L_OcamlLexer_input_277 = 241;
	public static final int ART_L_OcamlLexer_input_279 = 242;
	public static final int ART_L_OcamlLexer_input_281 = 243;
	public static final int ART_L_OcamlLexer_input_283 = 244;
	public static final int ART_L_OcamlLexer_input_285 = 245;
	public static final int ART_L_OcamlLexer_input_287 = 246;
	public static final int ART_L_OcamlLexer_input_289 = 247;
	public static final int ART_L_OcamlLexer_input_291 = 248;
	public static final int ART_L_OcamlLexer_input_293 = 249;
	public static final int ART_L_OcamlLexer_input_295 = 250;
	public static final int ART_L_OcamlLexer_input_297 = 251;
	public static final int ART_L_OcamlLexer_input_299 = 252;
	public static final int ART_L_OcamlLexer_input_301 = 253;
	public static final int ART_L_OcamlLexer_input_303 = 254;
	public static final int ART_L_OcamlLexer_input_305 = 255;
	public static final int ART_L_OcamlLexer_input_307 = 256;
	public static final int ART_L_OcamlLexer_input_309 = 257;
	public static final int ART_L_OcamlLexer_input_311 = 258;
	public static final int ART_L_OcamlLexer_input_313 = 259;
	public static final int ART_L_OcamlLexer_input_315 = 260;
	public static final int ART_L_OcamlLexer_input_317 = 261;
	public static final int ART_L_OcamlLexer_input_319 = 262;
	public static final int ART_L_OcamlLexer_input_321 = 263;
	public static final int ART_L_OcamlLexer_input_323 = 264;
	public static final int ART_L_OcamlLexer_input_325 = 265;
	public static final int ART_L_OcamlLexer_input_327 = 266;
	public static final int ART_L_OcamlLexer_input_329 = 267;
	public static final int ART_L_OcamlLexer_input_331 = 268;
	public static final int ART_L_OcamlLexer_input_333 = 269;
	public static final int ART_L_OcamlLexer_input_335 = 270;
	public static final int ART_L_OcamlLexer_input_337 = 271;
	public static final int ART_L_OcamlLexer_input_339 = 272;
	public static final int ART_L_OcamlLexer_input_341 = 273;
	public static final int ART_L_OcamlLexer_input_343 = 274;
	public static final int ART_L_OcamlLexer_input_345 = 275;
	public static final int ART_L_OcamlLexer_input_347 = 276;
	public static final int ART_L_OcamlLexer_input_349 = 277;
	public static final int ART_L_OcamlLexer_input_351 = 278;
	public static final int ART_L_OcamlLexer_input_353 = 279;
	public static final int ART_L_OcamlLexer_input_355 = 280;
	public static final int ART_L_OcamlLexer_input_357 = 281;
	public static final int ART_L_OcamlLexer_input_359 = 282;
	public static final int ART_L_OcamlLexer_input_361 = 283;
	public static final int ART_L_OcamlLexer_input_363 = 284;
	public static final int ART_L_OcamlLexer_input_365 = 285;
	public static final int ART_L_OcamlLexer_input_367 = 286;
	public static final int ART_L_OcamlLexer_input_369 = 287;
	public static final int ART_L_OcamlLexer_input_371 = 288;
	public static final int ART_L_OcamlLexer_input_373 = 289;
	public static final int ART_L_OcamlLexer_input_375 = 290;
	public static final int ART_L_OcamlLexer_input_377 = 291;
	public static final int ART_L_OcamlLexer_input_379 = 292;
	public static final int ART_L_OcamlLexer_input_381 = 293;
	public static final int ART_L_OcamlLexer_input_383 = 294;
	public static final int ART_L_OcamlLexer_input_385 = 295;
	public static final int ART_L_OcamlLexer_input_387 = 296;
	public static final int ART_L_OcamlLexer_input_389 = 297;
	public static final int ART_L_OcamlLexer_input_391 = 298;
	public static final int ART_L_OcamlLexer_input_393 = 299;
	public static final int ART_L_OcamlLexer_input_395 = 300;
	public static final int ART_L_OcamlLexer_input_397 = 301;
	public static final int ART_L_OcamlLexer_input_399 = 302;
	public static final int ART_L_OcamlLexer_input_401 = 303;
	public static final int ART_L_OcamlLexer_input_403 = 304;
	public static final int ART_L_OcamlLexer_input_405 = 305;
	public static final int ART_L_OcamlLexer_input_407 = 306;
	public static final int ART_L_OcamlLexer_input_409 = 307;
	public static final int ART_L_OcamlLexer_input_411 = 308;
	public static final int ART_L_OcamlLexer_input_413 = 309;
	public static final int ART_L_OcamlLexer_input_415 = 310;
	public static final int ART_L_OcamlLexer_input_417 = 311;
	public static final int ART_L_OcamlLexer_input_419 = 312;
	public static final int ART_L_OcamlLexer_input_421 = 313;
	public static final int ART_L_OcamlLexer_input_423 = 314;
	public static final int ART_L_OcamlLexer_input_425 = 315;
	public static final int ART_L_OcamlLexer_input_427 = 316;
	public static final int ART_L_OcamlLexer_input_429 = 317;
	public static final int ART_L_OcamlLexer_input_431 = 318;
	public static final int ART_L_OcamlLexer_input_433 = 319;
	public static final int ART_L_OcamlLexer_input_435 = 320;
	public static final int ART_L_OcamlLexer_input_437 = 321;
	public static final int ART_L_OcamlLexer_input_439 = 322;
	public static final int ART_L_OcamlLexer_input_441 = 323;
	public static final int ART_L_OcamlLexer_input_443 = 324;
	public static final int ART_L_OcamlLexer_input_445 = 325;
	public static final int ART_L_OcamlLexer_input_447 = 326;
	public static final int ART_L_OcamlLexer_input_449 = 327;
	public static final int ART_L_OcamlLexer_input_451 = 328;
	public static final int ART_L_OcamlLexer_input_452 = 329;
	public static final int ART_L_OcamlLexer_and = 330;
	public static final int ART_L_OcamlLexer_and_455 = 331;
	public static final int ART_L_OcamlLexer_as = 332;
	public static final int ART_L_OcamlLexer_as_464 = 333;
	public static final int ART_L_OcamlLexer_assert = 334;
	public static final int ART_L_OcamlLexer_assert_471 = 335;
	public static final int ART_L_OcamlLexer_asr = 336;
	public static final int ART_L_OcamlLexer_asr_486 = 337;
	public static final int ART_L_OcamlLexer_begin = 338;
	public static final int ART_L_OcamlLexer_begin_495 = 339;
	public static final int ART_L_OcamlLexer_class = 340;
	public static final int ART_L_OcamlLexer_class_508 = 341;
	public static final int ART_L_OcamlLexer_constraint = 342;
	public static final int ART_L_OcamlLexer_constraint_521 = 343;
	public static final int ART_L_OcamlLexer_do = 344;
	public static final int ART_L_OcamlLexer_do_544 = 345;
	public static final int ART_L_OcamlLexer_done = 346;
	public static final int ART_L_OcamlLexer_done_551 = 347;
	public static final int ART_L_OcamlLexer_downto = 348;
	public static final int ART_L_OcamlLexer_downto_562 = 349;
	public static final int ART_L_OcamlLexer_else = 350;
	public static final int ART_L_OcamlLexer_else_577 = 351;
	public static final int ART_L_OcamlLexer_end = 352;
	public static final int ART_L_OcamlLexer_end_588 = 353;
	public static final int ART_L_OcamlLexer_exception = 354;
	public static final int ART_L_OcamlLexer_exception_597 = 355;
	public static final int ART_L_OcamlLexer_external = 356;
	public static final int ART_L_OcamlLexer_external_618 = 357;
	public static final int ART_L_OcamlLexer_false = 358;
	public static final int ART_L_OcamlLexer_false_637 = 359;
	public static final int ART_L_OcamlLexer_for = 360;
	public static final int ART_L_OcamlLexer_for_650 = 361;
	public static final int ART_L_OcamlLexer_fun = 362;
	public static final int ART_L_OcamlLexer_fun_659 = 363;
	public static final int ART_L_OcamlLexer_function = 364;
	public static final int ART_L_OcamlLexer_function_668 = 365;
	public static final int ART_L_OcamlLexer_functor = 366;
	public static final int ART_L_OcamlLexer_functor_687 = 367;
	public static final int ART_L_OcamlLexer_if = 368;
	public static final int ART_L_OcamlLexer_if_704 = 369;
	public static final int ART_L_OcamlLexer_in = 370;
	public static final int ART_L_OcamlLexer_in_711 = 371;
	public static final int ART_L_OcamlLexer_include = 372;
	public static final int ART_L_OcamlLexer_include_718 = 373;
	public static final int ART_L_OcamlLexer_inherit = 374;
	public static final int ART_L_OcamlLexer_inherit_735 = 375;
	public static final int ART_L_OcamlLexer_initializer = 376;
	public static final int ART_L_OcamlLexer_initializer_752 = 377;
	public static final int ART_L_OcamlLexer_land = 378;
	public static final int ART_L_OcamlLexer_land_777 = 379;
	public static final int ART_L_OcamlLexer_lazy = 380;
	public static final int ART_L_OcamlLexer_lazy_788 = 381;
	public static final int ART_L_OcamlLexer_let = 382;
	public static final int ART_L_OcamlLexer_let_799 = 383;
	public static final int ART_L_OcamlLexer_lor = 384;
	public static final int ART_L_OcamlLexer_lor_808 = 385;
	public static final int ART_L_OcamlLexer_lsl = 386;
	public static final int ART_L_OcamlLexer_lsl_817 = 387;
	public static final int ART_L_OcamlLexer_lsr = 388;
	public static final int ART_L_OcamlLexer_lsr_826 = 389;
	public static final int ART_L_OcamlLexer_lxor = 390;
	public static final int ART_L_OcamlLexer_lxor_835 = 391;
	public static final int ART_L_OcamlLexer_match = 392;
	public static final int ART_L_OcamlLexer_match_846 = 393;
	public static final int ART_L_OcamlLexer_method = 394;
	public static final int ART_L_OcamlLexer_method_859 = 395;
	public static final int ART_L_OcamlLexer_mod = 396;
	public static final int ART_L_OcamlLexer_mod_874 = 397;
	public static final int ART_L_OcamlLexer_module = 398;
	public static final int ART_L_OcamlLexer_module_883 = 399;
	public static final int ART_L_OcamlLexer_mutable = 400;
	public static final int ART_L_OcamlLexer_mutable_898 = 401;
	public static final int ART_L_OcamlLexer_new = 402;
	public static final int ART_L_OcamlLexer_new_915 = 403;
	public static final int ART_L_OcamlLexer_object = 404;
	public static final int ART_L_OcamlLexer_object_924 = 405;
	public static final int ART_L_OcamlLexer_of = 406;
	public static final int ART_L_OcamlLexer_of_939 = 407;
	public static final int ART_L_OcamlLexer_open = 408;
	public static final int ART_L_OcamlLexer_open_946 = 409;
	public static final int ART_L_OcamlLexer_or = 410;
	public static final int ART_L_OcamlLexer_or_957 = 411;
	public static final int ART_L_OcamlLexer_private = 412;
	public static final int ART_L_OcamlLexer_private_964 = 413;
	public static final int ART_L_OcamlLexer_rec = 414;
	public static final int ART_L_OcamlLexer_rec_981 = 415;
	public static final int ART_L_OcamlLexer_sig = 416;
	public static final int ART_L_OcamlLexer_sig_990 = 417;
	public static final int ART_L_OcamlLexer_struct = 418;
	public static final int ART_L_OcamlLexer_struct_999 = 419;
	public static final int ART_L_OcamlLexer_then = 420;
	public static final int ART_L_OcamlLexer_then_1014 = 421;
	public static final int ART_L_OcamlLexer_to = 422;
	public static final int ART_L_OcamlLexer_to_1025 = 423;
	public static final int ART_L_OcamlLexer_true = 424;
	public static final int ART_L_OcamlLexer_true_1032 = 425;
	public static final int ART_L_OcamlLexer_try = 426;
	public static final int ART_L_OcamlLexer_try_1043 = 427;
	public static final int ART_L_OcamlLexer_type = 428;
	public static final int ART_L_OcamlLexer_type_1052 = 429;
	public static final int ART_L_OcamlLexer_val = 430;
	public static final int ART_L_OcamlLexer_val_1063 = 431;
	public static final int ART_L_OcamlLexer_virtual = 432;
	public static final int ART_L_OcamlLexer_virtual_1072 = 433;
	public static final int ART_L_OcamlLexer_when = 434;
	public static final int ART_L_OcamlLexer_when_1089 = 435;
	public static final int ART_L_OcamlLexer_while = 436;
	public static final int ART_L_OcamlLexer_while_1100 = 437;
	public static final int ART_L_OcamlLexer_with = 438;
	public static final int ART_L_OcamlLexer_with_1113 = 439;
	public static final int ART_L_OcamlLexer_bangequals = 440;
	public static final int ART_L_OcamlLexer_bangequals_1124 = 441;
	public static final int ART_L_OcamlLexer_hash = 442;
	public static final int ART_L_OcamlLexer_hash_1131 = 443;
	public static final int ART_L_OcamlLexer_amper = 444;
	public static final int ART_L_OcamlLexer_amper_1136 = 445;
	public static final int ART_L_OcamlLexer_amperamper = 446;
	public static final int ART_L_OcamlLexer_amperamper_1141 = 447;
	public static final int ART_L_OcamlLexer_squote = 448;
	public static final int ART_L_OcamlLexer_squote_1148 = 449;
	public static final int ART_L_OcamlLexer_lparen = 450;
	public static final int ART_L_OcamlLexer_lparen_1153 = 451;
	public static final int ART_L_OcamlLexer_rparen = 452;
	public static final int ART_L_OcamlLexer_rparen_1158 = 453;
	public static final int ART_L_OcamlLexer_star = 454;
	public static final int ART_L_OcamlLexer_star_1163 = 455;
	public static final int ART_L_OcamlLexer_plus = 456;
	public static final int ART_L_OcamlLexer_plus_1168 = 457;
	public static final int ART_L_OcamlLexer_comma = 458;
	public static final int ART_L_OcamlLexer_comma_1173 = 459;
	public static final int ART_L_OcamlLexer_hyphen = 460;
	public static final int ART_L_OcamlLexer_hyphen_1178 = 461;
	public static final int ART_L_OcamlLexer_hyphendot = 462;
	public static final int ART_L_OcamlLexer_hyphendot_1183 = 463;
	public static final int ART_L_OcamlLexer_hyphengreater = 464;
	public static final int ART_L_OcamlLexer_hyphengreater_1190 = 465;
	public static final int ART_L_OcamlLexer_dot = 466;
	public static final int ART_L_OcamlLexer_dot_1197 = 467;
	public static final int ART_L_OcamlLexer_dotdot = 468;
	public static final int ART_L_OcamlLexer_dotdot_1202 = 469;
	public static final int ART_L_OcamlLexer_colon = 470;
	public static final int ART_L_OcamlLexer_colon_1209 = 471;
	public static final int ART_L_OcamlLexer_coloncolon = 472;
	public static final int ART_L_OcamlLexer_coloncolon_1214 = 473;
	public static final int ART_L_OcamlLexer_colonequals = 474;
	public static final int ART_L_OcamlLexer_colonequals_1221 = 475;
	public static final int ART_L_OcamlLexer_colongreater = 476;
	public static final int ART_L_OcamlLexer_colongreater_1228 = 477;
	public static final int ART_L_OcamlLexer_semi = 478;
	public static final int ART_L_OcamlLexer_semi_1235 = 479;
	public static final int ART_L_OcamlLexer_semisemi = 480;
	public static final int ART_L_OcamlLexer_semisemi_1240 = 481;
	public static final int ART_L_OcamlLexer_less = 482;
	public static final int ART_L_OcamlLexer_less_1247 = 483;
	public static final int ART_L_OcamlLexer_lesshyphen = 484;
	public static final int ART_L_OcamlLexer_lesshyphen_1252 = 485;
	public static final int ART_L_OcamlLexer_equal = 486;
	public static final int ART_L_OcamlLexer_equal_1259 = 487;
	public static final int ART_L_OcamlLexer_greater = 488;
	public static final int ART_L_OcamlLexer_greater_1264 = 489;
	public static final int ART_L_OcamlLexer_greaterrbracket = 490;
	public static final int ART_L_OcamlLexer_greaterrbracket_1269 = 491;
	public static final int ART_L_OcamlLexer_greaterrbrace = 492;
	public static final int ART_L_OcamlLexer_greaterrbrace_1276 = 493;
	public static final int ART_L_OcamlLexer_question = 494;
	public static final int ART_L_OcamlLexer_question_1283 = 495;
	public static final int ART_L_OcamlLexer_lbracket = 496;
	public static final int ART_L_OcamlLexer_lbracket_1288 = 497;
	public static final int ART_L_OcamlLexer_lbracketless = 498;
	public static final int ART_L_OcamlLexer_lbracketless_1293 = 499;
	public static final int ART_L_OcamlLexer_lbracketgreater = 500;
	public static final int ART_L_OcamlLexer_lbracketgreater_1300 = 501;
	public static final int ART_L_OcamlLexer_lbracketbar = 502;
	public static final int ART_L_OcamlLexer_lbracketbar_1307 = 503;
	public static final int ART_L_OcamlLexer_rbracket = 504;
	public static final int ART_L_OcamlLexer_rbracket_1314 = 505;
	public static final int ART_L_OcamlLexer_underscore = 506;
	public static final int ART_L_OcamlLexer_underscore_1319 = 507;
	public static final int ART_L_OcamlLexer_backquote = 508;
	public static final int ART_L_OcamlLexer_backquote_1324 = 509;
	public static final int ART_L_OcamlLexer_lbrace = 510;
	public static final int ART_L_OcamlLexer_lbrace_1329 = 511;
	public static final int ART_L_OcamlLexer_lbraceless = 512;
	public static final int ART_L_OcamlLexer_lbraceless_1334 = 513;
	public static final int ART_L_OcamlLexer_bar = 514;
	public static final int ART_L_OcamlLexer_bar_1341 = 515;
	public static final int ART_L_OcamlLexer_barrbracket = 516;
	public static final int ART_L_OcamlLexer_barrbracket_1346 = 517;
	public static final int ART_L_OcamlLexer_barbar = 518;
	public static final int ART_L_OcamlLexer_barbar_1353 = 519;
	public static final int ART_L_OcamlLexer_rbrace = 520;
	public static final int ART_L_OcamlLexer_rbrace_1360 = 521;
	public static final int ART_L_OcamlLexer_tilde = 522;
	public static final int ART_L_OcamlLexer_tilde_1365 = 523;
	public static final int ART_L_OcamlLexer_ident = 524;
	public static final int ART_L_OcamlLexer_ident_1370 = 525;
	public static final int ART_L_OcamlLexer_ident_1374 = 526;
	public static final int ART_L_OcamlLexer_ident_1376 = 527;
	public static final int ART_L_OcamlLexer_ident_1378 = 528;
	public static final int ART_L_OcamlLexer_ident_1386 = 529;
	public static final int ART_L_OcamlLexer_ident_1387 = 530;
	public static final int ART_L_OcamlLexer_letter = 531;
	public static final int ART_L_OcamlLexer_letter_1390 = 532;
	public static final int ART_L_OcamlLexer_letter_1392 = 533;
	public static final int ART_L_OcamlLexer_letter_1394 = 534;
	public static final int ART_L_OcamlLexer_letter_1396 = 535;
	public static final int ART_L_OcamlLexer_identifier_part_character = 536;
	public static final int ART_L_OcamlLexer_identifier_part_character_1399 = 537;
	public static final int ART_L_OcamlLexer_identifier_part_character_1403 = 538;
	public static final int ART_L_OcamlLexer_identifier_part_character_1407 = 539;
	public static final int ART_L_OcamlLexer_identifier_part_character_1411 = 540;
	public static final int ART_L_OcamlLexer_identifier_part_character_1415 = 541;
	public static final int ART_L_OcamlLexer_identifier_part_character_1419 = 542;
	public static final int ART_L_OcamlLexer_identifier_part_character_1423 = 543;
	public static final int ART_L_OcamlLexer_identifier_part_character_1427 = 544;
	public static final int ART_L_OcamlLexer_identifier_part_character_1431 = 545;
	public static final int ART_L_OcamlLexer_identifier_part_character_1435 = 546;
	public static final int ART_L_OcamlLexer_identifier_part_character_1439 = 547;
	public static final int ART_L_OcamlLexer_identifier_part_character_1443 = 548;
	public static final int ART_L_OcamlLexer_identifier_part_character_1447 = 549;
	public static final int ART_L_OcamlLexer_identifier_part_character_1451 = 550;
	public static final int ART_L_OcamlLexer_identifier_part_character_1455 = 551;
	public static final int ART_L_OcamlLexer_identifier_part_character_1459 = 552;
	public static final int ART_L_OcamlLexer_identifier_part_character_1463 = 553;
	public static final int ART_L_OcamlLexer_identifier_part_character_1467 = 554;
	public static final int ART_L_OcamlLexer_identifier_part_character_1471 = 555;
	public static final int ART_L_OcamlLexer_identifier_part_character_1475 = 556;
	public static final int ART_L_OcamlLexer_identifier_part_character_1479 = 557;
	public static final int ART_L_OcamlLexer_identifier_part_character_1483 = 558;
	public static final int ART_L_OcamlLexer_identifier_part_character_1487 = 559;
	public static final int ART_L_OcamlLexer_identifier_part_character_1491 = 560;
	public static final int ART_L_OcamlLexer_identifier_part_character_1495 = 561;
	public static final int ART_L_OcamlLexer_identifier_part_character_1499 = 562;
	public static final int ART_L_OcamlLexer_identifier_part_character_1503 = 563;
	public static final int ART_L_OcamlLexer_identifier_part_character_1507 = 564;
	public static final int ART_L_OcamlLexer_identifier_part_character_1511 = 565;
	public static final int ART_L_OcamlLexer_identifier_part_character_1515 = 566;
	public static final int ART_L_OcamlLexer_identifier_part_character_1519 = 567;
	public static final int ART_L_OcamlLexer_identifier_part_character_1523 = 568;
	public static final int ART_L_OcamlLexer_identifier_part_character_1527 = 569;
	public static final int ART_L_OcamlLexer_identifier_part_character_1531 = 570;
	public static final int ART_L_OcamlLexer_identifier_part_character_1535 = 571;
	public static final int ART_L_OcamlLexer_identifier_part_character_1539 = 572;
	public static final int ART_L_OcamlLexer_identifier_part_character_1543 = 573;
	public static final int ART_L_OcamlLexer_identifier_part_character_1547 = 574;
	public static final int ART_L_OcamlLexer_identifier_part_character_1551 = 575;
	public static final int ART_L_OcamlLexer_identifier_part_character_1555 = 576;
	public static final int ART_L_OcamlLexer_identifier_part_character_1559 = 577;
	public static final int ART_L_OcamlLexer_identifier_part_character_1563 = 578;
	public static final int ART_L_OcamlLexer_identifier_part_character_1567 = 579;
	public static final int ART_L_OcamlLexer_identifier_part_character_1571 = 580;
	public static final int ART_L_OcamlLexer_identifier_part_character_1575 = 581;
	public static final int ART_L_OcamlLexer_identifier_part_character_1579 = 582;
	public static final int ART_L_OcamlLexer_identifier_part_character_1583 = 583;
	public static final int ART_L_OcamlLexer_identifier_part_character_1587 = 584;
	public static final int ART_L_OcamlLexer_identifier_part_character_1591 = 585;
	public static final int ART_L_OcamlLexer_identifier_part_character_1595 = 586;
	public static final int ART_L_OcamlLexer_identifier_part_character_1599 = 587;
	public static final int ART_L_OcamlLexer_identifier_part_character_1603 = 588;
	public static final int ART_L_OcamlLexer_identifier_part_character_1607 = 589;
	public static final int ART_L_OcamlLexer_identifier_part_character_1611 = 590;
	public static final int ART_L_OcamlLexer_identifier_part_character_1615 = 591;
	public static final int ART_L_OcamlLexer_identifier_part_character_1619 = 592;
	public static final int ART_L_OcamlLexer_identifier_part_character_1623 = 593;
	public static final int ART_L_OcamlLexer_identifier_part_character_1627 = 594;
	public static final int ART_L_OcamlLexer_identifier_part_character_1631 = 595;
	public static final int ART_L_OcamlLexer_identifier_part_character_1635 = 596;
	public static final int ART_L_OcamlLexer_identifier_part_character_1639 = 597;
	public static final int ART_L_OcamlLexer_identifier_part_character_1643 = 598;
	public static final int ART_L_OcamlLexer_identifier_part_character_1647 = 599;
	public static final int ART_L_OcamlLexer_identifier_part_character_1651 = 600;
	public static final int ART_L_OcamlLexer_capitalized_ident = 601;
	public static final int ART_L_OcamlLexer_capitalized_ident_1656 = 602;
	public static final int ART_L_OcamlLexer_capitalized_ident_1658 = 603;
	public static final int ART_L_OcamlLexer_capitalized_ident_1663 = 604;
	public static final int ART_L_OcamlLexer_capitalized_ident_1664 = 605;
	public static final int ART_L_OcamlLexer_capital_letter = 606;
	public static final int ART_L_OcamlLexer_capital_letter_1667 = 607;
	public static final int ART_L_OcamlLexer_capital_letter_1671 = 608;
	public static final int ART_L_OcamlLexer_capital_letter_1675 = 609;
	public static final int ART_L_OcamlLexer_capital_letter_1679 = 610;
	public static final int ART_L_OcamlLexer_capital_letter_1683 = 611;
	public static final int ART_L_OcamlLexer_capital_letter_1687 = 612;
	public static final int ART_L_OcamlLexer_capital_letter_1691 = 613;
	public static final int ART_L_OcamlLexer_capital_letter_1695 = 614;
	public static final int ART_L_OcamlLexer_capital_letter_1699 = 615;
	public static final int ART_L_OcamlLexer_capital_letter_1703 = 616;
	public static final int ART_L_OcamlLexer_capital_letter_1707 = 617;
	public static final int ART_L_OcamlLexer_capital_letter_1711 = 618;
	public static final int ART_L_OcamlLexer_capital_letter_1715 = 619;
	public static final int ART_L_OcamlLexer_capital_letter_1719 = 620;
	public static final int ART_L_OcamlLexer_capital_letter_1723 = 621;
	public static final int ART_L_OcamlLexer_capital_letter_1727 = 622;
	public static final int ART_L_OcamlLexer_capital_letter_1731 = 623;
	public static final int ART_L_OcamlLexer_capital_letter_1735 = 624;
	public static final int ART_L_OcamlLexer_capital_letter_1739 = 625;
	public static final int ART_L_OcamlLexer_capital_letter_1743 = 626;
	public static final int ART_L_OcamlLexer_capital_letter_1747 = 627;
	public static final int ART_L_OcamlLexer_capital_letter_1751 = 628;
	public static final int ART_L_OcamlLexer_capital_letter_1755 = 629;
	public static final int ART_L_OcamlLexer_capital_letter_1759 = 630;
	public static final int ART_L_OcamlLexer_capital_letter_1763 = 631;
	public static final int ART_L_OcamlLexer_capital_letter_1767 = 632;
	public static final int ART_L_OcamlLexer_lowercase_ident = 633;
	public static final int ART_L_OcamlLexer_lowercase_ident_1772 = 634;
	public static final int ART_L_OcamlLexer_lowercase_ident_1774 = 635;
	public static final int ART_L_OcamlLexer_lowercase_ident_1779 = 636;
	public static final int ART_L_OcamlLexer_lowercase_ident_1780 = 637;
	public static final int ART_L_OcamlLexer_lowercase_letter = 638;
	public static final int ART_L_OcamlLexer_lowercase_letter_1783 = 639;
	public static final int ART_L_OcamlLexer_lowercase_letter_1787 = 640;
	public static final int ART_L_OcamlLexer_lowercase_letter_1791 = 641;
	public static final int ART_L_OcamlLexer_lowercase_letter_1795 = 642;
	public static final int ART_L_OcamlLexer_lowercase_letter_1799 = 643;
	public static final int ART_L_OcamlLexer_lowercase_letter_1803 = 644;
	public static final int ART_L_OcamlLexer_lowercase_letter_1807 = 645;
	public static final int ART_L_OcamlLexer_lowercase_letter_1811 = 646;
	public static final int ART_L_OcamlLexer_lowercase_letter_1815 = 647;
	public static final int ART_L_OcamlLexer_lowercase_letter_1819 = 648;
	public static final int ART_L_OcamlLexer_lowercase_letter_1823 = 649;
	public static final int ART_L_OcamlLexer_lowercase_letter_1827 = 650;
	public static final int ART_L_OcamlLexer_lowercase_letter_1831 = 651;
	public static final int ART_L_OcamlLexer_lowercase_letter_1835 = 652;
	public static final int ART_L_OcamlLexer_lowercase_letter_1839 = 653;
	public static final int ART_L_OcamlLexer_lowercase_letter_1843 = 654;
	public static final int ART_L_OcamlLexer_lowercase_letter_1847 = 655;
	public static final int ART_L_OcamlLexer_lowercase_letter_1851 = 656;
	public static final int ART_L_OcamlLexer_lowercase_letter_1855 = 657;
	public static final int ART_L_OcamlLexer_lowercase_letter_1859 = 658;
	public static final int ART_L_OcamlLexer_lowercase_letter_1863 = 659;
	public static final int ART_L_OcamlLexer_lowercase_letter_1867 = 660;
	public static final int ART_L_OcamlLexer_lowercase_letter_1871 = 661;
	public static final int ART_L_OcamlLexer_lowercase_letter_1875 = 662;
	public static final int ART_L_OcamlLexer_lowercase_letter_1879 = 663;
	public static final int ART_L_OcamlLexer_lowercase_letter_1883 = 664;
	public static final int ART_L_OcamlLexer_lowercase_letter_1887 = 665;
	public static final int ART_L_OcamlLexer_whitespace = 666;
	public static final int ART_L_OcamlLexer_whitespace_1892 = 667;
	public static final int ART_L_OcamlLexer_whitespace_1896 = 668;
	public static final int ART_L_OcamlLexer_whitespace_1900 = 669;
	public static final int ART_L_OcamlLexer_whitespace_1904 = 670;
	public static final int ART_L_OcamlLexer_whitespace_1908 = 671;
	public static final int ART_L_OcamlLexer_whitespace_1912 = 672;
	public static final int ART_L_OcamlLexer_comment = 673;
	public static final int ART_L_OcamlLexer_comment_1917 = 674;
	public static final int ART_L_OcamlLexer_comment_1925 = 675;
	public static final int ART_L_OcamlLexer_comment_1927 = 676;
	public static final int ART_L_OcamlLexer_comment_1929 = 677;
	public static final int ART_L_OcamlLexer_comment_1931 = 678;
	public static final int ART_L_OcamlLexer_not_comment = 679;
	public static final int ART_L_OcamlLexer_not_comment_1939 = 680;
	public static final int ART_L_OcamlLexer_not_comment_1943 = 681;
	public static final int ART_L_OcamlLexer_not_comment_1945 = 682;
	public static final int ART_L_OcamlLexer_not_comment_1949 = 683;
	public static final int ART_L_OcamlLexer_not_comment_1951 = 684;
	public static final int ART_L_OcamlLexer_not_comment_1955 = 685;
	public static final int ART_L_OcamlLexer_not_comment_1957 = 686;
	public static final int ART_L_OcamlLexer_not_comment_1961 = 687;
	public static final int ART_L_OcamlLexer_not_comment_1963 = 688;
	public static final int ART_L_OcamlLexer_not_comment_1967 = 689;
	public static final int ART_L_OcamlLexer_not_comment_1969 = 690;
	public static final int ART_L_OcamlLexer_not_comment_1973 = 691;
	public static final int ART_L_OcamlLexer_not_comment_1975 = 692;
	public static final int ART_L_OcamlLexer_not_comment_1979 = 693;
	public static final int ART_L_OcamlLexer_not_comment_1981 = 694;
	public static final int ART_L_OcamlLexer_not_comment_1985 = 695;
	public static final int ART_L_OcamlLexer_not_comment_1987 = 696;
	public static final int ART_L_OcamlLexer_not_comment_1991 = 697;
	public static final int ART_L_OcamlLexer_not_comment_1993 = 698;
	public static final int ART_L_OcamlLexer_not_comment_1997 = 699;
	public static final int ART_L_OcamlLexer_not_comment_1999 = 700;
	public static final int ART_L_OcamlLexer_not_comment_2003 = 701;
	public static final int ART_L_OcamlLexer_not_comment_2005 = 702;
	public static final int ART_L_OcamlLexer_not_comment_2009 = 703;
	public static final int ART_L_OcamlLexer_not_comment_2011 = 704;
	public static final int ART_L_OcamlLexer_not_comment_2015 = 705;
	public static final int ART_L_OcamlLexer_not_comment_2017 = 706;
	public static final int ART_L_OcamlLexer_not_comment_2021 = 707;
	public static final int ART_L_OcamlLexer_not_comment_2023 = 708;
	public static final int ART_L_OcamlLexer_not_comment_2027 = 709;
	public static final int ART_L_OcamlLexer_not_comment_2029 = 710;
	public static final int ART_L_OcamlLexer_not_comment_2035 = 711;
	public static final int ART_L_OcamlLexer_not_comment_2037 = 712;
	public static final int ART_L_OcamlLexer_not_comment_2039 = 713;
	public static final int ART_L_OcamlLexer_not_comment_2041 = 714;
	public static final int ART_L_OcamlLexer_not_comment_2046 = 715;
	public static final int ART_L_OcamlLexer_not_comment_2050 = 716;
	public static final int ART_L_OcamlLexer_not_comment_2052 = 717;
	public static final int ART_L_OcamlLexer_not_comment_2058 = 718;
	public static final int ART_L_OcamlLexer_not_comment_2060 = 719;
	public static final int ART_L_OcamlLexer_not_comment_2062 = 720;
	public static final int ART_L_OcamlLexer_not_comment_2064 = 721;
	public static final int ART_L_OcamlLexer_not_comment_2069 = 722;
	public static final int ART_L_OcamlLexer_not_comment_2073 = 723;
	public static final int ART_L_OcamlLexer_not_comment_2075 = 724;
	public static final int ART_L_OcamlLexer_not_comment_2079 = 725;
	public static final int ART_L_OcamlLexer_not_comment_2081 = 726;
	public static final int ART_L_OcamlLexer_not_comment_2085 = 727;
	public static final int ART_L_OcamlLexer_not_comment_2087 = 728;
	public static final int ART_L_OcamlLexer_not_comment_2091 = 729;
	public static final int ART_L_OcamlLexer_not_comment_2093 = 730;
	public static final int ART_L_OcamlLexer_not_comment_2097 = 731;
	public static final int ART_L_OcamlLexer_not_comment_2099 = 732;
	public static final int ART_L_OcamlLexer_not_comment_2103 = 733;
	public static final int ART_L_OcamlLexer_not_comment_2105 = 734;
	public static final int ART_L_OcamlLexer_not_comment_2109 = 735;
	public static final int ART_L_OcamlLexer_not_comment_2111 = 736;
	public static final int ART_L_OcamlLexer_not_comment_2115 = 737;
	public static final int ART_L_OcamlLexer_not_comment_2117 = 738;
	public static final int ART_L_OcamlLexer_not_comment_2121 = 739;
	public static final int ART_L_OcamlLexer_not_comment_2123 = 740;
	public static final int ART_L_OcamlLexer_not_comment_2127 = 741;
	public static final int ART_L_OcamlLexer_not_comment_2129 = 742;
	public static final int ART_L_OcamlLexer_not_comment_2133 = 743;
	public static final int ART_L_OcamlLexer_not_comment_2135 = 744;
	public static final int ART_L_OcamlLexer_not_comment_2139 = 745;
	public static final int ART_L_OcamlLexer_not_comment_2141 = 746;
	public static final int ART_L_OcamlLexer_not_comment_2145 = 747;
	public static final int ART_L_OcamlLexer_not_comment_2147 = 748;
	public static final int ART_L_OcamlLexer_not_comment_2151 = 749;
	public static final int ART_L_OcamlLexer_not_comment_2153 = 750;
	public static final int ART_L_OcamlLexer_not_comment_2157 = 751;
	public static final int ART_L_OcamlLexer_not_comment_2159 = 752;
	public static final int ART_L_OcamlLexer_not_comment_2163 = 753;
	public static final int ART_L_OcamlLexer_not_comment_2165 = 754;
	public static final int ART_L_OcamlLexer_not_comment_2169 = 755;
	public static final int ART_L_OcamlLexer_not_comment_2171 = 756;
	public static final int ART_L_OcamlLexer_not_comment_2175 = 757;
	public static final int ART_L_OcamlLexer_not_comment_2177 = 758;
	public static final int ART_L_OcamlLexer_not_comment_2181 = 759;
	public static final int ART_L_OcamlLexer_not_comment_2183 = 760;
	public static final int ART_L_OcamlLexer_not_comment_2187 = 761;
	public static final int ART_L_OcamlLexer_not_comment_2189 = 762;
	public static final int ART_L_OcamlLexer_not_comment_2193 = 763;
	public static final int ART_L_OcamlLexer_not_comment_2195 = 764;
	public static final int ART_L_OcamlLexer_not_comment_2199 = 765;
	public static final int ART_L_OcamlLexer_not_comment_2201 = 766;
	public static final int ART_L_OcamlLexer_not_comment_2205 = 767;
	public static final int ART_L_OcamlLexer_not_comment_2207 = 768;
	public static final int ART_L_OcamlLexer_not_comment_2211 = 769;
	public static final int ART_L_OcamlLexer_not_comment_2213 = 770;
	public static final int ART_L_OcamlLexer_not_comment_2217 = 771;
	public static final int ART_L_OcamlLexer_not_comment_2219 = 772;
	public static final int ART_L_OcamlLexer_not_comment_2223 = 773;
	public static final int ART_L_OcamlLexer_not_comment_2225 = 774;
	public static final int ART_L_OcamlLexer_not_comment_2229 = 775;
	public static final int ART_L_OcamlLexer_not_comment_2231 = 776;
	public static final int ART_L_OcamlLexer_not_comment_2235 = 777;
	public static final int ART_L_OcamlLexer_not_comment_2237 = 778;
	public static final int ART_L_OcamlLexer_not_comment_2241 = 779;
	public static final int ART_L_OcamlLexer_not_comment_2243 = 780;
	public static final int ART_L_OcamlLexer_not_comment_2247 = 781;
	public static final int ART_L_OcamlLexer_not_comment_2249 = 782;
	public static final int ART_L_OcamlLexer_not_comment_2253 = 783;
	public static final int ART_L_OcamlLexer_not_comment_2255 = 784;
	public static final int ART_L_OcamlLexer_not_comment_2259 = 785;
	public static final int ART_L_OcamlLexer_not_comment_2261 = 786;
	public static final int ART_L_OcamlLexer_not_comment_2265 = 787;
	public static final int ART_L_OcamlLexer_not_comment_2267 = 788;
	public static final int ART_L_OcamlLexer_not_comment_2271 = 789;
	public static final int ART_L_OcamlLexer_not_comment_2273 = 790;
	public static final int ART_L_OcamlLexer_not_comment_2277 = 791;
	public static final int ART_L_OcamlLexer_not_comment_2279 = 792;
	public static final int ART_L_OcamlLexer_not_comment_2283 = 793;
	public static final int ART_L_OcamlLexer_not_comment_2285 = 794;
	public static final int ART_L_OcamlLexer_not_comment_2289 = 795;
	public static final int ART_L_OcamlLexer_not_comment_2291 = 796;
	public static final int ART_L_OcamlLexer_not_comment_2295 = 797;
	public static final int ART_L_OcamlLexer_not_comment_2297 = 798;
	public static final int ART_L_OcamlLexer_not_comment_2301 = 799;
	public static final int ART_L_OcamlLexer_not_comment_2303 = 800;
	public static final int ART_L_OcamlLexer_not_comment_2307 = 801;
	public static final int ART_L_OcamlLexer_not_comment_2309 = 802;
	public static final int ART_L_OcamlLexer_not_comment_2313 = 803;
	public static final int ART_L_OcamlLexer_not_comment_2315 = 804;
	public static final int ART_L_OcamlLexer_not_comment_2319 = 805;
	public static final int ART_L_OcamlLexer_not_comment_2321 = 806;
	public static final int ART_L_OcamlLexer_not_comment_2325 = 807;
	public static final int ART_L_OcamlLexer_not_comment_2327 = 808;
	public static final int ART_L_OcamlLexer_not_comment_2331 = 809;
	public static final int ART_L_OcamlLexer_not_comment_2333 = 810;
	public static final int ART_L_OcamlLexer_not_comment_2337 = 811;
	public static final int ART_L_OcamlLexer_not_comment_2339 = 812;
	public static final int ART_L_OcamlLexer_not_comment_2343 = 813;
	public static final int ART_L_OcamlLexer_not_comment_2345 = 814;
	public static final int ART_L_OcamlLexer_not_comment_2349 = 815;
	public static final int ART_L_OcamlLexer_not_comment_2351 = 816;
	public static final int ART_L_OcamlLexer_not_comment_2355 = 817;
	public static final int ART_L_OcamlLexer_not_comment_2357 = 818;
	public static final int ART_L_OcamlLexer_not_comment_2361 = 819;
	public static final int ART_L_OcamlLexer_not_comment_2363 = 820;
	public static final int ART_L_OcamlLexer_not_comment_2367 = 821;
	public static final int ART_L_OcamlLexer_not_comment_2369 = 822;
	public static final int ART_L_OcamlLexer_not_comment_2373 = 823;
	public static final int ART_L_OcamlLexer_not_comment_2375 = 824;
	public static final int ART_L_OcamlLexer_not_comment_2379 = 825;
	public static final int ART_L_OcamlLexer_not_comment_2381 = 826;
	public static final int ART_L_OcamlLexer_not_comment_2385 = 827;
	public static final int ART_L_OcamlLexer_not_comment_2387 = 828;
	public static final int ART_L_OcamlLexer_not_comment_2391 = 829;
	public static final int ART_L_OcamlLexer_not_comment_2393 = 830;
	public static final int ART_L_OcamlLexer_not_comment_2397 = 831;
	public static final int ART_L_OcamlLexer_not_comment_2399 = 832;
	public static final int ART_L_OcamlLexer_not_comment_2403 = 833;
	public static final int ART_L_OcamlLexer_not_comment_2405 = 834;
	public static final int ART_L_OcamlLexer_not_comment_2409 = 835;
	public static final int ART_L_OcamlLexer_not_comment_2411 = 836;
	public static final int ART_L_OcamlLexer_not_comment_2415 = 837;
	public static final int ART_L_OcamlLexer_not_comment_2417 = 838;
	public static final int ART_L_OcamlLexer_not_comment_2421 = 839;
	public static final int ART_L_OcamlLexer_not_comment_2423 = 840;
	public static final int ART_L_OcamlLexer_not_comment_2427 = 841;
	public static final int ART_L_OcamlLexer_not_comment_2429 = 842;
	public static final int ART_L_OcamlLexer_not_comment_2433 = 843;
	public static final int ART_L_OcamlLexer_not_comment_2435 = 844;
	public static final int ART_L_OcamlLexer_not_comment_2439 = 845;
	public static final int ART_L_OcamlLexer_not_comment_2441 = 846;
	public static final int ART_L_OcamlLexer_not_comment_2445 = 847;
	public static final int ART_L_OcamlLexer_not_comment_2447 = 848;
	public static final int ART_L_OcamlLexer_not_comment_2451 = 849;
	public static final int ART_L_OcamlLexer_not_comment_2453 = 850;
	public static final int ART_L_OcamlLexer_not_comment_2457 = 851;
	public static final int ART_L_OcamlLexer_not_comment_2459 = 852;
	public static final int ART_L_OcamlLexer_not_comment_2463 = 853;
	public static final int ART_L_OcamlLexer_not_comment_2465 = 854;
	public static final int ART_L_OcamlLexer_not_comment_2469 = 855;
	public static final int ART_L_OcamlLexer_not_comment_2471 = 856;
	public static final int ART_L_OcamlLexer_not_comment_2475 = 857;
	public static final int ART_L_OcamlLexer_not_comment_2477 = 858;
	public static final int ART_L_OcamlLexer_not_comment_2481 = 859;
	public static final int ART_L_OcamlLexer_not_comment_2483 = 860;
	public static final int ART_L_OcamlLexer_not_comment_2487 = 861;
	public static final int ART_L_OcamlLexer_not_comment_2489 = 862;
	public static final int ART_L_OcamlLexer_not_comment_2493 = 863;
	public static final int ART_L_OcamlLexer_not_comment_2495 = 864;
	public static final int ART_L_OcamlLexer_not_comment_2499 = 865;
	public static final int ART_L_OcamlLexer_not_comment_2501 = 866;
	public static final int ART_L_OcamlLexer_not_comment_2505 = 867;
	public static final int ART_L_OcamlLexer_not_comment_2507 = 868;
	public static final int ART_L_OcamlLexer_not_comment_2511 = 869;
	public static final int ART_L_OcamlLexer_not_comment_2513 = 870;
	public static final int ART_L_OcamlLexer_not_comment_2517 = 871;
	public static final int ART_L_OcamlLexer_not_comment_2519 = 872;
	public static final int ART_L_OcamlLexer_not_comment_2523 = 873;
	public static final int ART_L_OcamlLexer_not_comment_2525 = 874;
	public static final int ART_L_OcamlLexer_not_comment_2529 = 875;
	public static final int ART_L_OcamlLexer_not_comment_2531 = 876;
	public static final int ART_L_OcamlLexer_not_comment_2535 = 877;
	public static final int ART_L_OcamlLexer_not_comment_2537 = 878;
	public static final int ART_L_OcamlLexer_not_comment_2541 = 879;
	public static final int ART_L_OcamlLexer_not_comment_2543 = 880;
	public static final int ART_L_OcamlLexer_not_comment_2547 = 881;
	public static final int ART_L_OcamlLexer_not_comment_2549 = 882;
	public static final int ART_L_OcamlLexer_not_comment_2553 = 883;
	public static final int ART_L_OcamlLexer_not_comment_2555 = 884;
	public static final int ART_L_OcamlLexer_not_comment_2559 = 885;
	public static final int ART_L_OcamlLexer_not_comment_2561 = 886;
	public static final int ART_L_OcamlLexer_not_comment_2565 = 887;
	public static final int ART_L_OcamlLexer_not_comment_2567 = 888;
	public static final int ART_L_OcamlLexer_not_comment_2571 = 889;
	public static final int ART_L_OcamlLexer_not_comment_2573 = 890;
	public static final int ART_L_OcamlLexer_not_comment_2577 = 891;
	public static final int ART_L_OcamlLexer_not_comment_2579 = 892;
	public static final int ART_L_OcamlLexer_not_asterisk = 893;
	public static final int ART_L_OcamlLexer_not_asterisk_2584 = 894;
	public static final int ART_L_OcamlLexer_not_asterisk_2588 = 895;
	public static final int ART_L_OcamlLexer_not_asterisk_2592 = 896;
	public static final int ART_L_OcamlLexer_not_asterisk_2596 = 897;
	public static final int ART_L_OcamlLexer_not_asterisk_2600 = 898;
	public static final int ART_L_OcamlLexer_not_asterisk_2604 = 899;
	public static final int ART_L_OcamlLexer_not_asterisk_2608 = 900;
	public static final int ART_L_OcamlLexer_not_asterisk_2612 = 901;
	public static final int ART_L_OcamlLexer_not_asterisk_2616 = 902;
	public static final int ART_L_OcamlLexer_not_asterisk_2620 = 903;
	public static final int ART_L_OcamlLexer_not_asterisk_2624 = 904;
	public static final int ART_L_OcamlLexer_not_asterisk_2628 = 905;
	public static final int ART_L_OcamlLexer_not_asterisk_2632 = 906;
	public static final int ART_L_OcamlLexer_not_asterisk_2636 = 907;
	public static final int ART_L_OcamlLexer_not_asterisk_2640 = 908;
	public static final int ART_L_OcamlLexer_not_asterisk_2644 = 909;
	public static final int ART_L_OcamlLexer_not_asterisk_2648 = 910;
	public static final int ART_L_OcamlLexer_not_asterisk_2652 = 911;
	public static final int ART_L_OcamlLexer_not_asterisk_2656 = 912;
	public static final int ART_L_OcamlLexer_not_asterisk_2660 = 913;
	public static final int ART_L_OcamlLexer_not_asterisk_2664 = 914;
	public static final int ART_L_OcamlLexer_not_asterisk_2668 = 915;
	public static final int ART_L_OcamlLexer_not_asterisk_2672 = 916;
	public static final int ART_L_OcamlLexer_not_asterisk_2676 = 917;
	public static final int ART_L_OcamlLexer_not_asterisk_2680 = 918;
	public static final int ART_L_OcamlLexer_not_asterisk_2684 = 919;
	public static final int ART_L_OcamlLexer_not_asterisk_2688 = 920;
	public static final int ART_L_OcamlLexer_not_asterisk_2692 = 921;
	public static final int ART_L_OcamlLexer_not_asterisk_2696 = 922;
	public static final int ART_L_OcamlLexer_not_asterisk_2700 = 923;
	public static final int ART_L_OcamlLexer_not_asterisk_2704 = 924;
	public static final int ART_L_OcamlLexer_not_asterisk_2708 = 925;
	public static final int ART_L_OcamlLexer_not_asterisk_2712 = 926;
	public static final int ART_L_OcamlLexer_not_asterisk_2716 = 927;
	public static final int ART_L_OcamlLexer_not_asterisk_2720 = 928;
	public static final int ART_L_OcamlLexer_not_asterisk_2724 = 929;
	public static final int ART_L_OcamlLexer_not_asterisk_2728 = 930;
	public static final int ART_L_OcamlLexer_not_asterisk_2732 = 931;
	public static final int ART_L_OcamlLexer_not_asterisk_2736 = 932;
	public static final int ART_L_OcamlLexer_not_asterisk_2740 = 933;
	public static final int ART_L_OcamlLexer_not_asterisk_2744 = 934;
	public static final int ART_L_OcamlLexer_not_asterisk_2748 = 935;
	public static final int ART_L_OcamlLexer_not_asterisk_2752 = 936;
	public static final int ART_L_OcamlLexer_not_asterisk_2756 = 937;
	public static final int ART_L_OcamlLexer_not_asterisk_2760 = 938;
	public static final int ART_L_OcamlLexer_not_asterisk_2764 = 939;
	public static final int ART_L_OcamlLexer_not_asterisk_2768 = 940;
	public static final int ART_L_OcamlLexer_not_asterisk_2772 = 941;
	public static final int ART_L_OcamlLexer_not_asterisk_2776 = 942;
	public static final int ART_L_OcamlLexer_not_asterisk_2780 = 943;
	public static final int ART_L_OcamlLexer_not_asterisk_2784 = 944;
	public static final int ART_L_OcamlLexer_not_asterisk_2788 = 945;
	public static final int ART_L_OcamlLexer_not_asterisk_2792 = 946;
	public static final int ART_L_OcamlLexer_not_asterisk_2796 = 947;
	public static final int ART_L_OcamlLexer_not_asterisk_2800 = 948;
	public static final int ART_L_OcamlLexer_not_asterisk_2804 = 949;
	public static final int ART_L_OcamlLexer_not_asterisk_2808 = 950;
	public static final int ART_L_OcamlLexer_not_asterisk_2812 = 951;
	public static final int ART_L_OcamlLexer_not_asterisk_2816 = 952;
	public static final int ART_L_OcamlLexer_not_asterisk_2820 = 953;
	public static final int ART_L_OcamlLexer_not_asterisk_2824 = 954;
	public static final int ART_L_OcamlLexer_not_asterisk_2828 = 955;
	public static final int ART_L_OcamlLexer_not_asterisk_2832 = 956;
	public static final int ART_L_OcamlLexer_not_asterisk_2836 = 957;
	public static final int ART_L_OcamlLexer_not_asterisk_2840 = 958;
	public static final int ART_L_OcamlLexer_not_asterisk_2844 = 959;
	public static final int ART_L_OcamlLexer_not_asterisk_2848 = 960;
	public static final int ART_L_OcamlLexer_not_asterisk_2852 = 961;
	public static final int ART_L_OcamlLexer_not_asterisk_2856 = 962;
	public static final int ART_L_OcamlLexer_not_asterisk_2860 = 963;
	public static final int ART_L_OcamlLexer_not_asterisk_2864 = 964;
	public static final int ART_L_OcamlLexer_not_asterisk_2868 = 965;
	public static final int ART_L_OcamlLexer_not_asterisk_2872 = 966;
	public static final int ART_L_OcamlLexer_not_asterisk_2876 = 967;
	public static final int ART_L_OcamlLexer_not_asterisk_2880 = 968;
	public static final int ART_L_OcamlLexer_not_asterisk_2884 = 969;
	public static final int ART_L_OcamlLexer_not_asterisk_2888 = 970;
	public static final int ART_L_OcamlLexer_not_asterisk_2892 = 971;
	public static final int ART_L_OcamlLexer_not_asterisk_2896 = 972;
	public static final int ART_L_OcamlLexer_not_asterisk_2900 = 973;
	public static final int ART_L_OcamlLexer_not_asterisk_2904 = 974;
	public static final int ART_L_OcamlLexer_not_asterisk_2908 = 975;
	public static final int ART_L_OcamlLexer_not_asterisk_2912 = 976;
	public static final int ART_L_OcamlLexer_not_asterisk_2916 = 977;
	public static final int ART_L_OcamlLexer_not_asterisk_2920 = 978;
	public static final int ART_L_OcamlLexer_not_asterisk_2924 = 979;
	public static final int ART_L_OcamlLexer_not_asterisk_2928 = 980;
	public static final int ART_L_OcamlLexer_not_asterisk_2932 = 981;
	public static final int ART_L_OcamlLexer_not_asterisk_2936 = 982;
	public static final int ART_L_OcamlLexer_not_asterisk_2940 = 983;
	public static final int ART_L_OcamlLexer_not_asterisk_2944 = 984;
	public static final int ART_L_OcamlLexer_not_asterisk_2948 = 985;
	public static final int ART_L_OcamlLexer_not_asterisk_2952 = 986;
	public static final int ART_L_OcamlLexer_not_asterisk_2956 = 987;
	public static final int ART_L_OcamlLexer_not_asterisk_2960 = 988;
	public static final int ART_L_OcamlLexer_not_asterisk_2964 = 989;
	public static final int ART_L_OcamlLexer_not_asterisk_2968 = 990;
	public static final int ART_L_OcamlLexer_not_asterisk_2972 = 991;
	public static final int ART_L_OcamlLexer_not_asterisk_2976 = 992;
	public static final int ART_L_OcamlLexer_not_asterisk_2980 = 993;
	public static final int ART_L_OcamlLexer_not_asterisk_2984 = 994;
	public static final int ART_L_OcamlLexer_not_asterisk_2988 = 995;
	public static final int ART_L_OcamlLexer_not_lparen = 996;
	public static final int ART_L_OcamlLexer_not_lparen_2993 = 997;
	public static final int ART_L_OcamlLexer_not_lparen_2997 = 998;
	public static final int ART_L_OcamlLexer_not_lparen_3001 = 999;
	public static final int ART_L_OcamlLexer_not_lparen_3005 = 1000;
	public static final int ART_L_OcamlLexer_not_lparen_3009 = 1001;
	public static final int ART_L_OcamlLexer_not_lparen_3013 = 1002;
	public static final int ART_L_OcamlLexer_not_lparen_3017 = 1003;
	public static final int ART_L_OcamlLexer_not_lparen_3021 = 1004;
	public static final int ART_L_OcamlLexer_not_lparen_3025 = 1005;
	public static final int ART_L_OcamlLexer_not_lparen_3029 = 1006;
	public static final int ART_L_OcamlLexer_not_lparen_3033 = 1007;
	public static final int ART_L_OcamlLexer_not_lparen_3037 = 1008;
	public static final int ART_L_OcamlLexer_not_lparen_3041 = 1009;
	public static final int ART_L_OcamlLexer_not_lparen_3045 = 1010;
	public static final int ART_L_OcamlLexer_not_lparen_3049 = 1011;
	public static final int ART_L_OcamlLexer_not_lparen_3053 = 1012;
	public static final int ART_L_OcamlLexer_not_lparen_3057 = 1013;
	public static final int ART_L_OcamlLexer_not_lparen_3061 = 1014;
	public static final int ART_L_OcamlLexer_not_lparen_3065 = 1015;
	public static final int ART_L_OcamlLexer_not_lparen_3069 = 1016;
	public static final int ART_L_OcamlLexer_not_lparen_3073 = 1017;
	public static final int ART_L_OcamlLexer_not_lparen_3077 = 1018;
	public static final int ART_L_OcamlLexer_not_lparen_3081 = 1019;
	public static final int ART_L_OcamlLexer_not_lparen_3085 = 1020;
	public static final int ART_L_OcamlLexer_not_lparen_3089 = 1021;
	public static final int ART_L_OcamlLexer_not_lparen_3093 = 1022;
	public static final int ART_L_OcamlLexer_not_lparen_3097 = 1023;
	public static final int ART_L_OcamlLexer_not_lparen_3101 = 1024;
	public static final int ART_L_OcamlLexer_not_lparen_3105 = 1025;
	public static final int ART_L_OcamlLexer_not_lparen_3109 = 1026;
	public static final int ART_L_OcamlLexer_not_lparen_3113 = 1027;
	public static final int ART_L_OcamlLexer_not_lparen_3117 = 1028;
	public static final int ART_L_OcamlLexer_not_lparen_3121 = 1029;
	public static final int ART_L_OcamlLexer_not_lparen_3125 = 1030;
	public static final int ART_L_OcamlLexer_not_lparen_3129 = 1031;
	public static final int ART_L_OcamlLexer_not_lparen_3133 = 1032;
	public static final int ART_L_OcamlLexer_not_lparen_3137 = 1033;
	public static final int ART_L_OcamlLexer_not_lparen_3141 = 1034;
	public static final int ART_L_OcamlLexer_not_lparen_3145 = 1035;
	public static final int ART_L_OcamlLexer_not_lparen_3149 = 1036;
	public static final int ART_L_OcamlLexer_not_lparen_3153 = 1037;
	public static final int ART_L_OcamlLexer_not_lparen_3157 = 1038;
	public static final int ART_L_OcamlLexer_not_lparen_3161 = 1039;
	public static final int ART_L_OcamlLexer_not_lparen_3165 = 1040;
	public static final int ART_L_OcamlLexer_not_lparen_3169 = 1041;
	public static final int ART_L_OcamlLexer_not_lparen_3173 = 1042;
	public static final int ART_L_OcamlLexer_not_lparen_3177 = 1043;
	public static final int ART_L_OcamlLexer_not_lparen_3181 = 1044;
	public static final int ART_L_OcamlLexer_not_lparen_3185 = 1045;
	public static final int ART_L_OcamlLexer_not_lparen_3189 = 1046;
	public static final int ART_L_OcamlLexer_not_lparen_3193 = 1047;
	public static final int ART_L_OcamlLexer_not_lparen_3197 = 1048;
	public static final int ART_L_OcamlLexer_not_lparen_3201 = 1049;
	public static final int ART_L_OcamlLexer_not_lparen_3205 = 1050;
	public static final int ART_L_OcamlLexer_not_lparen_3209 = 1051;
	public static final int ART_L_OcamlLexer_not_lparen_3213 = 1052;
	public static final int ART_L_OcamlLexer_not_lparen_3217 = 1053;
	public static final int ART_L_OcamlLexer_not_lparen_3221 = 1054;
	public static final int ART_L_OcamlLexer_not_lparen_3225 = 1055;
	public static final int ART_L_OcamlLexer_not_lparen_3229 = 1056;
	public static final int ART_L_OcamlLexer_not_lparen_3233 = 1057;
	public static final int ART_L_OcamlLexer_not_lparen_3237 = 1058;
	public static final int ART_L_OcamlLexer_not_lparen_3241 = 1059;
	public static final int ART_L_OcamlLexer_not_lparen_3245 = 1060;
	public static final int ART_L_OcamlLexer_not_lparen_3249 = 1061;
	public static final int ART_L_OcamlLexer_not_lparen_3253 = 1062;
	public static final int ART_L_OcamlLexer_not_lparen_3257 = 1063;
	public static final int ART_L_OcamlLexer_not_lparen_3261 = 1064;
	public static final int ART_L_OcamlLexer_not_lparen_3265 = 1065;
	public static final int ART_L_OcamlLexer_not_lparen_3269 = 1066;
	public static final int ART_L_OcamlLexer_not_lparen_3273 = 1067;
	public static final int ART_L_OcamlLexer_not_lparen_3277 = 1068;
	public static final int ART_L_OcamlLexer_not_lparen_3281 = 1069;
	public static final int ART_L_OcamlLexer_not_lparen_3285 = 1070;
	public static final int ART_L_OcamlLexer_not_lparen_3289 = 1071;
	public static final int ART_L_OcamlLexer_not_lparen_3293 = 1072;
	public static final int ART_L_OcamlLexer_not_lparen_3297 = 1073;
	public static final int ART_L_OcamlLexer_not_lparen_3301 = 1074;
	public static final int ART_L_OcamlLexer_not_lparen_3305 = 1075;
	public static final int ART_L_OcamlLexer_not_lparen_3309 = 1076;
	public static final int ART_L_OcamlLexer_not_lparen_3313 = 1077;
	public static final int ART_L_OcamlLexer_not_lparen_3317 = 1078;
	public static final int ART_L_OcamlLexer_not_lparen_3321 = 1079;
	public static final int ART_L_OcamlLexer_not_lparen_3325 = 1080;
	public static final int ART_L_OcamlLexer_not_lparen_3329 = 1081;
	public static final int ART_L_OcamlLexer_not_lparen_3333 = 1082;
	public static final int ART_L_OcamlLexer_not_lparen_3337 = 1083;
	public static final int ART_L_OcamlLexer_not_lparen_3341 = 1084;
	public static final int ART_L_OcamlLexer_not_lparen_3345 = 1085;
	public static final int ART_L_OcamlLexer_not_lparen_3349 = 1086;
	public static final int ART_L_OcamlLexer_not_lparen_3353 = 1087;
	public static final int ART_L_OcamlLexer_not_lparen_3357 = 1088;
	public static final int ART_L_OcamlLexer_not_lparen_3361 = 1089;
	public static final int ART_L_OcamlLexer_not_lparen_3365 = 1090;
	public static final int ART_L_OcamlLexer_not_lparen_3369 = 1091;
	public static final int ART_L_OcamlLexer_not_lparen_3373 = 1092;
	public static final int ART_L_OcamlLexer_not_lparen_3377 = 1093;
	public static final int ART_L_OcamlLexer_not_lparen_3381 = 1094;
	public static final int ART_L_OcamlLexer_not_lparen_3385 = 1095;
	public static final int ART_L_OcamlLexer_not_lparen_3389 = 1096;
	public static final int ART_L_OcamlLexer_not_lparen_3393 = 1097;
	public static final int ART_L_OcamlLexer_not_lparen_3397 = 1098;
	public static final int ART_L_OcamlLexer_not_rparen = 1099;
	public static final int ART_L_OcamlLexer_not_rparen_3402 = 1100;
	public static final int ART_L_OcamlLexer_not_rparen_3406 = 1101;
	public static final int ART_L_OcamlLexer_not_rparen_3410 = 1102;
	public static final int ART_L_OcamlLexer_not_rparen_3414 = 1103;
	public static final int ART_L_OcamlLexer_not_rparen_3418 = 1104;
	public static final int ART_L_OcamlLexer_not_rparen_3422 = 1105;
	public static final int ART_L_OcamlLexer_not_rparen_3426 = 1106;
	public static final int ART_L_OcamlLexer_not_rparen_3430 = 1107;
	public static final int ART_L_OcamlLexer_not_rparen_3434 = 1108;
	public static final int ART_L_OcamlLexer_not_rparen_3438 = 1109;
	public static final int ART_L_OcamlLexer_not_rparen_3442 = 1110;
	public static final int ART_L_OcamlLexer_not_rparen_3446 = 1111;
	public static final int ART_L_OcamlLexer_not_rparen_3450 = 1112;
	public static final int ART_L_OcamlLexer_not_rparen_3454 = 1113;
	public static final int ART_L_OcamlLexer_not_rparen_3458 = 1114;
	public static final int ART_L_OcamlLexer_not_rparen_3462 = 1115;
	public static final int ART_L_OcamlLexer_not_rparen_3466 = 1116;
	public static final int ART_L_OcamlLexer_not_rparen_3470 = 1117;
	public static final int ART_L_OcamlLexer_not_rparen_3474 = 1118;
	public static final int ART_L_OcamlLexer_not_rparen_3478 = 1119;
	public static final int ART_L_OcamlLexer_not_rparen_3482 = 1120;
	public static final int ART_L_OcamlLexer_not_rparen_3486 = 1121;
	public static final int ART_L_OcamlLexer_not_rparen_3490 = 1122;
	public static final int ART_L_OcamlLexer_not_rparen_3494 = 1123;
	public static final int ART_L_OcamlLexer_not_rparen_3498 = 1124;
	public static final int ART_L_OcamlLexer_not_rparen_3502 = 1125;
	public static final int ART_L_OcamlLexer_not_rparen_3506 = 1126;
	public static final int ART_L_OcamlLexer_not_rparen_3510 = 1127;
	public static final int ART_L_OcamlLexer_not_rparen_3514 = 1128;
	public static final int ART_L_OcamlLexer_not_rparen_3518 = 1129;
	public static final int ART_L_OcamlLexer_not_rparen_3522 = 1130;
	public static final int ART_L_OcamlLexer_not_rparen_3526 = 1131;
	public static final int ART_L_OcamlLexer_not_rparen_3530 = 1132;
	public static final int ART_L_OcamlLexer_not_rparen_3534 = 1133;
	public static final int ART_L_OcamlLexer_not_rparen_3538 = 1134;
	public static final int ART_L_OcamlLexer_not_rparen_3542 = 1135;
	public static final int ART_L_OcamlLexer_not_rparen_3546 = 1136;
	public static final int ART_L_OcamlLexer_not_rparen_3550 = 1137;
	public static final int ART_L_OcamlLexer_not_rparen_3554 = 1138;
	public static final int ART_L_OcamlLexer_not_rparen_3558 = 1139;
	public static final int ART_L_OcamlLexer_not_rparen_3562 = 1140;
	public static final int ART_L_OcamlLexer_not_rparen_3566 = 1141;
	public static final int ART_L_OcamlLexer_not_rparen_3570 = 1142;
	public static final int ART_L_OcamlLexer_not_rparen_3574 = 1143;
	public static final int ART_L_OcamlLexer_not_rparen_3578 = 1144;
	public static final int ART_L_OcamlLexer_not_rparen_3582 = 1145;
	public static final int ART_L_OcamlLexer_not_rparen_3586 = 1146;
	public static final int ART_L_OcamlLexer_not_rparen_3590 = 1147;
	public static final int ART_L_OcamlLexer_not_rparen_3594 = 1148;
	public static final int ART_L_OcamlLexer_not_rparen_3598 = 1149;
	public static final int ART_L_OcamlLexer_not_rparen_3602 = 1150;
	public static final int ART_L_OcamlLexer_not_rparen_3606 = 1151;
	public static final int ART_L_OcamlLexer_not_rparen_3610 = 1152;
	public static final int ART_L_OcamlLexer_not_rparen_3614 = 1153;
	public static final int ART_L_OcamlLexer_not_rparen_3618 = 1154;
	public static final int ART_L_OcamlLexer_not_rparen_3622 = 1155;
	public static final int ART_L_OcamlLexer_not_rparen_3626 = 1156;
	public static final int ART_L_OcamlLexer_not_rparen_3630 = 1157;
	public static final int ART_L_OcamlLexer_not_rparen_3634 = 1158;
	public static final int ART_L_OcamlLexer_not_rparen_3638 = 1159;
	public static final int ART_L_OcamlLexer_not_rparen_3642 = 1160;
	public static final int ART_L_OcamlLexer_not_rparen_3646 = 1161;
	public static final int ART_L_OcamlLexer_not_rparen_3650 = 1162;
	public static final int ART_L_OcamlLexer_not_rparen_3654 = 1163;
	public static final int ART_L_OcamlLexer_not_rparen_3658 = 1164;
	public static final int ART_L_OcamlLexer_not_rparen_3662 = 1165;
	public static final int ART_L_OcamlLexer_not_rparen_3666 = 1166;
	public static final int ART_L_OcamlLexer_not_rparen_3670 = 1167;
	public static final int ART_L_OcamlLexer_not_rparen_3674 = 1168;
	public static final int ART_L_OcamlLexer_not_rparen_3678 = 1169;
	public static final int ART_L_OcamlLexer_not_rparen_3682 = 1170;
	public static final int ART_L_OcamlLexer_not_rparen_3686 = 1171;
	public static final int ART_L_OcamlLexer_not_rparen_3690 = 1172;
	public static final int ART_L_OcamlLexer_not_rparen_3694 = 1173;
	public static final int ART_L_OcamlLexer_not_rparen_3698 = 1174;
	public static final int ART_L_OcamlLexer_not_rparen_3702 = 1175;
	public static final int ART_L_OcamlLexer_not_rparen_3706 = 1176;
	public static final int ART_L_OcamlLexer_not_rparen_3710 = 1177;
	public static final int ART_L_OcamlLexer_not_rparen_3714 = 1178;
	public static final int ART_L_OcamlLexer_not_rparen_3718 = 1179;
	public static final int ART_L_OcamlLexer_not_rparen_3722 = 1180;
	public static final int ART_L_OcamlLexer_not_rparen_3726 = 1181;
	public static final int ART_L_OcamlLexer_not_rparen_3730 = 1182;
	public static final int ART_L_OcamlLexer_not_rparen_3734 = 1183;
	public static final int ART_L_OcamlLexer_not_rparen_3738 = 1184;
	public static final int ART_L_OcamlLexer_not_rparen_3742 = 1185;
	public static final int ART_L_OcamlLexer_not_rparen_3746 = 1186;
	public static final int ART_L_OcamlLexer_not_rparen_3750 = 1187;
	public static final int ART_L_OcamlLexer_not_rparen_3754 = 1188;
	public static final int ART_L_OcamlLexer_not_rparen_3758 = 1189;
	public static final int ART_L_OcamlLexer_not_rparen_3762 = 1190;
	public static final int ART_L_OcamlLexer_not_rparen_3766 = 1191;
	public static final int ART_L_OcamlLexer_not_rparen_3770 = 1192;
	public static final int ART_L_OcamlLexer_not_rparen_3774 = 1193;
	public static final int ART_L_OcamlLexer_not_rparen_3778 = 1194;
	public static final int ART_L_OcamlLexer_not_rparen_3782 = 1195;
	public static final int ART_L_OcamlLexer_not_rparen_3786 = 1196;
	public static final int ART_L_OcamlLexer_not_rparen_3790 = 1197;
	public static final int ART_L_OcamlLexer_not_rparen_3794 = 1198;
	public static final int ART_L_OcamlLexer_not_rparen_3798 = 1199;
	public static final int ART_L_OcamlLexer_not_rparen_3802 = 1200;
	public static final int ART_L_OcamlLexer_not_rparen_3806 = 1201;
	public static final int ART_L_OcamlLexer_integer_literal = 1202;
	public static final int ART_L_OcamlLexer_integer_literal_3811 = 1203;
	public static final int ART_L_OcamlLexer_integer_literal_3817 = 1204;
	public static final int ART_L_OcamlLexer_integer_literal_3819 = 1205;
	public static final int ART_L_OcamlLexer_integer_literal_3823 = 1206;
	public static final int ART_L_OcamlLexer_integer_literal_3825 = 1207;
	public static final int ART_L_OcamlLexer_integer_literal_3827 = 1208;
	public static final int ART_L_OcamlLexer_integer_literal_3830 = 1209;
	public static final int ART_L_OcamlLexer_integer_literal_3832 = 1210;
	public static final int ART_L_OcamlLexer_integer_literal_3838 = 1211;
	public static final int ART_L_OcamlLexer_integer_literal_3842 = 1212;
	public static final int ART_L_OcamlLexer_integer_literal_3848 = 1213;
	public static final int ART_L_OcamlLexer_integer_literal_3855 = 1214;
	public static final int ART_L_OcamlLexer_integer_literal_3859 = 1215;
	public static final int ART_L_OcamlLexer_integer_literal_3861 = 1216;
	public static final int ART_L_OcamlLexer_integer_literal_3863 = 1217;
	public static final int ART_L_OcamlLexer_integer_literal_3866 = 1218;
	public static final int ART_L_OcamlLexer_integer_literal_3868 = 1219;
	public static final int ART_L_OcamlLexer_integer_literal_3874 = 1220;
	public static final int ART_L_OcamlLexer_integer_literal_3878 = 1221;
	public static final int ART_L_OcamlLexer_integer_literal_3884 = 1222;
	public static final int ART_L_OcamlLexer_integer_literal_3891 = 1223;
	public static final int ART_L_OcamlLexer_integer_literal_3895 = 1224;
	public static final int ART_L_OcamlLexer_integer_literal_3897 = 1225;
	public static final int ART_L_OcamlLexer_integer_literal_3899 = 1226;
	public static final int ART_L_OcamlLexer_integer_literal_3902 = 1227;
	public static final int ART_L_OcamlLexer_integer_literal_3904 = 1228;
	public static final int ART_L_OcamlLexer_integer_literal_3910 = 1229;
	public static final int ART_L_OcamlLexer_integer_literal_3914 = 1230;
	public static final int ART_L_OcamlLexer_integer_literal_3920 = 1231;
	public static final int ART_L_OcamlLexer_integer_literal_3929 = 1232;
	public static final int ART_L_OcamlLexer_integer_literal_3933 = 1233;
	public static final int ART_L_OcamlLexer_integer_literal_3940 = 1234;
	public static final int ART_L_OcamlLexer_integer_literal_3944 = 1235;
	public static final int ART_L_OcamlLexer_integer_literal_3948 = 1236;
	public static final int ART_L_OcamlLexer_integer_literal_3951 = 1237;
	public static final int ART_L_OcamlLexer_dec_digit = 1238;
	public static final int ART_L_OcamlLexer_dec_digit_3954 = 1239;
	public static final int ART_L_OcamlLexer_dec_digit_3958 = 1240;
	public static final int ART_L_OcamlLexer_dec_digit_3962 = 1241;
	public static final int ART_L_OcamlLexer_dec_digit_3966 = 1242;
	public static final int ART_L_OcamlLexer_dec_digit_3970 = 1243;
	public static final int ART_L_OcamlLexer_dec_digit_3974 = 1244;
	public static final int ART_L_OcamlLexer_dec_digit_3978 = 1245;
	public static final int ART_L_OcamlLexer_dec_digit_3982 = 1246;
	public static final int ART_L_OcamlLexer_dec_digit_3986 = 1247;
	public static final int ART_L_OcamlLexer_dec_digit_3990 = 1248;
	public static final int ART_L_OcamlLexer_oct_digit = 1249;
	public static final int ART_L_OcamlLexer_oct_digit_3995 = 1250;
	public static final int ART_L_OcamlLexer_oct_digit_3999 = 1251;
	public static final int ART_L_OcamlLexer_oct_digit_4003 = 1252;
	public static final int ART_L_OcamlLexer_oct_digit_4007 = 1253;
	public static final int ART_L_OcamlLexer_oct_digit_4011 = 1254;
	public static final int ART_L_OcamlLexer_oct_digit_4015 = 1255;
	public static final int ART_L_OcamlLexer_oct_digit_4019 = 1256;
	public static final int ART_L_OcamlLexer_oct_digit_4023 = 1257;
	public static final int ART_L_OcamlLexer_hex_digit = 1258;
	public static final int ART_L_OcamlLexer_hex_digit_4028 = 1259;
	public static final int ART_L_OcamlLexer_hex_digit_4032 = 1260;
	public static final int ART_L_OcamlLexer_hex_digit_4036 = 1261;
	public static final int ART_L_OcamlLexer_hex_digit_4040 = 1262;
	public static final int ART_L_OcamlLexer_hex_digit_4044 = 1263;
	public static final int ART_L_OcamlLexer_hex_digit_4048 = 1264;
	public static final int ART_L_OcamlLexer_hex_digit_4052 = 1265;
	public static final int ART_L_OcamlLexer_hex_digit_4056 = 1266;
	public static final int ART_L_OcamlLexer_hex_digit_4060 = 1267;
	public static final int ART_L_OcamlLexer_hex_digit_4064 = 1268;
	public static final int ART_L_OcamlLexer_hex_digit_4068 = 1269;
	public static final int ART_L_OcamlLexer_hex_digit_4072 = 1270;
	public static final int ART_L_OcamlLexer_hex_digit_4076 = 1271;
	public static final int ART_L_OcamlLexer_hex_digit_4080 = 1272;
	public static final int ART_L_OcamlLexer_hex_digit_4084 = 1273;
	public static final int ART_L_OcamlLexer_hex_digit_4088 = 1274;
	public static final int ART_L_OcamlLexer_hex_digit_4092 = 1275;
	public static final int ART_L_OcamlLexer_hex_digit_4096 = 1276;
	public static final int ART_L_OcamlLexer_hex_digit_4100 = 1277;
	public static final int ART_L_OcamlLexer_hex_digit_4104 = 1278;
	public static final int ART_L_OcamlLexer_hex_digit_4108 = 1279;
	public static final int ART_L_OcamlLexer_hex_digit_4112 = 1280;
	public static final int ART_L_OcamlLexer_float_literal = 1281;
	public static final int ART_L_OcamlLexer_float_literal_4117 = 1282;
	public static final int ART_L_OcamlLexer_float_literal_4123 = 1283;
	public static final int ART_L_OcamlLexer_float_literal_4125 = 1284;
	public static final int ART_L_OcamlLexer_float_literal_4129 = 1285;
	public static final int ART_L_OcamlLexer_float_literal_4131 = 1286;
	public static final int ART_L_OcamlLexer_float_literal_4133 = 1287;
	public static final int ART_L_OcamlLexer_float_literal_4136 = 1288;
	public static final int ART_L_OcamlLexer_float_literal_4145 = 1289;
	public static final int ART_L_OcamlLexer_float_literal_4147 = 1290;
	public static final int ART_L_OcamlLexer_float_literal_4149 = 1291;
	public static final int ART_L_OcamlLexer_float_literal_4152 = 1292;
	public static final int ART_L_OcamlLexer_float_literal_4153 = 1293;
	public static final int ART_L_OcamlLexer_float_literal_4160 = 1294;
	public static final int ART_L_OcamlLexer_float_literal_4164 = 1295;
	public static final int ART_L_OcamlLexer_float_literal_4171 = 1296;
	public static final int ART_L_OcamlLexer_float_literal_4175 = 1297;
	public static final int ART_L_OcamlLexer_float_literal_4178 = 1298;
	public static final int ART_L_OcamlLexer_float_literal_4180 = 1299;
	public static final int ART_L_OcamlLexer_float_literal_4184 = 1300;
	public static final int ART_L_OcamlLexer_float_literal_4186 = 1301;
	public static final int ART_L_OcamlLexer_float_literal_4188 = 1302;
	public static final int ART_L_OcamlLexer_float_literal_4191 = 1303;
	public static final int ART_L_OcamlLexer_float_literal_4192 = 1304;
	public static final int ART_L_OcamlLexer_char_literal = 1305;
	public static final int ART_L_OcamlLexer_char_literal_4195 = 1306;
	public static final int ART_L_OcamlLexer_char_literal_4199 = 1307;
	public static final int ART_L_OcamlLexer_char_literal_4203 = 1308;
	public static final int ART_L_OcamlLexer_char_literal_4207 = 1309;
	public static final int ART_L_OcamlLexer_regular_char = 1310;
	public static final int ART_L_OcamlLexer_regular_char_4212 = 1311;
	public static final int ART_L_OcamlLexer_regular_char_4216 = 1312;
	public static final int ART_L_OcamlLexer_regular_char_4220 = 1313;
	public static final int ART_L_OcamlLexer_regular_char_4224 = 1314;
	public static final int ART_L_OcamlLexer_regular_char_4228 = 1315;
	public static final int ART_L_OcamlLexer_regular_char_4232 = 1316;
	public static final int ART_L_OcamlLexer_regular_char_4236 = 1317;
	public static final int ART_L_OcamlLexer_regular_char_4240 = 1318;
	public static final int ART_L_OcamlLexer_regular_char_4244 = 1319;
	public static final int ART_L_OcamlLexer_regular_char_4248 = 1320;
	public static final int ART_L_OcamlLexer_regular_char_4252 = 1321;
	public static final int ART_L_OcamlLexer_regular_char_4256 = 1322;
	public static final int ART_L_OcamlLexer_regular_char_4260 = 1323;
	public static final int ART_L_OcamlLexer_regular_char_4264 = 1324;
	public static final int ART_L_OcamlLexer_regular_char_4268 = 1325;
	public static final int ART_L_OcamlLexer_regular_char_4272 = 1326;
	public static final int ART_L_OcamlLexer_regular_char_4276 = 1327;
	public static final int ART_L_OcamlLexer_regular_char_4280 = 1328;
	public static final int ART_L_OcamlLexer_regular_char_4284 = 1329;
	public static final int ART_L_OcamlLexer_regular_char_4288 = 1330;
	public static final int ART_L_OcamlLexer_regular_char_4292 = 1331;
	public static final int ART_L_OcamlLexer_regular_char_4296 = 1332;
	public static final int ART_L_OcamlLexer_regular_char_4300 = 1333;
	public static final int ART_L_OcamlLexer_regular_char_4304 = 1334;
	public static final int ART_L_OcamlLexer_regular_char_4308 = 1335;
	public static final int ART_L_OcamlLexer_regular_char_4312 = 1336;
	public static final int ART_L_OcamlLexer_regular_char_4316 = 1337;
	public static final int ART_L_OcamlLexer_regular_char_4320 = 1338;
	public static final int ART_L_OcamlLexer_regular_char_4324 = 1339;
	public static final int ART_L_OcamlLexer_regular_char_4328 = 1340;
	public static final int ART_L_OcamlLexer_regular_char_4332 = 1341;
	public static final int ART_L_OcamlLexer_regular_char_4336 = 1342;
	public static final int ART_L_OcamlLexer_regular_char_4340 = 1343;
	public static final int ART_L_OcamlLexer_regular_char_4344 = 1344;
	public static final int ART_L_OcamlLexer_regular_char_4348 = 1345;
	public static final int ART_L_OcamlLexer_regular_char_4352 = 1346;
	public static final int ART_L_OcamlLexer_regular_char_4356 = 1347;
	public static final int ART_L_OcamlLexer_regular_char_4360 = 1348;
	public static final int ART_L_OcamlLexer_regular_char_4364 = 1349;
	public static final int ART_L_OcamlLexer_regular_char_4368 = 1350;
	public static final int ART_L_OcamlLexer_regular_char_4372 = 1351;
	public static final int ART_L_OcamlLexer_regular_char_4376 = 1352;
	public static final int ART_L_OcamlLexer_regular_char_4380 = 1353;
	public static final int ART_L_OcamlLexer_regular_char_4384 = 1354;
	public static final int ART_L_OcamlLexer_regular_char_4388 = 1355;
	public static final int ART_L_OcamlLexer_regular_char_4392 = 1356;
	public static final int ART_L_OcamlLexer_regular_char_4396 = 1357;
	public static final int ART_L_OcamlLexer_regular_char_4400 = 1358;
	public static final int ART_L_OcamlLexer_regular_char_4404 = 1359;
	public static final int ART_L_OcamlLexer_regular_char_4408 = 1360;
	public static final int ART_L_OcamlLexer_regular_char_4412 = 1361;
	public static final int ART_L_OcamlLexer_regular_char_4416 = 1362;
	public static final int ART_L_OcamlLexer_regular_char_4420 = 1363;
	public static final int ART_L_OcamlLexer_regular_char_4424 = 1364;
	public static final int ART_L_OcamlLexer_regular_char_4428 = 1365;
	public static final int ART_L_OcamlLexer_regular_char_4432 = 1366;
	public static final int ART_L_OcamlLexer_regular_char_4436 = 1367;
	public static final int ART_L_OcamlLexer_regular_char_4440 = 1368;
	public static final int ART_L_OcamlLexer_regular_char_4444 = 1369;
	public static final int ART_L_OcamlLexer_regular_char_4448 = 1370;
	public static final int ART_L_OcamlLexer_regular_char_4452 = 1371;
	public static final int ART_L_OcamlLexer_regular_char_4456 = 1372;
	public static final int ART_L_OcamlLexer_regular_char_4460 = 1373;
	public static final int ART_L_OcamlLexer_regular_char_4464 = 1374;
	public static final int ART_L_OcamlLexer_regular_char_4468 = 1375;
	public static final int ART_L_OcamlLexer_regular_char_4472 = 1376;
	public static final int ART_L_OcamlLexer_regular_char_4476 = 1377;
	public static final int ART_L_OcamlLexer_regular_char_4480 = 1378;
	public static final int ART_L_OcamlLexer_regular_char_4484 = 1379;
	public static final int ART_L_OcamlLexer_regular_char_4488 = 1380;
	public static final int ART_L_OcamlLexer_regular_char_4492 = 1381;
	public static final int ART_L_OcamlLexer_regular_char_4496 = 1382;
	public static final int ART_L_OcamlLexer_regular_char_4500 = 1383;
	public static final int ART_L_OcamlLexer_regular_char_4504 = 1384;
	public static final int ART_L_OcamlLexer_regular_char_4508 = 1385;
	public static final int ART_L_OcamlLexer_regular_char_4512 = 1386;
	public static final int ART_L_OcamlLexer_regular_char_4516 = 1387;
	public static final int ART_L_OcamlLexer_regular_char_4520 = 1388;
	public static final int ART_L_OcamlLexer_regular_char_4524 = 1389;
	public static final int ART_L_OcamlLexer_regular_char_4528 = 1390;
	public static final int ART_L_OcamlLexer_regular_char_4532 = 1391;
	public static final int ART_L_OcamlLexer_regular_char_4536 = 1392;
	public static final int ART_L_OcamlLexer_regular_char_4540 = 1393;
	public static final int ART_L_OcamlLexer_regular_char_4544 = 1394;
	public static final int ART_L_OcamlLexer_regular_char_4548 = 1395;
	public static final int ART_L_OcamlLexer_regular_char_4552 = 1396;
	public static final int ART_L_OcamlLexer_regular_char_4556 = 1397;
	public static final int ART_L_OcamlLexer_regular_char_4560 = 1398;
	public static final int ART_L_OcamlLexer_regular_char_4564 = 1399;
	public static final int ART_L_OcamlLexer_regular_char_4568 = 1400;
	public static final int ART_L_OcamlLexer_regular_char_4572 = 1401;
	public static final int ART_L_OcamlLexer_regular_char_4576 = 1402;
	public static final int ART_L_OcamlLexer_regular_char_4580 = 1403;
	public static final int ART_L_OcamlLexer_regular_char_4584 = 1404;
	public static final int ART_L_OcamlLexer_regular_char_4588 = 1405;
	public static final int ART_L_OcamlLexer_regular_char_4592 = 1406;
	public static final int ART_L_OcamlLexer_regular_char_4596 = 1407;
	public static final int ART_L_OcamlLexer_regular_char_4600 = 1408;
	public static final int ART_L_OcamlLexer_regular_char_4604 = 1409;
	public static final int ART_L_OcamlLexer_escape_sequence = 1410;
	public static final int ART_L_OcamlLexer_escape_sequence_4609 = 1411;
	public static final int ART_L_OcamlLexer_escape_sequence_4615 = 1412;
	public static final int ART_L_OcamlLexer_escape_sequence_4619 = 1413;
	public static final int ART_L_OcamlLexer_escape_sequence_4623 = 1414;
	public static final int ART_L_OcamlLexer_escape_sequence_4627 = 1415;
	public static final int ART_L_OcamlLexer_escape_sequence_4631 = 1416;
	public static final int ART_L_OcamlLexer_escape_sequence_4635 = 1417;
	public static final int ART_L_OcamlLexer_escape_sequence_4639 = 1418;
	public static final int ART_L_OcamlLexer_escape_sequence_4643 = 1419;
	public static final int ART_L_OcamlLexer_escape_sequence_4648 = 1420;
	public static final int ART_L_OcamlLexer_escape_sequence_4652 = 1421;
	public static final int ART_L_OcamlLexer_escape_sequence_4654 = 1422;
	public static final int ART_L_OcamlLexer_escape_sequence_4656 = 1423;
	public static final int ART_L_OcamlLexer_escape_sequence_4658 = 1424;
	public static final int ART_L_OcamlLexer_escape_sequence_4664 = 1425;
	public static final int ART_L_OcamlLexer_escape_sequence_4666 = 1426;
	public static final int ART_L_OcamlLexer_string_literal = 1427;
	public static final int ART_L_OcamlLexer_string_literal_4669 = 1428;
	public static final int ART_L_OcamlLexer_string_literal_4676 = 1429;
	public static final int ART_L_OcamlLexer_string_literal_4677 = 1430;
	public static final int ART_L_OcamlLexer_string_character = 1431;
	public static final int ART_L_OcamlLexer_string_character_4682 = 1432;
	public static final int ART_L_OcamlLexer_string_character_4684 = 1433;
	public static final int ART_L_OcamlLexer_string_character_4686 = 1434;
	public static final int ART_L_OcamlLexer_string_character_4688 = 1435;
	public static final int ART_L_OcamlLexer_string_character_4690 = 1436;
	public static final int ART_L_OcamlLexer_string_character_4698 = 1437;
	public static final int ART_L_OcamlLexer_string_character_4702 = 1438;
	public static final int ART_L_OcamlLexer_string_character_4705 = 1439;
	public static final int ART_L_OcamlLexer_regular_string_char = 1440;
	public static final int ART_L_OcamlLexer_regular_string_char_4708 = 1441;
	public static final int ART_L_OcamlLexer_regular_string_char_4712 = 1442;
	public static final int ART_L_OcamlLexer_regular_string_char_4716 = 1443;
	public static final int ART_L_OcamlLexer_regular_string_char_4720 = 1444;
	public static final int ART_L_OcamlLexer_regular_string_char_4724 = 1445;
	public static final int ART_L_OcamlLexer_regular_string_char_4728 = 1446;
	public static final int ART_L_OcamlLexer_regular_string_char_4732 = 1447;
	public static final int ART_L_OcamlLexer_regular_string_char_4736 = 1448;
	public static final int ART_L_OcamlLexer_regular_string_char_4740 = 1449;
	public static final int ART_L_OcamlLexer_regular_string_char_4744 = 1450;
	public static final int ART_L_OcamlLexer_regular_string_char_4748 = 1451;
	public static final int ART_L_OcamlLexer_regular_string_char_4752 = 1452;
	public static final int ART_L_OcamlLexer_regular_string_char_4756 = 1453;
	public static final int ART_L_OcamlLexer_regular_string_char_4760 = 1454;
	public static final int ART_L_OcamlLexer_regular_string_char_4764 = 1455;
	public static final int ART_L_OcamlLexer_regular_string_char_4768 = 1456;
	public static final int ART_L_OcamlLexer_regular_string_char_4772 = 1457;
	public static final int ART_L_OcamlLexer_regular_string_char_4776 = 1458;
	public static final int ART_L_OcamlLexer_regular_string_char_4780 = 1459;
	public static final int ART_L_OcamlLexer_regular_string_char_4784 = 1460;
	public static final int ART_L_OcamlLexer_regular_string_char_4788 = 1461;
	public static final int ART_L_OcamlLexer_regular_string_char_4792 = 1462;
	public static final int ART_L_OcamlLexer_regular_string_char_4796 = 1463;
	public static final int ART_L_OcamlLexer_regular_string_char_4800 = 1464;
	public static final int ART_L_OcamlLexer_regular_string_char_4804 = 1465;
	public static final int ART_L_OcamlLexer_regular_string_char_4808 = 1466;
	public static final int ART_L_OcamlLexer_regular_string_char_4812 = 1467;
	public static final int ART_L_OcamlLexer_regular_string_char_4816 = 1468;
	public static final int ART_L_OcamlLexer_regular_string_char_4820 = 1469;
	public static final int ART_L_OcamlLexer_regular_string_char_4824 = 1470;
	public static final int ART_L_OcamlLexer_regular_string_char_4828 = 1471;
	public static final int ART_L_OcamlLexer_regular_string_char_4832 = 1472;
	public static final int ART_L_OcamlLexer_regular_string_char_4836 = 1473;
	public static final int ART_L_OcamlLexer_regular_string_char_4840 = 1474;
	public static final int ART_L_OcamlLexer_regular_string_char_4844 = 1475;
	public static final int ART_L_OcamlLexer_regular_string_char_4848 = 1476;
	public static final int ART_L_OcamlLexer_regular_string_char_4852 = 1477;
	public static final int ART_L_OcamlLexer_regular_string_char_4856 = 1478;
	public static final int ART_L_OcamlLexer_regular_string_char_4860 = 1479;
	public static final int ART_L_OcamlLexer_regular_string_char_4864 = 1480;
	public static final int ART_L_OcamlLexer_regular_string_char_4868 = 1481;
	public static final int ART_L_OcamlLexer_regular_string_char_4872 = 1482;
	public static final int ART_L_OcamlLexer_regular_string_char_4876 = 1483;
	public static final int ART_L_OcamlLexer_regular_string_char_4880 = 1484;
	public static final int ART_L_OcamlLexer_regular_string_char_4884 = 1485;
	public static final int ART_L_OcamlLexer_regular_string_char_4888 = 1486;
	public static final int ART_L_OcamlLexer_regular_string_char_4892 = 1487;
	public static final int ART_L_OcamlLexer_regular_string_char_4896 = 1488;
	public static final int ART_L_OcamlLexer_regular_string_char_4900 = 1489;
	public static final int ART_L_OcamlLexer_regular_string_char_4904 = 1490;
	public static final int ART_L_OcamlLexer_regular_string_char_4908 = 1491;
	public static final int ART_L_OcamlLexer_regular_string_char_4912 = 1492;
	public static final int ART_L_OcamlLexer_regular_string_char_4916 = 1493;
	public static final int ART_L_OcamlLexer_regular_string_char_4920 = 1494;
	public static final int ART_L_OcamlLexer_regular_string_char_4924 = 1495;
	public static final int ART_L_OcamlLexer_regular_string_char_4928 = 1496;
	public static final int ART_L_OcamlLexer_regular_string_char_4932 = 1497;
	public static final int ART_L_OcamlLexer_regular_string_char_4936 = 1498;
	public static final int ART_L_OcamlLexer_regular_string_char_4940 = 1499;
	public static final int ART_L_OcamlLexer_regular_string_char_4944 = 1500;
	public static final int ART_L_OcamlLexer_regular_string_char_4948 = 1501;
	public static final int ART_L_OcamlLexer_regular_string_char_4952 = 1502;
	public static final int ART_L_OcamlLexer_regular_string_char_4956 = 1503;
	public static final int ART_L_OcamlLexer_regular_string_char_4960 = 1504;
	public static final int ART_L_OcamlLexer_regular_string_char_4964 = 1505;
	public static final int ART_L_OcamlLexer_regular_string_char_4968 = 1506;
	public static final int ART_L_OcamlLexer_regular_string_char_4972 = 1507;
	public static final int ART_L_OcamlLexer_regular_string_char_4976 = 1508;
	public static final int ART_L_OcamlLexer_regular_string_char_4980 = 1509;
	public static final int ART_L_OcamlLexer_regular_string_char_4984 = 1510;
	public static final int ART_L_OcamlLexer_regular_string_char_4988 = 1511;
	public static final int ART_L_OcamlLexer_regular_string_char_4992 = 1512;
	public static final int ART_L_OcamlLexer_regular_string_char_4996 = 1513;
	public static final int ART_L_OcamlLexer_regular_string_char_5000 = 1514;
	public static final int ART_L_OcamlLexer_regular_string_char_5004 = 1515;
	public static final int ART_L_OcamlLexer_regular_string_char_5008 = 1516;
	public static final int ART_L_OcamlLexer_regular_string_char_5012 = 1517;
	public static final int ART_L_OcamlLexer_regular_string_char_5016 = 1518;
	public static final int ART_L_OcamlLexer_regular_string_char_5020 = 1519;
	public static final int ART_L_OcamlLexer_regular_string_char_5024 = 1520;
	public static final int ART_L_OcamlLexer_regular_string_char_5028 = 1521;
	public static final int ART_L_OcamlLexer_regular_string_char_5032 = 1522;
	public static final int ART_L_OcamlLexer_regular_string_char_5036 = 1523;
	public static final int ART_L_OcamlLexer_regular_string_char_5040 = 1524;
	public static final int ART_L_OcamlLexer_regular_string_char_5044 = 1525;
	public static final int ART_L_OcamlLexer_regular_string_char_5048 = 1526;
	public static final int ART_L_OcamlLexer_regular_string_char_5052 = 1527;
	public static final int ART_L_OcamlLexer_regular_string_char_5056 = 1528;
	public static final int ART_L_OcamlLexer_regular_string_char_5060 = 1529;
	public static final int ART_L_OcamlLexer_regular_string_char_5064 = 1530;
	public static final int ART_L_OcamlLexer_regular_string_char_5068 = 1531;
	public static final int ART_L_OcamlLexer_regular_string_char_5072 = 1532;
	public static final int ART_L_OcamlLexer_regular_string_char_5076 = 1533;
	public static final int ART_L_OcamlLexer_regular_string_char_5080 = 1534;
	public static final int ART_L_OcamlLexer_regular_string_char_5084 = 1535;
	public static final int ART_L_OcamlLexer_regular_string_char_5088 = 1536;
	public static final int ART_L_OcamlLexer_regular_string_char_5092 = 1537;
	public static final int ART_L_OcamlLexer_regular_string_char_5096 = 1538;
	public static final int ART_L_OcamlLexer_regular_string_char_5100 = 1539;
	public static final int ART_L_OcamlLexer_label_name = 1540;
	public static final int ART_L_OcamlLexer_label_name_5105 = 1541;
	public static final int ART_L_OcamlLexer_label_name_5107 = 1542;
	public static final int ART_L_OcamlLexer_label = 1543;
	public static final int ART_L_OcamlLexer_label_5110 = 1544;
	public static final int ART_L_OcamlLexer_label_5114 = 1545;
	public static final int ART_L_OcamlLexer_optlabel = 1546;
	public static final int ART_L_OcamlLexer_optlabel_5119 = 1547;
	public static final int ART_L_OcamlLexer_optlabel_5123 = 1548;
	public static final int ART_L_OcamlLexer_infix_symbol = 1549;
	public static final int ART_L_OcamlLexer_infix_symbol_5128 = 1550;
	public static final int ART_L_OcamlLexer_infix_symbol_5132 = 1551;
	public static final int ART_L_OcamlLexer_infix_symbol_5136 = 1552;
	public static final int ART_L_OcamlLexer_infix_symbol_5140 = 1553;
	public static final int ART_L_OcamlLexer_infix_symbol_5144 = 1554;
	public static final int ART_L_OcamlLexer_infix_symbol_5148 = 1555;
	public static final int ART_L_OcamlLexer_infix_symbol_5152 = 1556;
	public static final int ART_L_OcamlLexer_infix_symbol_5156 = 1557;
	public static final int ART_L_OcamlLexer_infix_symbol_5160 = 1558;
	public static final int ART_L_OcamlLexer_infix_symbol_5164 = 1559;
	public static final int ART_L_OcamlLexer_infix_symbol_5168 = 1560;
	public static final int ART_L_OcamlLexer_infix_symbol_5172 = 1561;
	public static final int ART_L_OcamlLexer_infix_symbol_5176 = 1562;
	public static final int ART_L_OcamlLexer_infix_symbol_5180 = 1563;
	public static final int ART_L_OcamlLexer_infix_symbol_5188 = 1564;
	public static final int ART_L_OcamlLexer_infix_symbol_5189 = 1565;
	public static final int ART_L_OcamlLexer_prefix_symbol = 1566;
	public static final int ART_L_OcamlLexer_prefix_symbol_5192 = 1567;
	public static final int ART_L_OcamlLexer_prefix_symbol_5199 = 1568;
	public static final int ART_L_OcamlLexer_prefix_symbol_5200 = 1569;
	public static final int ART_L_OcamlLexer_prefix_symbol_5202 = 1570;
	public static final int ART_L_OcamlLexer_prefix_symbol_5206 = 1571;
	public static final int ART_L_OcamlLexer_prefix_symbol_5210 = 1572;
	public static final int ART_L_OcamlLexer_prefix_symbol_5218 = 1573;
	public static final int ART_L_OcamlLexer_prefix_symbol_5219 = 1574;
	public static final int ART_L_OcamlLexer_operator_char = 1575;
	public static final int ART_L_OcamlLexer_operator_char_5222 = 1576;
	public static final int ART_L_OcamlLexer_operator_char_5226 = 1577;
	public static final int ART_L_OcamlLexer_operator_char_5230 = 1578;
	public static final int ART_L_OcamlLexer_operator_char_5234 = 1579;
	public static final int ART_L_OcamlLexer_operator_char_5238 = 1580;
	public static final int ART_L_OcamlLexer_operator_char_5242 = 1581;
	public static final int ART_L_OcamlLexer_operator_char_5246 = 1582;
	public static final int ART_L_OcamlLexer_operator_char_5250 = 1583;
	public static final int ART_L_OcamlLexer_operator_char_5254 = 1584;
	public static final int ART_L_OcamlLexer_operator_char_5258 = 1585;
	public static final int ART_L_OcamlLexer_operator_char_5262 = 1586;
	public static final int ART_L_OcamlLexer_operator_char_5266 = 1587;
	public static final int ART_L_OcamlLexer_operator_char_5270 = 1588;
	public static final int ART_L_OcamlLexer_operator_char_5274 = 1589;
	public static final int ART_L_OcamlLexer_operator_char_5278 = 1590;
	public static final int ART_L_OcamlLexer_operator_char_5282 = 1591;
	public static final int ART_L_OcamlLexer_operator_char_5286 = 1592;
	public static final int ART_L_OcamlLexer_operator_char_5290 = 1593;
	public static final int ART_L_OcamlLexer_linenum_directive = 1594;
	public static final int ART_L_OcamlLexer_linenum_directive_5295 = 1595;
	public static final int ART_L_OcamlLexer_linenum_directive_5302 = 1596;
	public static final int ART_L_OcamlLexer_linenum_directive_5303 = 1597;
	public static final int ART_L_OcamlLexer_linenum_directive_5305 = 1598;
	public static final int ART_L_OcamlLexer_linenum_directive_5312 = 1599;
	public static final int ART_L_OcamlLexer_linenum_directive_5313 = 1600;
	public static final int ART_L_OcamlLexer_linenum_directive_5320 = 1601;
	public static final int ART_L_OcamlLexer_linenum_directive_5321 = 1602;
	public static final int ART_C_OcamlLexer_input_6 = 1603;
	public static final int ART_L_OcamlLexer_input_7 = 1604;
	public static final int ART_A_OcamlLexer_input_7 = 1605;
	public static final int ART_L_OcamlLexer_and_456 = 1606;
	public static final int ART_L_OcamlLexer_and_457 = 1607;
	public static final int ART_L_OcamlLexer_and_458 = 1608;
	public static final int ART_L_OcamlLexer_and_459 = 1609;
	public static final int ART_L_OcamlLexer_and_460 = 1610;
	public static final int ART_L_OcamlLexer_and_461 = 1611;
	public static final int ART_L_OcamlLexer_as_465 = 1612;
	public static final int ART_L_OcamlLexer_as_466 = 1613;
	public static final int ART_L_OcamlLexer_as_467 = 1614;
	public static final int ART_L_OcamlLexer_as_468 = 1615;
	public static final int ART_L_OcamlLexer_assert_472 = 1616;
	public static final int ART_L_OcamlLexer_assert_473 = 1617;
	public static final int ART_L_OcamlLexer_assert_474 = 1618;
	public static final int ART_L_OcamlLexer_assert_475 = 1619;
	public static final int ART_L_OcamlLexer_assert_476 = 1620;
	public static final int ART_L_OcamlLexer_assert_477 = 1621;
	public static final int ART_L_OcamlLexer_assert_478 = 1622;
	public static final int ART_L_OcamlLexer_assert_479 = 1623;
	public static final int ART_L_OcamlLexer_assert_480 = 1624;
	public static final int ART_L_OcamlLexer_assert_481 = 1625;
	public static final int ART_L_OcamlLexer_assert_482 = 1626;
	public static final int ART_L_OcamlLexer_assert_483 = 1627;
	public static final int ART_L_OcamlLexer_asr_487 = 1628;
	public static final int ART_L_OcamlLexer_asr_488 = 1629;
	public static final int ART_L_OcamlLexer_asr_489 = 1630;
	public static final int ART_L_OcamlLexer_asr_490 = 1631;
	public static final int ART_L_OcamlLexer_asr_491 = 1632;
	public static final int ART_L_OcamlLexer_asr_492 = 1633;
	public static final int ART_L_OcamlLexer_begin_496 = 1634;
	public static final int ART_L_OcamlLexer_begin_497 = 1635;
	public static final int ART_L_OcamlLexer_begin_498 = 1636;
	public static final int ART_L_OcamlLexer_begin_499 = 1637;
	public static final int ART_L_OcamlLexer_begin_500 = 1638;
	public static final int ART_L_OcamlLexer_begin_501 = 1639;
	public static final int ART_L_OcamlLexer_begin_502 = 1640;
	public static final int ART_L_OcamlLexer_begin_503 = 1641;
	public static final int ART_L_OcamlLexer_begin_504 = 1642;
	public static final int ART_L_OcamlLexer_begin_505 = 1643;
	public static final int ART_L_OcamlLexer_class_509 = 1644;
	public static final int ART_L_OcamlLexer_class_510 = 1645;
	public static final int ART_L_OcamlLexer_class_511 = 1646;
	public static final int ART_L_OcamlLexer_class_512 = 1647;
	public static final int ART_L_OcamlLexer_class_513 = 1648;
	public static final int ART_L_OcamlLexer_class_514 = 1649;
	public static final int ART_L_OcamlLexer_class_515 = 1650;
	public static final int ART_L_OcamlLexer_class_516 = 1651;
	public static final int ART_L_OcamlLexer_class_517 = 1652;
	public static final int ART_L_OcamlLexer_class_518 = 1653;
	public static final int ART_L_OcamlLexer_constraint_522 = 1654;
	public static final int ART_L_OcamlLexer_constraint_523 = 1655;
	public static final int ART_L_OcamlLexer_constraint_524 = 1656;
	public static final int ART_L_OcamlLexer_constraint_525 = 1657;
	public static final int ART_L_OcamlLexer_constraint_526 = 1658;
	public static final int ART_L_OcamlLexer_constraint_527 = 1659;
	public static final int ART_L_OcamlLexer_constraint_528 = 1660;
	public static final int ART_L_OcamlLexer_constraint_529 = 1661;
	public static final int ART_L_OcamlLexer_constraint_530 = 1662;
	public static final int ART_L_OcamlLexer_constraint_531 = 1663;
	public static final int ART_L_OcamlLexer_constraint_532 = 1664;
	public static final int ART_L_OcamlLexer_constraint_533 = 1665;
	public static final int ART_L_OcamlLexer_constraint_534 = 1666;
	public static final int ART_L_OcamlLexer_constraint_535 = 1667;
	public static final int ART_L_OcamlLexer_constraint_536 = 1668;
	public static final int ART_L_OcamlLexer_constraint_537 = 1669;
	public static final int ART_L_OcamlLexer_constraint_538 = 1670;
	public static final int ART_L_OcamlLexer_constraint_539 = 1671;
	public static final int ART_L_OcamlLexer_constraint_540 = 1672;
	public static final int ART_L_OcamlLexer_constraint_541 = 1673;
	public static final int ART_L_OcamlLexer_do_545 = 1674;
	public static final int ART_L_OcamlLexer_do_546 = 1675;
	public static final int ART_L_OcamlLexer_do_547 = 1676;
	public static final int ART_L_OcamlLexer_do_548 = 1677;
	public static final int ART_L_OcamlLexer_done_552 = 1678;
	public static final int ART_L_OcamlLexer_done_553 = 1679;
	public static final int ART_L_OcamlLexer_done_554 = 1680;
	public static final int ART_L_OcamlLexer_done_555 = 1681;
	public static final int ART_L_OcamlLexer_done_556 = 1682;
	public static final int ART_L_OcamlLexer_done_557 = 1683;
	public static final int ART_L_OcamlLexer_done_558 = 1684;
	public static final int ART_L_OcamlLexer_done_559 = 1685;
	public static final int ART_L_OcamlLexer_downto_563 = 1686;
	public static final int ART_L_OcamlLexer_downto_564 = 1687;
	public static final int ART_L_OcamlLexer_downto_565 = 1688;
	public static final int ART_L_OcamlLexer_downto_566 = 1689;
	public static final int ART_L_OcamlLexer_downto_567 = 1690;
	public static final int ART_L_OcamlLexer_downto_568 = 1691;
	public static final int ART_L_OcamlLexer_downto_569 = 1692;
	public static final int ART_L_OcamlLexer_downto_570 = 1693;
	public static final int ART_L_OcamlLexer_downto_571 = 1694;
	public static final int ART_L_OcamlLexer_downto_572 = 1695;
	public static final int ART_L_OcamlLexer_downto_573 = 1696;
	public static final int ART_L_OcamlLexer_downto_574 = 1697;
	public static final int ART_L_OcamlLexer_else_578 = 1698;
	public static final int ART_L_OcamlLexer_else_579 = 1699;
	public static final int ART_L_OcamlLexer_else_580 = 1700;
	public static final int ART_L_OcamlLexer_else_581 = 1701;
	public static final int ART_L_OcamlLexer_else_582 = 1702;
	public static final int ART_L_OcamlLexer_else_583 = 1703;
	public static final int ART_L_OcamlLexer_else_584 = 1704;
	public static final int ART_L_OcamlLexer_else_585 = 1705;
	public static final int ART_L_OcamlLexer_end_589 = 1706;
	public static final int ART_L_OcamlLexer_end_590 = 1707;
	public static final int ART_L_OcamlLexer_end_591 = 1708;
	public static final int ART_L_OcamlLexer_end_592 = 1709;
	public static final int ART_L_OcamlLexer_end_593 = 1710;
	public static final int ART_L_OcamlLexer_end_594 = 1711;
	public static final int ART_L_OcamlLexer_exception_598 = 1712;
	public static final int ART_L_OcamlLexer_exception_599 = 1713;
	public static final int ART_L_OcamlLexer_exception_600 = 1714;
	public static final int ART_L_OcamlLexer_exception_601 = 1715;
	public static final int ART_L_OcamlLexer_exception_602 = 1716;
	public static final int ART_L_OcamlLexer_exception_603 = 1717;
	public static final int ART_L_OcamlLexer_exception_604 = 1718;
	public static final int ART_L_OcamlLexer_exception_605 = 1719;
	public static final int ART_L_OcamlLexer_exception_606 = 1720;
	public static final int ART_L_OcamlLexer_exception_607 = 1721;
	public static final int ART_L_OcamlLexer_exception_608 = 1722;
	public static final int ART_L_OcamlLexer_exception_609 = 1723;
	public static final int ART_L_OcamlLexer_exception_610 = 1724;
	public static final int ART_L_OcamlLexer_exception_611 = 1725;
	public static final int ART_L_OcamlLexer_exception_612 = 1726;
	public static final int ART_L_OcamlLexer_exception_613 = 1727;
	public static final int ART_L_OcamlLexer_exception_614 = 1728;
	public static final int ART_L_OcamlLexer_exception_615 = 1729;
	public static final int ART_L_OcamlLexer_external_619 = 1730;
	public static final int ART_L_OcamlLexer_external_620 = 1731;
	public static final int ART_L_OcamlLexer_external_621 = 1732;
	public static final int ART_L_OcamlLexer_external_622 = 1733;
	public static final int ART_L_OcamlLexer_external_623 = 1734;
	public static final int ART_L_OcamlLexer_external_624 = 1735;
	public static final int ART_L_OcamlLexer_external_625 = 1736;
	public static final int ART_L_OcamlLexer_external_626 = 1737;
	public static final int ART_L_OcamlLexer_external_627 = 1738;
	public static final int ART_L_OcamlLexer_external_628 = 1739;
	public static final int ART_L_OcamlLexer_external_629 = 1740;
	public static final int ART_L_OcamlLexer_external_630 = 1741;
	public static final int ART_L_OcamlLexer_external_631 = 1742;
	public static final int ART_L_OcamlLexer_external_632 = 1743;
	public static final int ART_L_OcamlLexer_external_633 = 1744;
	public static final int ART_L_OcamlLexer_external_634 = 1745;
	public static final int ART_L_OcamlLexer_false_638 = 1746;
	public static final int ART_L_OcamlLexer_false_639 = 1747;
	public static final int ART_L_OcamlLexer_false_640 = 1748;
	public static final int ART_L_OcamlLexer_false_641 = 1749;
	public static final int ART_L_OcamlLexer_false_642 = 1750;
	public static final int ART_L_OcamlLexer_false_643 = 1751;
	public static final int ART_L_OcamlLexer_false_644 = 1752;
	public static final int ART_L_OcamlLexer_false_645 = 1753;
	public static final int ART_L_OcamlLexer_false_646 = 1754;
	public static final int ART_L_OcamlLexer_false_647 = 1755;
	public static final int ART_L_OcamlLexer_for_651 = 1756;
	public static final int ART_L_OcamlLexer_for_652 = 1757;
	public static final int ART_L_OcamlLexer_for_653 = 1758;
	public static final int ART_L_OcamlLexer_for_654 = 1759;
	public static final int ART_L_OcamlLexer_for_655 = 1760;
	public static final int ART_L_OcamlLexer_for_656 = 1761;
	public static final int ART_L_OcamlLexer_fun_660 = 1762;
	public static final int ART_L_OcamlLexer_fun_661 = 1763;
	public static final int ART_L_OcamlLexer_fun_662 = 1764;
	public static final int ART_L_OcamlLexer_fun_663 = 1765;
	public static final int ART_L_OcamlLexer_fun_664 = 1766;
	public static final int ART_L_OcamlLexer_fun_665 = 1767;
	public static final int ART_L_OcamlLexer_function_669 = 1768;
	public static final int ART_L_OcamlLexer_function_670 = 1769;
	public static final int ART_L_OcamlLexer_function_671 = 1770;
	public static final int ART_L_OcamlLexer_function_672 = 1771;
	public static final int ART_L_OcamlLexer_function_673 = 1772;
	public static final int ART_L_OcamlLexer_function_674 = 1773;
	public static final int ART_L_OcamlLexer_function_675 = 1774;
	public static final int ART_L_OcamlLexer_function_676 = 1775;
	public static final int ART_L_OcamlLexer_function_677 = 1776;
	public static final int ART_L_OcamlLexer_function_678 = 1777;
	public static final int ART_L_OcamlLexer_function_679 = 1778;
	public static final int ART_L_OcamlLexer_function_680 = 1779;
	public static final int ART_L_OcamlLexer_function_681 = 1780;
	public static final int ART_L_OcamlLexer_function_682 = 1781;
	public static final int ART_L_OcamlLexer_function_683 = 1782;
	public static final int ART_L_OcamlLexer_function_684 = 1783;
	public static final int ART_L_OcamlLexer_functor_688 = 1784;
	public static final int ART_L_OcamlLexer_functor_689 = 1785;
	public static final int ART_L_OcamlLexer_functor_690 = 1786;
	public static final int ART_L_OcamlLexer_functor_691 = 1787;
	public static final int ART_L_OcamlLexer_functor_692 = 1788;
	public static final int ART_L_OcamlLexer_functor_693 = 1789;
	public static final int ART_L_OcamlLexer_functor_694 = 1790;
	public static final int ART_L_OcamlLexer_functor_695 = 1791;
	public static final int ART_L_OcamlLexer_functor_696 = 1792;
	public static final int ART_L_OcamlLexer_functor_697 = 1793;
	public static final int ART_L_OcamlLexer_functor_698 = 1794;
	public static final int ART_L_OcamlLexer_functor_699 = 1795;
	public static final int ART_L_OcamlLexer_functor_700 = 1796;
	public static final int ART_L_OcamlLexer_functor_701 = 1797;
	public static final int ART_L_OcamlLexer_if_705 = 1798;
	public static final int ART_L_OcamlLexer_if_706 = 1799;
	public static final int ART_L_OcamlLexer_if_707 = 1800;
	public static final int ART_L_OcamlLexer_if_708 = 1801;
	public static final int ART_L_OcamlLexer_in_712 = 1802;
	public static final int ART_L_OcamlLexer_in_713 = 1803;
	public static final int ART_L_OcamlLexer_in_714 = 1804;
	public static final int ART_L_OcamlLexer_in_715 = 1805;
	public static final int ART_L_OcamlLexer_include_719 = 1806;
	public static final int ART_L_OcamlLexer_include_720 = 1807;
	public static final int ART_L_OcamlLexer_include_721 = 1808;
	public static final int ART_L_OcamlLexer_include_722 = 1809;
	public static final int ART_L_OcamlLexer_include_723 = 1810;
	public static final int ART_L_OcamlLexer_include_724 = 1811;
	public static final int ART_L_OcamlLexer_include_725 = 1812;
	public static final int ART_L_OcamlLexer_include_726 = 1813;
	public static final int ART_L_OcamlLexer_include_727 = 1814;
	public static final int ART_L_OcamlLexer_include_728 = 1815;
	public static final int ART_L_OcamlLexer_include_729 = 1816;
	public static final int ART_L_OcamlLexer_include_730 = 1817;
	public static final int ART_L_OcamlLexer_include_731 = 1818;
	public static final int ART_L_OcamlLexer_include_732 = 1819;
	public static final int ART_L_OcamlLexer_inherit_736 = 1820;
	public static final int ART_L_OcamlLexer_inherit_737 = 1821;
	public static final int ART_L_OcamlLexer_inherit_738 = 1822;
	public static final int ART_L_OcamlLexer_inherit_739 = 1823;
	public static final int ART_L_OcamlLexer_inherit_740 = 1824;
	public static final int ART_L_OcamlLexer_inherit_741 = 1825;
	public static final int ART_L_OcamlLexer_inherit_742 = 1826;
	public static final int ART_L_OcamlLexer_inherit_743 = 1827;
	public static final int ART_L_OcamlLexer_inherit_744 = 1828;
	public static final int ART_L_OcamlLexer_inherit_745 = 1829;
	public static final int ART_L_OcamlLexer_inherit_746 = 1830;
	public static final int ART_L_OcamlLexer_inherit_747 = 1831;
	public static final int ART_L_OcamlLexer_inherit_748 = 1832;
	public static final int ART_L_OcamlLexer_inherit_749 = 1833;
	public static final int ART_L_OcamlLexer_initializer_753 = 1834;
	public static final int ART_L_OcamlLexer_initializer_754 = 1835;
	public static final int ART_L_OcamlLexer_initializer_755 = 1836;
	public static final int ART_L_OcamlLexer_initializer_756 = 1837;
	public static final int ART_L_OcamlLexer_initializer_757 = 1838;
	public static final int ART_L_OcamlLexer_initializer_758 = 1839;
	public static final int ART_L_OcamlLexer_initializer_759 = 1840;
	public static final int ART_L_OcamlLexer_initializer_760 = 1841;
	public static final int ART_L_OcamlLexer_initializer_761 = 1842;
	public static final int ART_L_OcamlLexer_initializer_762 = 1843;
	public static final int ART_L_OcamlLexer_initializer_763 = 1844;
	public static final int ART_L_OcamlLexer_initializer_764 = 1845;
	public static final int ART_L_OcamlLexer_initializer_765 = 1846;
	public static final int ART_L_OcamlLexer_initializer_766 = 1847;
	public static final int ART_L_OcamlLexer_initializer_767 = 1848;
	public static final int ART_L_OcamlLexer_initializer_768 = 1849;
	public static final int ART_L_OcamlLexer_initializer_769 = 1850;
	public static final int ART_L_OcamlLexer_initializer_770 = 1851;
	public static final int ART_L_OcamlLexer_initializer_771 = 1852;
	public static final int ART_L_OcamlLexer_initializer_772 = 1853;
	public static final int ART_L_OcamlLexer_initializer_773 = 1854;
	public static final int ART_L_OcamlLexer_initializer_774 = 1855;
	public static final int ART_L_OcamlLexer_land_778 = 1856;
	public static final int ART_L_OcamlLexer_land_779 = 1857;
	public static final int ART_L_OcamlLexer_land_780 = 1858;
	public static final int ART_L_OcamlLexer_land_781 = 1859;
	public static final int ART_L_OcamlLexer_land_782 = 1860;
	public static final int ART_L_OcamlLexer_land_783 = 1861;
	public static final int ART_L_OcamlLexer_land_784 = 1862;
	public static final int ART_L_OcamlLexer_land_785 = 1863;
	public static final int ART_L_OcamlLexer_lazy_789 = 1864;
	public static final int ART_L_OcamlLexer_lazy_790 = 1865;
	public static final int ART_L_OcamlLexer_lazy_791 = 1866;
	public static final int ART_L_OcamlLexer_lazy_792 = 1867;
	public static final int ART_L_OcamlLexer_lazy_793 = 1868;
	public static final int ART_L_OcamlLexer_lazy_794 = 1869;
	public static final int ART_L_OcamlLexer_lazy_795 = 1870;
	public static final int ART_L_OcamlLexer_lazy_796 = 1871;
	public static final int ART_L_OcamlLexer_let_800 = 1872;
	public static final int ART_L_OcamlLexer_let_801 = 1873;
	public static final int ART_L_OcamlLexer_let_802 = 1874;
	public static final int ART_L_OcamlLexer_let_803 = 1875;
	public static final int ART_L_OcamlLexer_let_804 = 1876;
	public static final int ART_L_OcamlLexer_let_805 = 1877;
	public static final int ART_L_OcamlLexer_lor_809 = 1878;
	public static final int ART_L_OcamlLexer_lor_810 = 1879;
	public static final int ART_L_OcamlLexer_lor_811 = 1880;
	public static final int ART_L_OcamlLexer_lor_812 = 1881;
	public static final int ART_L_OcamlLexer_lor_813 = 1882;
	public static final int ART_L_OcamlLexer_lor_814 = 1883;
	public static final int ART_L_OcamlLexer_lsl_818 = 1884;
	public static final int ART_L_OcamlLexer_lsl_819 = 1885;
	public static final int ART_L_OcamlLexer_lsl_820 = 1886;
	public static final int ART_L_OcamlLexer_lsl_821 = 1887;
	public static final int ART_L_OcamlLexer_lsl_822 = 1888;
	public static final int ART_L_OcamlLexer_lsl_823 = 1889;
	public static final int ART_L_OcamlLexer_lsr_827 = 1890;
	public static final int ART_L_OcamlLexer_lsr_828 = 1891;
	public static final int ART_L_OcamlLexer_lsr_829 = 1892;
	public static final int ART_L_OcamlLexer_lsr_830 = 1893;
	public static final int ART_L_OcamlLexer_lsr_831 = 1894;
	public static final int ART_L_OcamlLexer_lsr_832 = 1895;
	public static final int ART_L_OcamlLexer_lxor_836 = 1896;
	public static final int ART_L_OcamlLexer_lxor_837 = 1897;
	public static final int ART_L_OcamlLexer_lxor_838 = 1898;
	public static final int ART_L_OcamlLexer_lxor_839 = 1899;
	public static final int ART_L_OcamlLexer_lxor_840 = 1900;
	public static final int ART_L_OcamlLexer_lxor_841 = 1901;
	public static final int ART_L_OcamlLexer_lxor_842 = 1902;
	public static final int ART_L_OcamlLexer_lxor_843 = 1903;
	public static final int ART_L_OcamlLexer_match_847 = 1904;
	public static final int ART_L_OcamlLexer_match_848 = 1905;
	public static final int ART_L_OcamlLexer_match_849 = 1906;
	public static final int ART_L_OcamlLexer_match_850 = 1907;
	public static final int ART_L_OcamlLexer_match_851 = 1908;
	public static final int ART_L_OcamlLexer_match_852 = 1909;
	public static final int ART_L_OcamlLexer_match_853 = 1910;
	public static final int ART_L_OcamlLexer_match_854 = 1911;
	public static final int ART_L_OcamlLexer_match_855 = 1912;
	public static final int ART_L_OcamlLexer_match_856 = 1913;
	public static final int ART_L_OcamlLexer_method_860 = 1914;
	public static final int ART_L_OcamlLexer_method_861 = 1915;
	public static final int ART_L_OcamlLexer_method_862 = 1916;
	public static final int ART_L_OcamlLexer_method_863 = 1917;
	public static final int ART_L_OcamlLexer_method_864 = 1918;
	public static final int ART_L_OcamlLexer_method_865 = 1919;
	public static final int ART_L_OcamlLexer_method_866 = 1920;
	public static final int ART_L_OcamlLexer_method_867 = 1921;
	public static final int ART_L_OcamlLexer_method_868 = 1922;
	public static final int ART_L_OcamlLexer_method_869 = 1923;
	public static final int ART_L_OcamlLexer_method_870 = 1924;
	public static final int ART_L_OcamlLexer_method_871 = 1925;
	public static final int ART_L_OcamlLexer_mod_875 = 1926;
	public static final int ART_L_OcamlLexer_mod_876 = 1927;
	public static final int ART_L_OcamlLexer_mod_877 = 1928;
	public static final int ART_L_OcamlLexer_mod_878 = 1929;
	public static final int ART_L_OcamlLexer_mod_879 = 1930;
	public static final int ART_L_OcamlLexer_mod_880 = 1931;
	public static final int ART_L_OcamlLexer_module_884 = 1932;
	public static final int ART_L_OcamlLexer_module_885 = 1933;
	public static final int ART_L_OcamlLexer_module_886 = 1934;
	public static final int ART_L_OcamlLexer_module_887 = 1935;
	public static final int ART_L_OcamlLexer_module_888 = 1936;
	public static final int ART_L_OcamlLexer_module_889 = 1937;
	public static final int ART_L_OcamlLexer_module_890 = 1938;
	public static final int ART_L_OcamlLexer_module_891 = 1939;
	public static final int ART_L_OcamlLexer_module_892 = 1940;
	public static final int ART_L_OcamlLexer_module_893 = 1941;
	public static final int ART_L_OcamlLexer_module_894 = 1942;
	public static final int ART_L_OcamlLexer_module_895 = 1943;
	public static final int ART_L_OcamlLexer_mutable_899 = 1944;
	public static final int ART_L_OcamlLexer_mutable_900 = 1945;
	public static final int ART_L_OcamlLexer_mutable_901 = 1946;
	public static final int ART_L_OcamlLexer_mutable_902 = 1947;
	public static final int ART_L_OcamlLexer_mutable_903 = 1948;
	public static final int ART_L_OcamlLexer_mutable_904 = 1949;
	public static final int ART_L_OcamlLexer_mutable_905 = 1950;
	public static final int ART_L_OcamlLexer_mutable_906 = 1951;
	public static final int ART_L_OcamlLexer_mutable_907 = 1952;
	public static final int ART_L_OcamlLexer_mutable_908 = 1953;
	public static final int ART_L_OcamlLexer_mutable_909 = 1954;
	public static final int ART_L_OcamlLexer_mutable_910 = 1955;
	public static final int ART_L_OcamlLexer_mutable_911 = 1956;
	public static final int ART_L_OcamlLexer_mutable_912 = 1957;
	public static final int ART_L_OcamlLexer_new_916 = 1958;
	public static final int ART_L_OcamlLexer_new_917 = 1959;
	public static final int ART_L_OcamlLexer_new_918 = 1960;
	public static final int ART_L_OcamlLexer_new_919 = 1961;
	public static final int ART_L_OcamlLexer_new_920 = 1962;
	public static final int ART_L_OcamlLexer_new_921 = 1963;
	public static final int ART_L_OcamlLexer_object_925 = 1964;
	public static final int ART_L_OcamlLexer_object_926 = 1965;
	public static final int ART_L_OcamlLexer_object_927 = 1966;
	public static final int ART_L_OcamlLexer_object_928 = 1967;
	public static final int ART_L_OcamlLexer_object_929 = 1968;
	public static final int ART_L_OcamlLexer_object_930 = 1969;
	public static final int ART_L_OcamlLexer_object_931 = 1970;
	public static final int ART_L_OcamlLexer_object_932 = 1971;
	public static final int ART_L_OcamlLexer_object_933 = 1972;
	public static final int ART_L_OcamlLexer_object_934 = 1973;
	public static final int ART_L_OcamlLexer_object_935 = 1974;
	public static final int ART_L_OcamlLexer_object_936 = 1975;
	public static final int ART_L_OcamlLexer_of_940 = 1976;
	public static final int ART_L_OcamlLexer_of_941 = 1977;
	public static final int ART_L_OcamlLexer_of_942 = 1978;
	public static final int ART_L_OcamlLexer_of_943 = 1979;
	public static final int ART_L_OcamlLexer_open_947 = 1980;
	public static final int ART_L_OcamlLexer_open_948 = 1981;
	public static final int ART_L_OcamlLexer_open_949 = 1982;
	public static final int ART_L_OcamlLexer_open_950 = 1983;
	public static final int ART_L_OcamlLexer_open_951 = 1984;
	public static final int ART_L_OcamlLexer_open_952 = 1985;
	public static final int ART_L_OcamlLexer_open_953 = 1986;
	public static final int ART_L_OcamlLexer_open_954 = 1987;
	public static final int ART_L_OcamlLexer_or_958 = 1988;
	public static final int ART_L_OcamlLexer_or_959 = 1989;
	public static final int ART_L_OcamlLexer_or_960 = 1990;
	public static final int ART_L_OcamlLexer_or_961 = 1991;
	public static final int ART_L_OcamlLexer_private_965 = 1992;
	public static final int ART_L_OcamlLexer_private_966 = 1993;
	public static final int ART_L_OcamlLexer_private_967 = 1994;
	public static final int ART_L_OcamlLexer_private_968 = 1995;
	public static final int ART_L_OcamlLexer_private_969 = 1996;
	public static final int ART_L_OcamlLexer_private_970 = 1997;
	public static final int ART_L_OcamlLexer_private_971 = 1998;
	public static final int ART_L_OcamlLexer_private_972 = 1999;
	public static final int ART_L_OcamlLexer_private_973 = 2000;
	public static final int ART_L_OcamlLexer_private_974 = 2001;
	public static final int ART_L_OcamlLexer_private_975 = 2002;
	public static final int ART_L_OcamlLexer_private_976 = 2003;
	public static final int ART_L_OcamlLexer_private_977 = 2004;
	public static final int ART_L_OcamlLexer_private_978 = 2005;
	public static final int ART_L_OcamlLexer_rec_982 = 2006;
	public static final int ART_L_OcamlLexer_rec_983 = 2007;
	public static final int ART_L_OcamlLexer_rec_984 = 2008;
	public static final int ART_L_OcamlLexer_rec_985 = 2009;
	public static final int ART_L_OcamlLexer_rec_986 = 2010;
	public static final int ART_L_OcamlLexer_rec_987 = 2011;
	public static final int ART_L_OcamlLexer_sig_991 = 2012;
	public static final int ART_L_OcamlLexer_sig_992 = 2013;
	public static final int ART_L_OcamlLexer_sig_993 = 2014;
	public static final int ART_L_OcamlLexer_sig_994 = 2015;
	public static final int ART_L_OcamlLexer_sig_995 = 2016;
	public static final int ART_L_OcamlLexer_sig_996 = 2017;
	public static final int ART_L_OcamlLexer_struct_1000 = 2018;
	public static final int ART_L_OcamlLexer_struct_1001 = 2019;
	public static final int ART_L_OcamlLexer_struct_1002 = 2020;
	public static final int ART_L_OcamlLexer_struct_1003 = 2021;
	public static final int ART_L_OcamlLexer_struct_1004 = 2022;
	public static final int ART_L_OcamlLexer_struct_1005 = 2023;
	public static final int ART_L_OcamlLexer_struct_1006 = 2024;
	public static final int ART_L_OcamlLexer_struct_1007 = 2025;
	public static final int ART_L_OcamlLexer_struct_1008 = 2026;
	public static final int ART_L_OcamlLexer_struct_1009 = 2027;
	public static final int ART_L_OcamlLexer_struct_1010 = 2028;
	public static final int ART_L_OcamlLexer_struct_1011 = 2029;
	public static final int ART_L_OcamlLexer_then_1015 = 2030;
	public static final int ART_L_OcamlLexer_then_1016 = 2031;
	public static final int ART_L_OcamlLexer_then_1017 = 2032;
	public static final int ART_L_OcamlLexer_then_1018 = 2033;
	public static final int ART_L_OcamlLexer_then_1019 = 2034;
	public static final int ART_L_OcamlLexer_then_1020 = 2035;
	public static final int ART_L_OcamlLexer_then_1021 = 2036;
	public static final int ART_L_OcamlLexer_then_1022 = 2037;
	public static final int ART_L_OcamlLexer_to_1026 = 2038;
	public static final int ART_L_OcamlLexer_to_1027 = 2039;
	public static final int ART_L_OcamlLexer_to_1028 = 2040;
	public static final int ART_L_OcamlLexer_to_1029 = 2041;
	public static final int ART_L_OcamlLexer_true_1033 = 2042;
	public static final int ART_L_OcamlLexer_true_1034 = 2043;
	public static final int ART_L_OcamlLexer_true_1035 = 2044;
	public static final int ART_L_OcamlLexer_true_1036 = 2045;
	public static final int ART_L_OcamlLexer_true_1037 = 2046;
	public static final int ART_L_OcamlLexer_true_1038 = 2047;
	public static final int ART_L_OcamlLexer_true_1039 = 2048;
	public static final int ART_L_OcamlLexer_true_1040 = 2049;
	public static final int ART_L_OcamlLexer_try_1044 = 2050;
	public static final int ART_L_OcamlLexer_try_1045 = 2051;
	public static final int ART_L_OcamlLexer_try_1046 = 2052;
	public static final int ART_L_OcamlLexer_try_1047 = 2053;
	public static final int ART_L_OcamlLexer_try_1048 = 2054;
	public static final int ART_L_OcamlLexer_try_1049 = 2055;
	public static final int ART_L_OcamlLexer_type_1053 = 2056;
	public static final int ART_L_OcamlLexer_type_1054 = 2057;
	public static final int ART_L_OcamlLexer_type_1055 = 2058;
	public static final int ART_L_OcamlLexer_type_1056 = 2059;
	public static final int ART_L_OcamlLexer_type_1057 = 2060;
	public static final int ART_L_OcamlLexer_type_1058 = 2061;
	public static final int ART_L_OcamlLexer_type_1059 = 2062;
	public static final int ART_L_OcamlLexer_type_1060 = 2063;
	public static final int ART_L_OcamlLexer_val_1064 = 2064;
	public static final int ART_L_OcamlLexer_val_1065 = 2065;
	public static final int ART_L_OcamlLexer_val_1066 = 2066;
	public static final int ART_L_OcamlLexer_val_1067 = 2067;
	public static final int ART_L_OcamlLexer_val_1068 = 2068;
	public static final int ART_L_OcamlLexer_val_1069 = 2069;
	public static final int ART_L_OcamlLexer_virtual_1073 = 2070;
	public static final int ART_L_OcamlLexer_virtual_1074 = 2071;
	public static final int ART_L_OcamlLexer_virtual_1075 = 2072;
	public static final int ART_L_OcamlLexer_virtual_1076 = 2073;
	public static final int ART_L_OcamlLexer_virtual_1077 = 2074;
	public static final int ART_L_OcamlLexer_virtual_1078 = 2075;
	public static final int ART_L_OcamlLexer_virtual_1079 = 2076;
	public static final int ART_L_OcamlLexer_virtual_1080 = 2077;
	public static final int ART_L_OcamlLexer_virtual_1081 = 2078;
	public static final int ART_L_OcamlLexer_virtual_1082 = 2079;
	public static final int ART_L_OcamlLexer_virtual_1083 = 2080;
	public static final int ART_L_OcamlLexer_virtual_1084 = 2081;
	public static final int ART_L_OcamlLexer_virtual_1085 = 2082;
	public static final int ART_L_OcamlLexer_virtual_1086 = 2083;
	public static final int ART_L_OcamlLexer_when_1090 = 2084;
	public static final int ART_L_OcamlLexer_when_1091 = 2085;
	public static final int ART_L_OcamlLexer_when_1092 = 2086;
	public static final int ART_L_OcamlLexer_when_1093 = 2087;
	public static final int ART_L_OcamlLexer_when_1094 = 2088;
	public static final int ART_L_OcamlLexer_when_1095 = 2089;
	public static final int ART_L_OcamlLexer_when_1096 = 2090;
	public static final int ART_L_OcamlLexer_when_1097 = 2091;
	public static final int ART_L_OcamlLexer_while_1101 = 2092;
	public static final int ART_L_OcamlLexer_while_1102 = 2093;
	public static final int ART_L_OcamlLexer_while_1103 = 2094;
	public static final int ART_L_OcamlLexer_while_1104 = 2095;
	public static final int ART_L_OcamlLexer_while_1105 = 2096;
	public static final int ART_L_OcamlLexer_while_1106 = 2097;
	public static final int ART_L_OcamlLexer_while_1107 = 2098;
	public static final int ART_L_OcamlLexer_while_1108 = 2099;
	public static final int ART_L_OcamlLexer_while_1109 = 2100;
	public static final int ART_L_OcamlLexer_while_1110 = 2101;
	public static final int ART_L_OcamlLexer_with_1114 = 2102;
	public static final int ART_L_OcamlLexer_with_1115 = 2103;
	public static final int ART_L_OcamlLexer_with_1116 = 2104;
	public static final int ART_L_OcamlLexer_with_1117 = 2105;
	public static final int ART_L_OcamlLexer_with_1118 = 2106;
	public static final int ART_L_OcamlLexer_with_1119 = 2107;
	public static final int ART_L_OcamlLexer_with_1120 = 2108;
	public static final int ART_L_OcamlLexer_with_1121 = 2109;
	public static final int ART_L_OcamlLexer_bangequals_1125 = 2110;
	public static final int ART_L_OcamlLexer_bangequals_1126 = 2111;
	public static final int ART_L_OcamlLexer_bangequals_1127 = 2112;
	public static final int ART_L_OcamlLexer_bangequals_1128 = 2113;
	public static final int ART_L_OcamlLexer_hash_1132 = 2114;
	public static final int ART_L_OcamlLexer_hash_1133 = 2115;
	public static final int ART_L_OcamlLexer_amper_1137 = 2116;
	public static final int ART_L_OcamlLexer_amper_1138 = 2117;
	public static final int ART_L_OcamlLexer_amperamper_1142 = 2118;
	public static final int ART_L_OcamlLexer_amperamper_1143 = 2119;
	public static final int ART_L_OcamlLexer_amperamper_1144 = 2120;
	public static final int ART_L_OcamlLexer_amperamper_1145 = 2121;
	public static final int ART_L_OcamlLexer_squote_1149 = 2122;
	public static final int ART_L_OcamlLexer_squote_1150 = 2123;
	public static final int ART_L_OcamlLexer_lparen_1154 = 2124;
	public static final int ART_L_OcamlLexer_lparen_1155 = 2125;
	public static final int ART_L_OcamlLexer_rparen_1159 = 2126;
	public static final int ART_L_OcamlLexer_rparen_1160 = 2127;
	public static final int ART_L_OcamlLexer_star_1164 = 2128;
	public static final int ART_L_OcamlLexer_star_1165 = 2129;
	public static final int ART_L_OcamlLexer_plus_1169 = 2130;
	public static final int ART_L_OcamlLexer_plus_1170 = 2131;
	public static final int ART_L_OcamlLexer_comma_1174 = 2132;
	public static final int ART_L_OcamlLexer_comma_1175 = 2133;
	public static final int ART_L_OcamlLexer_hyphen_1179 = 2134;
	public static final int ART_L_OcamlLexer_hyphen_1180 = 2135;
	public static final int ART_L_OcamlLexer_hyphendot_1184 = 2136;
	public static final int ART_L_OcamlLexer_hyphendot_1185 = 2137;
	public static final int ART_L_OcamlLexer_hyphendot_1186 = 2138;
	public static final int ART_L_OcamlLexer_hyphendot_1187 = 2139;
	public static final int ART_L_OcamlLexer_hyphengreater_1191 = 2140;
	public static final int ART_L_OcamlLexer_hyphengreater_1192 = 2141;
	public static final int ART_L_OcamlLexer_hyphengreater_1193 = 2142;
	public static final int ART_L_OcamlLexer_hyphengreater_1194 = 2143;
	public static final int ART_L_OcamlLexer_dot_1198 = 2144;
	public static final int ART_L_OcamlLexer_dot_1199 = 2145;
	public static final int ART_L_OcamlLexer_dotdot_1203 = 2146;
	public static final int ART_L_OcamlLexer_dotdot_1204 = 2147;
	public static final int ART_L_OcamlLexer_dotdot_1205 = 2148;
	public static final int ART_L_OcamlLexer_dotdot_1206 = 2149;
	public static final int ART_L_OcamlLexer_colon_1210 = 2150;
	public static final int ART_L_OcamlLexer_colon_1211 = 2151;
	public static final int ART_L_OcamlLexer_coloncolon_1215 = 2152;
	public static final int ART_L_OcamlLexer_coloncolon_1216 = 2153;
	public static final int ART_L_OcamlLexer_coloncolon_1217 = 2154;
	public static final int ART_L_OcamlLexer_coloncolon_1218 = 2155;
	public static final int ART_L_OcamlLexer_colonequals_1222 = 2156;
	public static final int ART_L_OcamlLexer_colonequals_1223 = 2157;
	public static final int ART_L_OcamlLexer_colonequals_1224 = 2158;
	public static final int ART_L_OcamlLexer_colonequals_1225 = 2159;
	public static final int ART_L_OcamlLexer_colongreater_1229 = 2160;
	public static final int ART_L_OcamlLexer_colongreater_1230 = 2161;
	public static final int ART_L_OcamlLexer_colongreater_1231 = 2162;
	public static final int ART_L_OcamlLexer_colongreater_1232 = 2163;
	public static final int ART_L_OcamlLexer_semi_1236 = 2164;
	public static final int ART_L_OcamlLexer_semi_1237 = 2165;
	public static final int ART_L_OcamlLexer_semisemi_1241 = 2166;
	public static final int ART_L_OcamlLexer_semisemi_1242 = 2167;
	public static final int ART_L_OcamlLexer_semisemi_1243 = 2168;
	public static final int ART_L_OcamlLexer_semisemi_1244 = 2169;
	public static final int ART_L_OcamlLexer_less_1248 = 2170;
	public static final int ART_L_OcamlLexer_less_1249 = 2171;
	public static final int ART_L_OcamlLexer_lesshyphen_1253 = 2172;
	public static final int ART_L_OcamlLexer_lesshyphen_1254 = 2173;
	public static final int ART_L_OcamlLexer_lesshyphen_1255 = 2174;
	public static final int ART_L_OcamlLexer_lesshyphen_1256 = 2175;
	public static final int ART_L_OcamlLexer_equal_1260 = 2176;
	public static final int ART_L_OcamlLexer_equal_1261 = 2177;
	public static final int ART_L_OcamlLexer_greater_1265 = 2178;
	public static final int ART_L_OcamlLexer_greater_1266 = 2179;
	public static final int ART_L_OcamlLexer_greaterrbracket_1270 = 2180;
	public static final int ART_L_OcamlLexer_greaterrbracket_1271 = 2181;
	public static final int ART_L_OcamlLexer_greaterrbracket_1272 = 2182;
	public static final int ART_L_OcamlLexer_greaterrbracket_1273 = 2183;
	public static final int ART_L_OcamlLexer_greaterrbrace_1277 = 2184;
	public static final int ART_L_OcamlLexer_greaterrbrace_1278 = 2185;
	public static final int ART_L_OcamlLexer_greaterrbrace_1279 = 2186;
	public static final int ART_L_OcamlLexer_greaterrbrace_1280 = 2187;
	public static final int ART_L_OcamlLexer_question_1284 = 2188;
	public static final int ART_L_OcamlLexer_question_1285 = 2189;
	public static final int ART_L_OcamlLexer_lbracket_1289 = 2190;
	public static final int ART_L_OcamlLexer_lbracket_1290 = 2191;
	public static final int ART_L_OcamlLexer_lbracketless_1294 = 2192;
	public static final int ART_L_OcamlLexer_lbracketless_1295 = 2193;
	public static final int ART_L_OcamlLexer_lbracketless_1296 = 2194;
	public static final int ART_L_OcamlLexer_lbracketless_1297 = 2195;
	public static final int ART_L_OcamlLexer_lbracketgreater_1301 = 2196;
	public static final int ART_L_OcamlLexer_lbracketgreater_1302 = 2197;
	public static final int ART_L_OcamlLexer_lbracketgreater_1303 = 2198;
	public static final int ART_L_OcamlLexer_lbracketgreater_1304 = 2199;
	public static final int ART_L_OcamlLexer_lbracketbar_1308 = 2200;
	public static final int ART_L_OcamlLexer_lbracketbar_1309 = 2201;
	public static final int ART_L_OcamlLexer_lbracketbar_1310 = 2202;
	public static final int ART_L_OcamlLexer_lbracketbar_1311 = 2203;
	public static final int ART_L_OcamlLexer_rbracket_1315 = 2204;
	public static final int ART_L_OcamlLexer_rbracket_1316 = 2205;
	public static final int ART_L_OcamlLexer_underscore_1320 = 2206;
	public static final int ART_L_OcamlLexer_underscore_1321 = 2207;
	public static final int ART_L_OcamlLexer_backquote_1325 = 2208;
	public static final int ART_L_OcamlLexer_backquote_1326 = 2209;
	public static final int ART_L_OcamlLexer_lbrace_1330 = 2210;
	public static final int ART_L_OcamlLexer_lbrace_1331 = 2211;
	public static final int ART_L_OcamlLexer_lbraceless_1335 = 2212;
	public static final int ART_L_OcamlLexer_lbraceless_1336 = 2213;
	public static final int ART_L_OcamlLexer_lbraceless_1337 = 2214;
	public static final int ART_L_OcamlLexer_lbraceless_1338 = 2215;
	public static final int ART_L_OcamlLexer_bar_1342 = 2216;
	public static final int ART_L_OcamlLexer_bar_1343 = 2217;
	public static final int ART_L_OcamlLexer_barrbracket_1347 = 2218;
	public static final int ART_L_OcamlLexer_barrbracket_1348 = 2219;
	public static final int ART_L_OcamlLexer_barrbracket_1349 = 2220;
	public static final int ART_L_OcamlLexer_barrbracket_1350 = 2221;
	public static final int ART_L_OcamlLexer_barbar_1354 = 2222;
	public static final int ART_L_OcamlLexer_barbar_1355 = 2223;
	public static final int ART_L_OcamlLexer_barbar_1356 = 2224;
	public static final int ART_L_OcamlLexer_barbar_1357 = 2225;
	public static final int ART_L_OcamlLexer_rbrace_1361 = 2226;
	public static final int ART_L_OcamlLexer_rbrace_1362 = 2227;
	public static final int ART_L_OcamlLexer_tilde_1366 = 2228;
	public static final int ART_L_OcamlLexer_tilde_1367 = 2229;
	public static final int ART_L_OcamlLexer_ident_1372 = 2230;
	public static final int ART_A_OcamlLexer_ident_1372 = 2231;
	public static final int ART_L_OcamlLexer_ident_1379 = 2232;
	public static final int ART_L_OcamlLexer_ident_1380 = 2233;
	public static final int ART_L_OcamlLexer_ident_1381 = 2234;
	public static final int ART_C_OcamlLexer_ident_1382 = 2235;
	public static final int ART_L_OcamlLexer_identifier_part_character_1400 = 2236;
	public static final int ART_L_OcamlLexer_identifier_part_character_1401 = 2237;
	public static final int ART_L_OcamlLexer_identifier_part_character_1404 = 2238;
	public static final int ART_L_OcamlLexer_identifier_part_character_1405 = 2239;
	public static final int ART_L_OcamlLexer_identifier_part_character_1408 = 2240;
	public static final int ART_L_OcamlLexer_identifier_part_character_1409 = 2241;
	public static final int ART_L_OcamlLexer_identifier_part_character_1412 = 2242;
	public static final int ART_L_OcamlLexer_identifier_part_character_1413 = 2243;
	public static final int ART_L_OcamlLexer_identifier_part_character_1416 = 2244;
	public static final int ART_L_OcamlLexer_identifier_part_character_1417 = 2245;
	public static final int ART_L_OcamlLexer_identifier_part_character_1420 = 2246;
	public static final int ART_L_OcamlLexer_identifier_part_character_1421 = 2247;
	public static final int ART_L_OcamlLexer_identifier_part_character_1424 = 2248;
	public static final int ART_L_OcamlLexer_identifier_part_character_1425 = 2249;
	public static final int ART_L_OcamlLexer_identifier_part_character_1428 = 2250;
	public static final int ART_L_OcamlLexer_identifier_part_character_1429 = 2251;
	public static final int ART_L_OcamlLexer_identifier_part_character_1432 = 2252;
	public static final int ART_L_OcamlLexer_identifier_part_character_1433 = 2253;
	public static final int ART_L_OcamlLexer_identifier_part_character_1436 = 2254;
	public static final int ART_L_OcamlLexer_identifier_part_character_1437 = 2255;
	public static final int ART_L_OcamlLexer_identifier_part_character_1440 = 2256;
	public static final int ART_L_OcamlLexer_identifier_part_character_1441 = 2257;
	public static final int ART_L_OcamlLexer_identifier_part_character_1444 = 2258;
	public static final int ART_L_OcamlLexer_identifier_part_character_1445 = 2259;
	public static final int ART_L_OcamlLexer_identifier_part_character_1448 = 2260;
	public static final int ART_L_OcamlLexer_identifier_part_character_1449 = 2261;
	public static final int ART_L_OcamlLexer_identifier_part_character_1452 = 2262;
	public static final int ART_L_OcamlLexer_identifier_part_character_1453 = 2263;
	public static final int ART_L_OcamlLexer_identifier_part_character_1456 = 2264;
	public static final int ART_L_OcamlLexer_identifier_part_character_1457 = 2265;
	public static final int ART_L_OcamlLexer_identifier_part_character_1460 = 2266;
	public static final int ART_L_OcamlLexer_identifier_part_character_1461 = 2267;
	public static final int ART_L_OcamlLexer_identifier_part_character_1464 = 2268;
	public static final int ART_L_OcamlLexer_identifier_part_character_1465 = 2269;
	public static final int ART_L_OcamlLexer_identifier_part_character_1468 = 2270;
	public static final int ART_L_OcamlLexer_identifier_part_character_1469 = 2271;
	public static final int ART_L_OcamlLexer_identifier_part_character_1472 = 2272;
	public static final int ART_L_OcamlLexer_identifier_part_character_1473 = 2273;
	public static final int ART_L_OcamlLexer_identifier_part_character_1476 = 2274;
	public static final int ART_L_OcamlLexer_identifier_part_character_1477 = 2275;
	public static final int ART_L_OcamlLexer_identifier_part_character_1480 = 2276;
	public static final int ART_L_OcamlLexer_identifier_part_character_1481 = 2277;
	public static final int ART_L_OcamlLexer_identifier_part_character_1484 = 2278;
	public static final int ART_L_OcamlLexer_identifier_part_character_1485 = 2279;
	public static final int ART_L_OcamlLexer_identifier_part_character_1488 = 2280;
	public static final int ART_L_OcamlLexer_identifier_part_character_1489 = 2281;
	public static final int ART_L_OcamlLexer_identifier_part_character_1492 = 2282;
	public static final int ART_L_OcamlLexer_identifier_part_character_1493 = 2283;
	public static final int ART_L_OcamlLexer_identifier_part_character_1496 = 2284;
	public static final int ART_L_OcamlLexer_identifier_part_character_1497 = 2285;
	public static final int ART_L_OcamlLexer_identifier_part_character_1500 = 2286;
	public static final int ART_L_OcamlLexer_identifier_part_character_1501 = 2287;
	public static final int ART_L_OcamlLexer_identifier_part_character_1504 = 2288;
	public static final int ART_L_OcamlLexer_identifier_part_character_1505 = 2289;
	public static final int ART_L_OcamlLexer_identifier_part_character_1508 = 2290;
	public static final int ART_L_OcamlLexer_identifier_part_character_1509 = 2291;
	public static final int ART_L_OcamlLexer_identifier_part_character_1512 = 2292;
	public static final int ART_L_OcamlLexer_identifier_part_character_1513 = 2293;
	public static final int ART_L_OcamlLexer_identifier_part_character_1516 = 2294;
	public static final int ART_L_OcamlLexer_identifier_part_character_1517 = 2295;
	public static final int ART_L_OcamlLexer_identifier_part_character_1520 = 2296;
	public static final int ART_L_OcamlLexer_identifier_part_character_1521 = 2297;
	public static final int ART_L_OcamlLexer_identifier_part_character_1524 = 2298;
	public static final int ART_L_OcamlLexer_identifier_part_character_1525 = 2299;
	public static final int ART_L_OcamlLexer_identifier_part_character_1528 = 2300;
	public static final int ART_L_OcamlLexer_identifier_part_character_1529 = 2301;
	public static final int ART_L_OcamlLexer_identifier_part_character_1532 = 2302;
	public static final int ART_L_OcamlLexer_identifier_part_character_1533 = 2303;
	public static final int ART_L_OcamlLexer_identifier_part_character_1536 = 2304;
	public static final int ART_L_OcamlLexer_identifier_part_character_1537 = 2305;
	public static final int ART_L_OcamlLexer_identifier_part_character_1540 = 2306;
	public static final int ART_L_OcamlLexer_identifier_part_character_1541 = 2307;
	public static final int ART_L_OcamlLexer_identifier_part_character_1544 = 2308;
	public static final int ART_L_OcamlLexer_identifier_part_character_1545 = 2309;
	public static final int ART_L_OcamlLexer_identifier_part_character_1548 = 2310;
	public static final int ART_L_OcamlLexer_identifier_part_character_1549 = 2311;
	public static final int ART_L_OcamlLexer_identifier_part_character_1552 = 2312;
	public static final int ART_L_OcamlLexer_identifier_part_character_1553 = 2313;
	public static final int ART_L_OcamlLexer_identifier_part_character_1556 = 2314;
	public static final int ART_L_OcamlLexer_identifier_part_character_1557 = 2315;
	public static final int ART_L_OcamlLexer_identifier_part_character_1560 = 2316;
	public static final int ART_L_OcamlLexer_identifier_part_character_1561 = 2317;
	public static final int ART_L_OcamlLexer_identifier_part_character_1564 = 2318;
	public static final int ART_L_OcamlLexer_identifier_part_character_1565 = 2319;
	public static final int ART_L_OcamlLexer_identifier_part_character_1568 = 2320;
	public static final int ART_L_OcamlLexer_identifier_part_character_1569 = 2321;
	public static final int ART_L_OcamlLexer_identifier_part_character_1572 = 2322;
	public static final int ART_L_OcamlLexer_identifier_part_character_1573 = 2323;
	public static final int ART_L_OcamlLexer_identifier_part_character_1576 = 2324;
	public static final int ART_L_OcamlLexer_identifier_part_character_1577 = 2325;
	public static final int ART_L_OcamlLexer_identifier_part_character_1580 = 2326;
	public static final int ART_L_OcamlLexer_identifier_part_character_1581 = 2327;
	public static final int ART_L_OcamlLexer_identifier_part_character_1584 = 2328;
	public static final int ART_L_OcamlLexer_identifier_part_character_1585 = 2329;
	public static final int ART_L_OcamlLexer_identifier_part_character_1588 = 2330;
	public static final int ART_L_OcamlLexer_identifier_part_character_1589 = 2331;
	public static final int ART_L_OcamlLexer_identifier_part_character_1592 = 2332;
	public static final int ART_L_OcamlLexer_identifier_part_character_1593 = 2333;
	public static final int ART_L_OcamlLexer_identifier_part_character_1596 = 2334;
	public static final int ART_L_OcamlLexer_identifier_part_character_1597 = 2335;
	public static final int ART_L_OcamlLexer_identifier_part_character_1600 = 2336;
	public static final int ART_L_OcamlLexer_identifier_part_character_1601 = 2337;
	public static final int ART_L_OcamlLexer_identifier_part_character_1604 = 2338;
	public static final int ART_L_OcamlLexer_identifier_part_character_1605 = 2339;
	public static final int ART_L_OcamlLexer_identifier_part_character_1608 = 2340;
	public static final int ART_L_OcamlLexer_identifier_part_character_1609 = 2341;
	public static final int ART_L_OcamlLexer_identifier_part_character_1612 = 2342;
	public static final int ART_L_OcamlLexer_identifier_part_character_1613 = 2343;
	public static final int ART_L_OcamlLexer_identifier_part_character_1616 = 2344;
	public static final int ART_L_OcamlLexer_identifier_part_character_1617 = 2345;
	public static final int ART_L_OcamlLexer_identifier_part_character_1620 = 2346;
	public static final int ART_L_OcamlLexer_identifier_part_character_1621 = 2347;
	public static final int ART_L_OcamlLexer_identifier_part_character_1624 = 2348;
	public static final int ART_L_OcamlLexer_identifier_part_character_1625 = 2349;
	public static final int ART_L_OcamlLexer_identifier_part_character_1628 = 2350;
	public static final int ART_L_OcamlLexer_identifier_part_character_1629 = 2351;
	public static final int ART_L_OcamlLexer_identifier_part_character_1632 = 2352;
	public static final int ART_L_OcamlLexer_identifier_part_character_1633 = 2353;
	public static final int ART_L_OcamlLexer_identifier_part_character_1636 = 2354;
	public static final int ART_L_OcamlLexer_identifier_part_character_1637 = 2355;
	public static final int ART_L_OcamlLexer_identifier_part_character_1640 = 2356;
	public static final int ART_L_OcamlLexer_identifier_part_character_1641 = 2357;
	public static final int ART_L_OcamlLexer_identifier_part_character_1644 = 2358;
	public static final int ART_L_OcamlLexer_identifier_part_character_1645 = 2359;
	public static final int ART_L_OcamlLexer_identifier_part_character_1648 = 2360;
	public static final int ART_L_OcamlLexer_identifier_part_character_1649 = 2361;
	public static final int ART_L_OcamlLexer_identifier_part_character_1652 = 2362;
	public static final int ART_L_OcamlLexer_identifier_part_character_1653 = 2363;
	public static final int ART_C_OcamlLexer_capitalized_ident_1659 = 2364;
	public static final int ART_L_OcamlLexer_capital_letter_1668 = 2365;
	public static final int ART_L_OcamlLexer_capital_letter_1669 = 2366;
	public static final int ART_L_OcamlLexer_capital_letter_1672 = 2367;
	public static final int ART_L_OcamlLexer_capital_letter_1673 = 2368;
	public static final int ART_L_OcamlLexer_capital_letter_1676 = 2369;
	public static final int ART_L_OcamlLexer_capital_letter_1677 = 2370;
	public static final int ART_L_OcamlLexer_capital_letter_1680 = 2371;
	public static final int ART_L_OcamlLexer_capital_letter_1681 = 2372;
	public static final int ART_L_OcamlLexer_capital_letter_1684 = 2373;
	public static final int ART_L_OcamlLexer_capital_letter_1685 = 2374;
	public static final int ART_L_OcamlLexer_capital_letter_1688 = 2375;
	public static final int ART_L_OcamlLexer_capital_letter_1689 = 2376;
	public static final int ART_L_OcamlLexer_capital_letter_1692 = 2377;
	public static final int ART_L_OcamlLexer_capital_letter_1693 = 2378;
	public static final int ART_L_OcamlLexer_capital_letter_1696 = 2379;
	public static final int ART_L_OcamlLexer_capital_letter_1697 = 2380;
	public static final int ART_L_OcamlLexer_capital_letter_1700 = 2381;
	public static final int ART_L_OcamlLexer_capital_letter_1701 = 2382;
	public static final int ART_L_OcamlLexer_capital_letter_1704 = 2383;
	public static final int ART_L_OcamlLexer_capital_letter_1705 = 2384;
	public static final int ART_L_OcamlLexer_capital_letter_1708 = 2385;
	public static final int ART_L_OcamlLexer_capital_letter_1709 = 2386;
	public static final int ART_L_OcamlLexer_capital_letter_1712 = 2387;
	public static final int ART_L_OcamlLexer_capital_letter_1713 = 2388;
	public static final int ART_L_OcamlLexer_capital_letter_1716 = 2389;
	public static final int ART_L_OcamlLexer_capital_letter_1717 = 2390;
	public static final int ART_L_OcamlLexer_capital_letter_1720 = 2391;
	public static final int ART_L_OcamlLexer_capital_letter_1721 = 2392;
	public static final int ART_L_OcamlLexer_capital_letter_1724 = 2393;
	public static final int ART_L_OcamlLexer_capital_letter_1725 = 2394;
	public static final int ART_L_OcamlLexer_capital_letter_1728 = 2395;
	public static final int ART_L_OcamlLexer_capital_letter_1729 = 2396;
	public static final int ART_L_OcamlLexer_capital_letter_1732 = 2397;
	public static final int ART_L_OcamlLexer_capital_letter_1733 = 2398;
	public static final int ART_L_OcamlLexer_capital_letter_1736 = 2399;
	public static final int ART_L_OcamlLexer_capital_letter_1737 = 2400;
	public static final int ART_L_OcamlLexer_capital_letter_1740 = 2401;
	public static final int ART_L_OcamlLexer_capital_letter_1741 = 2402;
	public static final int ART_L_OcamlLexer_capital_letter_1744 = 2403;
	public static final int ART_L_OcamlLexer_capital_letter_1745 = 2404;
	public static final int ART_L_OcamlLexer_capital_letter_1748 = 2405;
	public static final int ART_L_OcamlLexer_capital_letter_1749 = 2406;
	public static final int ART_L_OcamlLexer_capital_letter_1752 = 2407;
	public static final int ART_L_OcamlLexer_capital_letter_1753 = 2408;
	public static final int ART_L_OcamlLexer_capital_letter_1756 = 2409;
	public static final int ART_L_OcamlLexer_capital_letter_1757 = 2410;
	public static final int ART_L_OcamlLexer_capital_letter_1760 = 2411;
	public static final int ART_L_OcamlLexer_capital_letter_1761 = 2412;
	public static final int ART_L_OcamlLexer_capital_letter_1764 = 2413;
	public static final int ART_L_OcamlLexer_capital_letter_1765 = 2414;
	public static final int ART_L_OcamlLexer_capital_letter_1768 = 2415;
	public static final int ART_L_OcamlLexer_capital_letter_1769 = 2416;
	public static final int ART_C_OcamlLexer_lowercase_ident_1775 = 2417;
	public static final int ART_L_OcamlLexer_lowercase_letter_1784 = 2418;
	public static final int ART_L_OcamlLexer_lowercase_letter_1785 = 2419;
	public static final int ART_L_OcamlLexer_lowercase_letter_1788 = 2420;
	public static final int ART_L_OcamlLexer_lowercase_letter_1789 = 2421;
	public static final int ART_L_OcamlLexer_lowercase_letter_1792 = 2422;
	public static final int ART_L_OcamlLexer_lowercase_letter_1793 = 2423;
	public static final int ART_L_OcamlLexer_lowercase_letter_1796 = 2424;
	public static final int ART_L_OcamlLexer_lowercase_letter_1797 = 2425;
	public static final int ART_L_OcamlLexer_lowercase_letter_1800 = 2426;
	public static final int ART_L_OcamlLexer_lowercase_letter_1801 = 2427;
	public static final int ART_L_OcamlLexer_lowercase_letter_1804 = 2428;
	public static final int ART_L_OcamlLexer_lowercase_letter_1805 = 2429;
	public static final int ART_L_OcamlLexer_lowercase_letter_1808 = 2430;
	public static final int ART_L_OcamlLexer_lowercase_letter_1809 = 2431;
	public static final int ART_L_OcamlLexer_lowercase_letter_1812 = 2432;
	public static final int ART_L_OcamlLexer_lowercase_letter_1813 = 2433;
	public static final int ART_L_OcamlLexer_lowercase_letter_1816 = 2434;
	public static final int ART_L_OcamlLexer_lowercase_letter_1817 = 2435;
	public static final int ART_L_OcamlLexer_lowercase_letter_1820 = 2436;
	public static final int ART_L_OcamlLexer_lowercase_letter_1821 = 2437;
	public static final int ART_L_OcamlLexer_lowercase_letter_1824 = 2438;
	public static final int ART_L_OcamlLexer_lowercase_letter_1825 = 2439;
	public static final int ART_L_OcamlLexer_lowercase_letter_1828 = 2440;
	public static final int ART_L_OcamlLexer_lowercase_letter_1829 = 2441;
	public static final int ART_L_OcamlLexer_lowercase_letter_1832 = 2442;
	public static final int ART_L_OcamlLexer_lowercase_letter_1833 = 2443;
	public static final int ART_L_OcamlLexer_lowercase_letter_1836 = 2444;
	public static final int ART_L_OcamlLexer_lowercase_letter_1837 = 2445;
	public static final int ART_L_OcamlLexer_lowercase_letter_1840 = 2446;
	public static final int ART_L_OcamlLexer_lowercase_letter_1841 = 2447;
	public static final int ART_L_OcamlLexer_lowercase_letter_1844 = 2448;
	public static final int ART_L_OcamlLexer_lowercase_letter_1845 = 2449;
	public static final int ART_L_OcamlLexer_lowercase_letter_1848 = 2450;
	public static final int ART_L_OcamlLexer_lowercase_letter_1849 = 2451;
	public static final int ART_L_OcamlLexer_lowercase_letter_1852 = 2452;
	public static final int ART_L_OcamlLexer_lowercase_letter_1853 = 2453;
	public static final int ART_L_OcamlLexer_lowercase_letter_1856 = 2454;
	public static final int ART_L_OcamlLexer_lowercase_letter_1857 = 2455;
	public static final int ART_L_OcamlLexer_lowercase_letter_1860 = 2456;
	public static final int ART_L_OcamlLexer_lowercase_letter_1861 = 2457;
	public static final int ART_L_OcamlLexer_lowercase_letter_1864 = 2458;
	public static final int ART_L_OcamlLexer_lowercase_letter_1865 = 2459;
	public static final int ART_L_OcamlLexer_lowercase_letter_1868 = 2460;
	public static final int ART_L_OcamlLexer_lowercase_letter_1869 = 2461;
	public static final int ART_L_OcamlLexer_lowercase_letter_1872 = 2462;
	public static final int ART_L_OcamlLexer_lowercase_letter_1873 = 2463;
	public static final int ART_L_OcamlLexer_lowercase_letter_1876 = 2464;
	public static final int ART_L_OcamlLexer_lowercase_letter_1877 = 2465;
	public static final int ART_L_OcamlLexer_lowercase_letter_1880 = 2466;
	public static final int ART_L_OcamlLexer_lowercase_letter_1881 = 2467;
	public static final int ART_L_OcamlLexer_lowercase_letter_1884 = 2468;
	public static final int ART_L_OcamlLexer_lowercase_letter_1885 = 2469;
	public static final int ART_L_OcamlLexer_lowercase_letter_1888 = 2470;
	public static final int ART_L_OcamlLexer_lowercase_letter_1889 = 2471;
	public static final int ART_L_OcamlLexer_whitespace_1893 = 2472;
	public static final int ART_L_OcamlLexer_whitespace_1894 = 2473;
	public static final int ART_L_OcamlLexer_whitespace_1897 = 2474;
	public static final int ART_L_OcamlLexer_whitespace_1898 = 2475;
	public static final int ART_L_OcamlLexer_whitespace_1901 = 2476;
	public static final int ART_L_OcamlLexer_whitespace_1902 = 2477;
	public static final int ART_L_OcamlLexer_whitespace_1905 = 2478;
	public static final int ART_L_OcamlLexer_whitespace_1906 = 2479;
	public static final int ART_L_OcamlLexer_whitespace_1909 = 2480;
	public static final int ART_L_OcamlLexer_whitespace_1910 = 2481;
	public static final int ART_L_OcamlLexer_whitespace_1913 = 2482;
	public static final int ART_L_OcamlLexer_whitespace_1914 = 2483;
	public static final int ART_L_OcamlLexer_comment_1918 = 2484;
	public static final int ART_L_OcamlLexer_comment_1919 = 2485;
	public static final int ART_L_OcamlLexer_comment_1920 = 2486;
	public static final int ART_L_OcamlLexer_comment_1921 = 2487;
	public static final int ART_L_OcamlLexer_comment_1923 = 2488;
	public static final int ART_A_OcamlLexer_comment_1923 = 2489;
	public static final int ART_L_OcamlLexer_comment_1932 = 2490;
	public static final int ART_L_OcamlLexer_comment_1933 = 2491;
	public static final int ART_L_OcamlLexer_comment_1934 = 2492;
	public static final int ART_L_OcamlLexer_comment_1935 = 2493;
	public static final int ART_L_OcamlLexer_comment_1936 = 2494;
	public static final int ART_L_OcamlLexer_not_comment_1940 = 2495;
	public static final int ART_L_OcamlLexer_not_comment_1941 = 2496;
	public static final int ART_L_OcamlLexer_not_comment_1946 = 2497;
	public static final int ART_L_OcamlLexer_not_comment_1947 = 2498;
	public static final int ART_L_OcamlLexer_not_comment_1952 = 2499;
	public static final int ART_L_OcamlLexer_not_comment_1953 = 2500;
	public static final int ART_L_OcamlLexer_not_comment_1958 = 2501;
	public static final int ART_L_OcamlLexer_not_comment_1959 = 2502;
	public static final int ART_L_OcamlLexer_not_comment_1964 = 2503;
	public static final int ART_L_OcamlLexer_not_comment_1965 = 2504;
	public static final int ART_L_OcamlLexer_not_comment_1970 = 2505;
	public static final int ART_L_OcamlLexer_not_comment_1971 = 2506;
	public static final int ART_L_OcamlLexer_not_comment_1976 = 2507;
	public static final int ART_L_OcamlLexer_not_comment_1977 = 2508;
	public static final int ART_L_OcamlLexer_not_comment_1982 = 2509;
	public static final int ART_L_OcamlLexer_not_comment_1983 = 2510;
	public static final int ART_L_OcamlLexer_not_comment_1988 = 2511;
	public static final int ART_L_OcamlLexer_not_comment_1989 = 2512;
	public static final int ART_L_OcamlLexer_not_comment_1994 = 2513;
	public static final int ART_L_OcamlLexer_not_comment_1995 = 2514;
	public static final int ART_L_OcamlLexer_not_comment_2000 = 2515;
	public static final int ART_L_OcamlLexer_not_comment_2001 = 2516;
	public static final int ART_L_OcamlLexer_not_comment_2006 = 2517;
	public static final int ART_L_OcamlLexer_not_comment_2007 = 2518;
	public static final int ART_L_OcamlLexer_not_comment_2012 = 2519;
	public static final int ART_L_OcamlLexer_not_comment_2013 = 2520;
	public static final int ART_L_OcamlLexer_not_comment_2018 = 2521;
	public static final int ART_L_OcamlLexer_not_comment_2019 = 2522;
	public static final int ART_L_OcamlLexer_not_comment_2024 = 2523;
	public static final int ART_L_OcamlLexer_not_comment_2025 = 2524;
	public static final int ART_L_OcamlLexer_not_comment_2030 = 2525;
	public static final int ART_L_OcamlLexer_not_comment_2031 = 2526;
	public static final int ART_L_OcamlLexer_not_comment_2033 = 2527;
	public static final int ART_A_OcamlLexer_not_comment_2033 = 2528;
	public static final int ART_L_OcamlLexer_not_comment_2043 = 2529;
	public static final int ART_L_OcamlLexer_not_comment_2044 = 2530;
	public static final int ART_L_OcamlLexer_not_comment_2047 = 2531;
	public static final int ART_L_OcamlLexer_not_comment_2048 = 2532;
	public static final int ART_L_OcamlLexer_not_comment_2053 = 2533;
	public static final int ART_L_OcamlLexer_not_comment_2054 = 2534;
	public static final int ART_L_OcamlLexer_not_comment_2056 = 2535;
	public static final int ART_A_OcamlLexer_not_comment_2056 = 2536;
	public static final int ART_L_OcamlLexer_not_comment_2066 = 2537;
	public static final int ART_L_OcamlLexer_not_comment_2067 = 2538;
	public static final int ART_L_OcamlLexer_not_comment_2070 = 2539;
	public static final int ART_L_OcamlLexer_not_comment_2071 = 2540;
	public static final int ART_L_OcamlLexer_not_comment_2076 = 2541;
	public static final int ART_L_OcamlLexer_not_comment_2077 = 2542;
	public static final int ART_L_OcamlLexer_not_comment_2082 = 2543;
	public static final int ART_L_OcamlLexer_not_comment_2083 = 2544;
	public static final int ART_L_OcamlLexer_not_comment_2088 = 2545;
	public static final int ART_L_OcamlLexer_not_comment_2089 = 2546;
	public static final int ART_L_OcamlLexer_not_comment_2094 = 2547;
	public static final int ART_L_OcamlLexer_not_comment_2095 = 2548;
	public static final int ART_L_OcamlLexer_not_comment_2100 = 2549;
	public static final int ART_L_OcamlLexer_not_comment_2101 = 2550;
	public static final int ART_L_OcamlLexer_not_comment_2106 = 2551;
	public static final int ART_L_OcamlLexer_not_comment_2107 = 2552;
	public static final int ART_L_OcamlLexer_not_comment_2112 = 2553;
	public static final int ART_L_OcamlLexer_not_comment_2113 = 2554;
	public static final int ART_L_OcamlLexer_not_comment_2118 = 2555;
	public static final int ART_L_OcamlLexer_not_comment_2119 = 2556;
	public static final int ART_L_OcamlLexer_not_comment_2124 = 2557;
	public static final int ART_L_OcamlLexer_not_comment_2125 = 2558;
	public static final int ART_L_OcamlLexer_not_comment_2130 = 2559;
	public static final int ART_L_OcamlLexer_not_comment_2131 = 2560;
	public static final int ART_L_OcamlLexer_not_comment_2136 = 2561;
	public static final int ART_L_OcamlLexer_not_comment_2137 = 2562;
	public static final int ART_L_OcamlLexer_not_comment_2142 = 2563;
	public static final int ART_L_OcamlLexer_not_comment_2143 = 2564;
	public static final int ART_L_OcamlLexer_not_comment_2148 = 2565;
	public static final int ART_L_OcamlLexer_not_comment_2149 = 2566;
	public static final int ART_L_OcamlLexer_not_comment_2154 = 2567;
	public static final int ART_L_OcamlLexer_not_comment_2155 = 2568;
	public static final int ART_L_OcamlLexer_not_comment_2160 = 2569;
	public static final int ART_L_OcamlLexer_not_comment_2161 = 2570;
	public static final int ART_L_OcamlLexer_not_comment_2166 = 2571;
	public static final int ART_L_OcamlLexer_not_comment_2167 = 2572;
	public static final int ART_L_OcamlLexer_not_comment_2172 = 2573;
	public static final int ART_L_OcamlLexer_not_comment_2173 = 2574;
	public static final int ART_L_OcamlLexer_not_comment_2178 = 2575;
	public static final int ART_L_OcamlLexer_not_comment_2179 = 2576;
	public static final int ART_L_OcamlLexer_not_comment_2184 = 2577;
	public static final int ART_L_OcamlLexer_not_comment_2185 = 2578;
	public static final int ART_L_OcamlLexer_not_comment_2190 = 2579;
	public static final int ART_L_OcamlLexer_not_comment_2191 = 2580;
	public static final int ART_L_OcamlLexer_not_comment_2196 = 2581;
	public static final int ART_L_OcamlLexer_not_comment_2197 = 2582;
	public static final int ART_L_OcamlLexer_not_comment_2202 = 2583;
	public static final int ART_L_OcamlLexer_not_comment_2203 = 2584;
	public static final int ART_L_OcamlLexer_not_comment_2208 = 2585;
	public static final int ART_L_OcamlLexer_not_comment_2209 = 2586;
	public static final int ART_L_OcamlLexer_not_comment_2214 = 2587;
	public static final int ART_L_OcamlLexer_not_comment_2215 = 2588;
	public static final int ART_L_OcamlLexer_not_comment_2220 = 2589;
	public static final int ART_L_OcamlLexer_not_comment_2221 = 2590;
	public static final int ART_L_OcamlLexer_not_comment_2226 = 2591;
	public static final int ART_L_OcamlLexer_not_comment_2227 = 2592;
	public static final int ART_L_OcamlLexer_not_comment_2232 = 2593;
	public static final int ART_L_OcamlLexer_not_comment_2233 = 2594;
	public static final int ART_L_OcamlLexer_not_comment_2238 = 2595;
	public static final int ART_L_OcamlLexer_not_comment_2239 = 2596;
	public static final int ART_L_OcamlLexer_not_comment_2244 = 2597;
	public static final int ART_L_OcamlLexer_not_comment_2245 = 2598;
	public static final int ART_L_OcamlLexer_not_comment_2250 = 2599;
	public static final int ART_L_OcamlLexer_not_comment_2251 = 2600;
	public static final int ART_L_OcamlLexer_not_comment_2256 = 2601;
	public static final int ART_L_OcamlLexer_not_comment_2257 = 2602;
	public static final int ART_L_OcamlLexer_not_comment_2262 = 2603;
	public static final int ART_L_OcamlLexer_not_comment_2263 = 2604;
	public static final int ART_L_OcamlLexer_not_comment_2268 = 2605;
	public static final int ART_L_OcamlLexer_not_comment_2269 = 2606;
	public static final int ART_L_OcamlLexer_not_comment_2274 = 2607;
	public static final int ART_L_OcamlLexer_not_comment_2275 = 2608;
	public static final int ART_L_OcamlLexer_not_comment_2280 = 2609;
	public static final int ART_L_OcamlLexer_not_comment_2281 = 2610;
	public static final int ART_L_OcamlLexer_not_comment_2286 = 2611;
	public static final int ART_L_OcamlLexer_not_comment_2287 = 2612;
	public static final int ART_L_OcamlLexer_not_comment_2292 = 2613;
	public static final int ART_L_OcamlLexer_not_comment_2293 = 2614;
	public static final int ART_L_OcamlLexer_not_comment_2298 = 2615;
	public static final int ART_L_OcamlLexer_not_comment_2299 = 2616;
	public static final int ART_L_OcamlLexer_not_comment_2304 = 2617;
	public static final int ART_L_OcamlLexer_not_comment_2305 = 2618;
	public static final int ART_L_OcamlLexer_not_comment_2310 = 2619;
	public static final int ART_L_OcamlLexer_not_comment_2311 = 2620;
	public static final int ART_L_OcamlLexer_not_comment_2316 = 2621;
	public static final int ART_L_OcamlLexer_not_comment_2317 = 2622;
	public static final int ART_L_OcamlLexer_not_comment_2322 = 2623;
	public static final int ART_L_OcamlLexer_not_comment_2323 = 2624;
	public static final int ART_L_OcamlLexer_not_comment_2328 = 2625;
	public static final int ART_L_OcamlLexer_not_comment_2329 = 2626;
	public static final int ART_L_OcamlLexer_not_comment_2334 = 2627;
	public static final int ART_L_OcamlLexer_not_comment_2335 = 2628;
	public static final int ART_L_OcamlLexer_not_comment_2340 = 2629;
	public static final int ART_L_OcamlLexer_not_comment_2341 = 2630;
	public static final int ART_L_OcamlLexer_not_comment_2346 = 2631;
	public static final int ART_L_OcamlLexer_not_comment_2347 = 2632;
	public static final int ART_L_OcamlLexer_not_comment_2352 = 2633;
	public static final int ART_L_OcamlLexer_not_comment_2353 = 2634;
	public static final int ART_L_OcamlLexer_not_comment_2358 = 2635;
	public static final int ART_L_OcamlLexer_not_comment_2359 = 2636;
	public static final int ART_L_OcamlLexer_not_comment_2364 = 2637;
	public static final int ART_L_OcamlLexer_not_comment_2365 = 2638;
	public static final int ART_L_OcamlLexer_not_comment_2370 = 2639;
	public static final int ART_L_OcamlLexer_not_comment_2371 = 2640;
	public static final int ART_L_OcamlLexer_not_comment_2376 = 2641;
	public static final int ART_L_OcamlLexer_not_comment_2377 = 2642;
	public static final int ART_L_OcamlLexer_not_comment_2382 = 2643;
	public static final int ART_L_OcamlLexer_not_comment_2383 = 2644;
	public static final int ART_L_OcamlLexer_not_comment_2388 = 2645;
	public static final int ART_L_OcamlLexer_not_comment_2389 = 2646;
	public static final int ART_L_OcamlLexer_not_comment_2394 = 2647;
	public static final int ART_L_OcamlLexer_not_comment_2395 = 2648;
	public static final int ART_L_OcamlLexer_not_comment_2400 = 2649;
	public static final int ART_L_OcamlLexer_not_comment_2401 = 2650;
	public static final int ART_L_OcamlLexer_not_comment_2406 = 2651;
	public static final int ART_L_OcamlLexer_not_comment_2407 = 2652;
	public static final int ART_L_OcamlLexer_not_comment_2412 = 2653;
	public static final int ART_L_OcamlLexer_not_comment_2413 = 2654;
	public static final int ART_L_OcamlLexer_not_comment_2418 = 2655;
	public static final int ART_L_OcamlLexer_not_comment_2419 = 2656;
	public static final int ART_L_OcamlLexer_not_comment_2424 = 2657;
	public static final int ART_L_OcamlLexer_not_comment_2425 = 2658;
	public static final int ART_L_OcamlLexer_not_comment_2430 = 2659;
	public static final int ART_L_OcamlLexer_not_comment_2431 = 2660;
	public static final int ART_L_OcamlLexer_not_comment_2436 = 2661;
	public static final int ART_L_OcamlLexer_not_comment_2437 = 2662;
	public static final int ART_L_OcamlLexer_not_comment_2442 = 2663;
	public static final int ART_L_OcamlLexer_not_comment_2443 = 2664;
	public static final int ART_L_OcamlLexer_not_comment_2448 = 2665;
	public static final int ART_L_OcamlLexer_not_comment_2449 = 2666;
	public static final int ART_L_OcamlLexer_not_comment_2454 = 2667;
	public static final int ART_L_OcamlLexer_not_comment_2455 = 2668;
	public static final int ART_L_OcamlLexer_not_comment_2460 = 2669;
	public static final int ART_L_OcamlLexer_not_comment_2461 = 2670;
	public static final int ART_L_OcamlLexer_not_comment_2466 = 2671;
	public static final int ART_L_OcamlLexer_not_comment_2467 = 2672;
	public static final int ART_L_OcamlLexer_not_comment_2472 = 2673;
	public static final int ART_L_OcamlLexer_not_comment_2473 = 2674;
	public static final int ART_L_OcamlLexer_not_comment_2478 = 2675;
	public static final int ART_L_OcamlLexer_not_comment_2479 = 2676;
	public static final int ART_L_OcamlLexer_not_comment_2484 = 2677;
	public static final int ART_L_OcamlLexer_not_comment_2485 = 2678;
	public static final int ART_L_OcamlLexer_not_comment_2490 = 2679;
	public static final int ART_L_OcamlLexer_not_comment_2491 = 2680;
	public static final int ART_L_OcamlLexer_not_comment_2496 = 2681;
	public static final int ART_L_OcamlLexer_not_comment_2497 = 2682;
	public static final int ART_L_OcamlLexer_not_comment_2502 = 2683;
	public static final int ART_L_OcamlLexer_not_comment_2503 = 2684;
	public static final int ART_L_OcamlLexer_not_comment_2508 = 2685;
	public static final int ART_L_OcamlLexer_not_comment_2509 = 2686;
	public static final int ART_L_OcamlLexer_not_comment_2514 = 2687;
	public static final int ART_L_OcamlLexer_not_comment_2515 = 2688;
	public static final int ART_L_OcamlLexer_not_comment_2520 = 2689;
	public static final int ART_L_OcamlLexer_not_comment_2521 = 2690;
	public static final int ART_L_OcamlLexer_not_comment_2526 = 2691;
	public static final int ART_L_OcamlLexer_not_comment_2527 = 2692;
	public static final int ART_L_OcamlLexer_not_comment_2532 = 2693;
	public static final int ART_L_OcamlLexer_not_comment_2533 = 2694;
	public static final int ART_L_OcamlLexer_not_comment_2538 = 2695;
	public static final int ART_L_OcamlLexer_not_comment_2539 = 2696;
	public static final int ART_L_OcamlLexer_not_comment_2544 = 2697;
	public static final int ART_L_OcamlLexer_not_comment_2545 = 2698;
	public static final int ART_L_OcamlLexer_not_comment_2550 = 2699;
	public static final int ART_L_OcamlLexer_not_comment_2551 = 2700;
	public static final int ART_L_OcamlLexer_not_comment_2556 = 2701;
	public static final int ART_L_OcamlLexer_not_comment_2557 = 2702;
	public static final int ART_L_OcamlLexer_not_comment_2562 = 2703;
	public static final int ART_L_OcamlLexer_not_comment_2563 = 2704;
	public static final int ART_L_OcamlLexer_not_comment_2568 = 2705;
	public static final int ART_L_OcamlLexer_not_comment_2569 = 2706;
	public static final int ART_L_OcamlLexer_not_comment_2574 = 2707;
	public static final int ART_L_OcamlLexer_not_comment_2575 = 2708;
	public static final int ART_L_OcamlLexer_not_comment_2581 = 2709;
	public static final int ART_L_OcamlLexer_not_asterisk_2585 = 2710;
	public static final int ART_L_OcamlLexer_not_asterisk_2586 = 2711;
	public static final int ART_L_OcamlLexer_not_asterisk_2589 = 2712;
	public static final int ART_L_OcamlLexer_not_asterisk_2590 = 2713;
	public static final int ART_L_OcamlLexer_not_asterisk_2593 = 2714;
	public static final int ART_L_OcamlLexer_not_asterisk_2594 = 2715;
	public static final int ART_L_OcamlLexer_not_asterisk_2597 = 2716;
	public static final int ART_L_OcamlLexer_not_asterisk_2598 = 2717;
	public static final int ART_L_OcamlLexer_not_asterisk_2601 = 2718;
	public static final int ART_L_OcamlLexer_not_asterisk_2602 = 2719;
	public static final int ART_L_OcamlLexer_not_asterisk_2605 = 2720;
	public static final int ART_L_OcamlLexer_not_asterisk_2606 = 2721;
	public static final int ART_L_OcamlLexer_not_asterisk_2609 = 2722;
	public static final int ART_L_OcamlLexer_not_asterisk_2610 = 2723;
	public static final int ART_L_OcamlLexer_not_asterisk_2613 = 2724;
	public static final int ART_L_OcamlLexer_not_asterisk_2614 = 2725;
	public static final int ART_L_OcamlLexer_not_asterisk_2617 = 2726;
	public static final int ART_L_OcamlLexer_not_asterisk_2618 = 2727;
	public static final int ART_L_OcamlLexer_not_asterisk_2621 = 2728;
	public static final int ART_L_OcamlLexer_not_asterisk_2622 = 2729;
	public static final int ART_L_OcamlLexer_not_asterisk_2625 = 2730;
	public static final int ART_L_OcamlLexer_not_asterisk_2626 = 2731;
	public static final int ART_L_OcamlLexer_not_asterisk_2629 = 2732;
	public static final int ART_L_OcamlLexer_not_asterisk_2630 = 2733;
	public static final int ART_L_OcamlLexer_not_asterisk_2633 = 2734;
	public static final int ART_L_OcamlLexer_not_asterisk_2634 = 2735;
	public static final int ART_L_OcamlLexer_not_asterisk_2637 = 2736;
	public static final int ART_L_OcamlLexer_not_asterisk_2638 = 2737;
	public static final int ART_L_OcamlLexer_not_asterisk_2641 = 2738;
	public static final int ART_L_OcamlLexer_not_asterisk_2642 = 2739;
	public static final int ART_L_OcamlLexer_not_asterisk_2645 = 2740;
	public static final int ART_L_OcamlLexer_not_asterisk_2646 = 2741;
	public static final int ART_L_OcamlLexer_not_asterisk_2649 = 2742;
	public static final int ART_L_OcamlLexer_not_asterisk_2650 = 2743;
	public static final int ART_L_OcamlLexer_not_asterisk_2653 = 2744;
	public static final int ART_L_OcamlLexer_not_asterisk_2654 = 2745;
	public static final int ART_L_OcamlLexer_not_asterisk_2657 = 2746;
	public static final int ART_L_OcamlLexer_not_asterisk_2658 = 2747;
	public static final int ART_L_OcamlLexer_not_asterisk_2661 = 2748;
	public static final int ART_L_OcamlLexer_not_asterisk_2662 = 2749;
	public static final int ART_L_OcamlLexer_not_asterisk_2665 = 2750;
	public static final int ART_L_OcamlLexer_not_asterisk_2666 = 2751;
	public static final int ART_L_OcamlLexer_not_asterisk_2669 = 2752;
	public static final int ART_L_OcamlLexer_not_asterisk_2670 = 2753;
	public static final int ART_L_OcamlLexer_not_asterisk_2673 = 2754;
	public static final int ART_L_OcamlLexer_not_asterisk_2674 = 2755;
	public static final int ART_L_OcamlLexer_not_asterisk_2677 = 2756;
	public static final int ART_L_OcamlLexer_not_asterisk_2678 = 2757;
	public static final int ART_L_OcamlLexer_not_asterisk_2681 = 2758;
	public static final int ART_L_OcamlLexer_not_asterisk_2682 = 2759;
	public static final int ART_L_OcamlLexer_not_asterisk_2685 = 2760;
	public static final int ART_L_OcamlLexer_not_asterisk_2686 = 2761;
	public static final int ART_L_OcamlLexer_not_asterisk_2689 = 2762;
	public static final int ART_L_OcamlLexer_not_asterisk_2690 = 2763;
	public static final int ART_L_OcamlLexer_not_asterisk_2693 = 2764;
	public static final int ART_L_OcamlLexer_not_asterisk_2694 = 2765;
	public static final int ART_L_OcamlLexer_not_asterisk_2697 = 2766;
	public static final int ART_L_OcamlLexer_not_asterisk_2698 = 2767;
	public static final int ART_L_OcamlLexer_not_asterisk_2701 = 2768;
	public static final int ART_L_OcamlLexer_not_asterisk_2702 = 2769;
	public static final int ART_L_OcamlLexer_not_asterisk_2705 = 2770;
	public static final int ART_L_OcamlLexer_not_asterisk_2706 = 2771;
	public static final int ART_L_OcamlLexer_not_asterisk_2709 = 2772;
	public static final int ART_L_OcamlLexer_not_asterisk_2710 = 2773;
	public static final int ART_L_OcamlLexer_not_asterisk_2713 = 2774;
	public static final int ART_L_OcamlLexer_not_asterisk_2714 = 2775;
	public static final int ART_L_OcamlLexer_not_asterisk_2717 = 2776;
	public static final int ART_L_OcamlLexer_not_asterisk_2718 = 2777;
	public static final int ART_L_OcamlLexer_not_asterisk_2721 = 2778;
	public static final int ART_L_OcamlLexer_not_asterisk_2722 = 2779;
	public static final int ART_L_OcamlLexer_not_asterisk_2725 = 2780;
	public static final int ART_L_OcamlLexer_not_asterisk_2726 = 2781;
	public static final int ART_L_OcamlLexer_not_asterisk_2729 = 2782;
	public static final int ART_L_OcamlLexer_not_asterisk_2730 = 2783;
	public static final int ART_L_OcamlLexer_not_asterisk_2733 = 2784;
	public static final int ART_L_OcamlLexer_not_asterisk_2734 = 2785;
	public static final int ART_L_OcamlLexer_not_asterisk_2737 = 2786;
	public static final int ART_L_OcamlLexer_not_asterisk_2738 = 2787;
	public static final int ART_L_OcamlLexer_not_asterisk_2741 = 2788;
	public static final int ART_L_OcamlLexer_not_asterisk_2742 = 2789;
	public static final int ART_L_OcamlLexer_not_asterisk_2745 = 2790;
	public static final int ART_L_OcamlLexer_not_asterisk_2746 = 2791;
	public static final int ART_L_OcamlLexer_not_asterisk_2749 = 2792;
	public static final int ART_L_OcamlLexer_not_asterisk_2750 = 2793;
	public static final int ART_L_OcamlLexer_not_asterisk_2753 = 2794;
	public static final int ART_L_OcamlLexer_not_asterisk_2754 = 2795;
	public static final int ART_L_OcamlLexer_not_asterisk_2757 = 2796;
	public static final int ART_L_OcamlLexer_not_asterisk_2758 = 2797;
	public static final int ART_L_OcamlLexer_not_asterisk_2761 = 2798;
	public static final int ART_L_OcamlLexer_not_asterisk_2762 = 2799;
	public static final int ART_L_OcamlLexer_not_asterisk_2765 = 2800;
	public static final int ART_L_OcamlLexer_not_asterisk_2766 = 2801;
	public static final int ART_L_OcamlLexer_not_asterisk_2769 = 2802;
	public static final int ART_L_OcamlLexer_not_asterisk_2770 = 2803;
	public static final int ART_L_OcamlLexer_not_asterisk_2773 = 2804;
	public static final int ART_L_OcamlLexer_not_asterisk_2774 = 2805;
	public static final int ART_L_OcamlLexer_not_asterisk_2777 = 2806;
	public static final int ART_L_OcamlLexer_not_asterisk_2778 = 2807;
	public static final int ART_L_OcamlLexer_not_asterisk_2781 = 2808;
	public static final int ART_L_OcamlLexer_not_asterisk_2782 = 2809;
	public static final int ART_L_OcamlLexer_not_asterisk_2785 = 2810;
	public static final int ART_L_OcamlLexer_not_asterisk_2786 = 2811;
	public static final int ART_L_OcamlLexer_not_asterisk_2789 = 2812;
	public static final int ART_L_OcamlLexer_not_asterisk_2790 = 2813;
	public static final int ART_L_OcamlLexer_not_asterisk_2793 = 2814;
	public static final int ART_L_OcamlLexer_not_asterisk_2794 = 2815;
	public static final int ART_L_OcamlLexer_not_asterisk_2797 = 2816;
	public static final int ART_L_OcamlLexer_not_asterisk_2798 = 2817;
	public static final int ART_L_OcamlLexer_not_asterisk_2801 = 2818;
	public static final int ART_L_OcamlLexer_not_asterisk_2802 = 2819;
	public static final int ART_L_OcamlLexer_not_asterisk_2805 = 2820;
	public static final int ART_L_OcamlLexer_not_asterisk_2806 = 2821;
	public static final int ART_L_OcamlLexer_not_asterisk_2809 = 2822;
	public static final int ART_L_OcamlLexer_not_asterisk_2810 = 2823;
	public static final int ART_L_OcamlLexer_not_asterisk_2813 = 2824;
	public static final int ART_L_OcamlLexer_not_asterisk_2814 = 2825;
	public static final int ART_L_OcamlLexer_not_asterisk_2817 = 2826;
	public static final int ART_L_OcamlLexer_not_asterisk_2818 = 2827;
	public static final int ART_L_OcamlLexer_not_asterisk_2821 = 2828;
	public static final int ART_L_OcamlLexer_not_asterisk_2822 = 2829;
	public static final int ART_L_OcamlLexer_not_asterisk_2825 = 2830;
	public static final int ART_L_OcamlLexer_not_asterisk_2826 = 2831;
	public static final int ART_L_OcamlLexer_not_asterisk_2829 = 2832;
	public static final int ART_L_OcamlLexer_not_asterisk_2830 = 2833;
	public static final int ART_L_OcamlLexer_not_asterisk_2833 = 2834;
	public static final int ART_L_OcamlLexer_not_asterisk_2834 = 2835;
	public static final int ART_L_OcamlLexer_not_asterisk_2837 = 2836;
	public static final int ART_L_OcamlLexer_not_asterisk_2838 = 2837;
	public static final int ART_L_OcamlLexer_not_asterisk_2841 = 2838;
	public static final int ART_L_OcamlLexer_not_asterisk_2842 = 2839;
	public static final int ART_L_OcamlLexer_not_asterisk_2845 = 2840;
	public static final int ART_L_OcamlLexer_not_asterisk_2846 = 2841;
	public static final int ART_L_OcamlLexer_not_asterisk_2849 = 2842;
	public static final int ART_L_OcamlLexer_not_asterisk_2850 = 2843;
	public static final int ART_L_OcamlLexer_not_asterisk_2853 = 2844;
	public static final int ART_L_OcamlLexer_not_asterisk_2854 = 2845;
	public static final int ART_L_OcamlLexer_not_asterisk_2857 = 2846;
	public static final int ART_L_OcamlLexer_not_asterisk_2858 = 2847;
	public static final int ART_L_OcamlLexer_not_asterisk_2861 = 2848;
	public static final int ART_L_OcamlLexer_not_asterisk_2862 = 2849;
	public static final int ART_L_OcamlLexer_not_asterisk_2865 = 2850;
	public static final int ART_L_OcamlLexer_not_asterisk_2866 = 2851;
	public static final int ART_L_OcamlLexer_not_asterisk_2869 = 2852;
	public static final int ART_L_OcamlLexer_not_asterisk_2870 = 2853;
	public static final int ART_L_OcamlLexer_not_asterisk_2873 = 2854;
	public static final int ART_L_OcamlLexer_not_asterisk_2874 = 2855;
	public static final int ART_L_OcamlLexer_not_asterisk_2877 = 2856;
	public static final int ART_L_OcamlLexer_not_asterisk_2878 = 2857;
	public static final int ART_L_OcamlLexer_not_asterisk_2881 = 2858;
	public static final int ART_L_OcamlLexer_not_asterisk_2882 = 2859;
	public static final int ART_L_OcamlLexer_not_asterisk_2885 = 2860;
	public static final int ART_L_OcamlLexer_not_asterisk_2886 = 2861;
	public static final int ART_L_OcamlLexer_not_asterisk_2889 = 2862;
	public static final int ART_L_OcamlLexer_not_asterisk_2890 = 2863;
	public static final int ART_L_OcamlLexer_not_asterisk_2893 = 2864;
	public static final int ART_L_OcamlLexer_not_asterisk_2894 = 2865;
	public static final int ART_L_OcamlLexer_not_asterisk_2897 = 2866;
	public static final int ART_L_OcamlLexer_not_asterisk_2898 = 2867;
	public static final int ART_L_OcamlLexer_not_asterisk_2901 = 2868;
	public static final int ART_L_OcamlLexer_not_asterisk_2902 = 2869;
	public static final int ART_L_OcamlLexer_not_asterisk_2905 = 2870;
	public static final int ART_L_OcamlLexer_not_asterisk_2906 = 2871;
	public static final int ART_L_OcamlLexer_not_asterisk_2909 = 2872;
	public static final int ART_L_OcamlLexer_not_asterisk_2910 = 2873;
	public static final int ART_L_OcamlLexer_not_asterisk_2913 = 2874;
	public static final int ART_L_OcamlLexer_not_asterisk_2914 = 2875;
	public static final int ART_L_OcamlLexer_not_asterisk_2917 = 2876;
	public static final int ART_L_OcamlLexer_not_asterisk_2918 = 2877;
	public static final int ART_L_OcamlLexer_not_asterisk_2921 = 2878;
	public static final int ART_L_OcamlLexer_not_asterisk_2922 = 2879;
	public static final int ART_L_OcamlLexer_not_asterisk_2925 = 2880;
	public static final int ART_L_OcamlLexer_not_asterisk_2926 = 2881;
	public static final int ART_L_OcamlLexer_not_asterisk_2929 = 2882;
	public static final int ART_L_OcamlLexer_not_asterisk_2930 = 2883;
	public static final int ART_L_OcamlLexer_not_asterisk_2933 = 2884;
	public static final int ART_L_OcamlLexer_not_asterisk_2934 = 2885;
	public static final int ART_L_OcamlLexer_not_asterisk_2937 = 2886;
	public static final int ART_L_OcamlLexer_not_asterisk_2938 = 2887;
	public static final int ART_L_OcamlLexer_not_asterisk_2941 = 2888;
	public static final int ART_L_OcamlLexer_not_asterisk_2942 = 2889;
	public static final int ART_L_OcamlLexer_not_asterisk_2945 = 2890;
	public static final int ART_L_OcamlLexer_not_asterisk_2946 = 2891;
	public static final int ART_L_OcamlLexer_not_asterisk_2949 = 2892;
	public static final int ART_L_OcamlLexer_not_asterisk_2950 = 2893;
	public static final int ART_L_OcamlLexer_not_asterisk_2953 = 2894;
	public static final int ART_L_OcamlLexer_not_asterisk_2954 = 2895;
	public static final int ART_L_OcamlLexer_not_asterisk_2957 = 2896;
	public static final int ART_L_OcamlLexer_not_asterisk_2958 = 2897;
	public static final int ART_L_OcamlLexer_not_asterisk_2961 = 2898;
	public static final int ART_L_OcamlLexer_not_asterisk_2962 = 2899;
	public static final int ART_L_OcamlLexer_not_asterisk_2965 = 2900;
	public static final int ART_L_OcamlLexer_not_asterisk_2966 = 2901;
	public static final int ART_L_OcamlLexer_not_asterisk_2969 = 2902;
	public static final int ART_L_OcamlLexer_not_asterisk_2970 = 2903;
	public static final int ART_L_OcamlLexer_not_asterisk_2973 = 2904;
	public static final int ART_L_OcamlLexer_not_asterisk_2974 = 2905;
	public static final int ART_L_OcamlLexer_not_asterisk_2977 = 2906;
	public static final int ART_L_OcamlLexer_not_asterisk_2978 = 2907;
	public static final int ART_L_OcamlLexer_not_asterisk_2981 = 2908;
	public static final int ART_L_OcamlLexer_not_asterisk_2982 = 2909;
	public static final int ART_L_OcamlLexer_not_asterisk_2985 = 2910;
	public static final int ART_L_OcamlLexer_not_asterisk_2986 = 2911;
	public static final int ART_L_OcamlLexer_not_asterisk_2989 = 2912;
	public static final int ART_L_OcamlLexer_not_asterisk_2990 = 2913;
	public static final int ART_L_OcamlLexer_not_lparen_2994 = 2914;
	public static final int ART_L_OcamlLexer_not_lparen_2995 = 2915;
	public static final int ART_L_OcamlLexer_not_lparen_2998 = 2916;
	public static final int ART_L_OcamlLexer_not_lparen_2999 = 2917;
	public static final int ART_L_OcamlLexer_not_lparen_3002 = 2918;
	public static final int ART_L_OcamlLexer_not_lparen_3003 = 2919;
	public static final int ART_L_OcamlLexer_not_lparen_3006 = 2920;
	public static final int ART_L_OcamlLexer_not_lparen_3007 = 2921;
	public static final int ART_L_OcamlLexer_not_lparen_3010 = 2922;
	public static final int ART_L_OcamlLexer_not_lparen_3011 = 2923;
	public static final int ART_L_OcamlLexer_not_lparen_3014 = 2924;
	public static final int ART_L_OcamlLexer_not_lparen_3015 = 2925;
	public static final int ART_L_OcamlLexer_not_lparen_3018 = 2926;
	public static final int ART_L_OcamlLexer_not_lparen_3019 = 2927;
	public static final int ART_L_OcamlLexer_not_lparen_3022 = 2928;
	public static final int ART_L_OcamlLexer_not_lparen_3023 = 2929;
	public static final int ART_L_OcamlLexer_not_lparen_3026 = 2930;
	public static final int ART_L_OcamlLexer_not_lparen_3027 = 2931;
	public static final int ART_L_OcamlLexer_not_lparen_3030 = 2932;
	public static final int ART_L_OcamlLexer_not_lparen_3031 = 2933;
	public static final int ART_L_OcamlLexer_not_lparen_3034 = 2934;
	public static final int ART_L_OcamlLexer_not_lparen_3035 = 2935;
	public static final int ART_L_OcamlLexer_not_lparen_3038 = 2936;
	public static final int ART_L_OcamlLexer_not_lparen_3039 = 2937;
	public static final int ART_L_OcamlLexer_not_lparen_3042 = 2938;
	public static final int ART_L_OcamlLexer_not_lparen_3043 = 2939;
	public static final int ART_L_OcamlLexer_not_lparen_3046 = 2940;
	public static final int ART_L_OcamlLexer_not_lparen_3047 = 2941;
	public static final int ART_L_OcamlLexer_not_lparen_3050 = 2942;
	public static final int ART_L_OcamlLexer_not_lparen_3051 = 2943;
	public static final int ART_L_OcamlLexer_not_lparen_3054 = 2944;
	public static final int ART_L_OcamlLexer_not_lparen_3055 = 2945;
	public static final int ART_L_OcamlLexer_not_lparen_3058 = 2946;
	public static final int ART_L_OcamlLexer_not_lparen_3059 = 2947;
	public static final int ART_L_OcamlLexer_not_lparen_3062 = 2948;
	public static final int ART_L_OcamlLexer_not_lparen_3063 = 2949;
	public static final int ART_L_OcamlLexer_not_lparen_3066 = 2950;
	public static final int ART_L_OcamlLexer_not_lparen_3067 = 2951;
	public static final int ART_L_OcamlLexer_not_lparen_3070 = 2952;
	public static final int ART_L_OcamlLexer_not_lparen_3071 = 2953;
	public static final int ART_L_OcamlLexer_not_lparen_3074 = 2954;
	public static final int ART_L_OcamlLexer_not_lparen_3075 = 2955;
	public static final int ART_L_OcamlLexer_not_lparen_3078 = 2956;
	public static final int ART_L_OcamlLexer_not_lparen_3079 = 2957;
	public static final int ART_L_OcamlLexer_not_lparen_3082 = 2958;
	public static final int ART_L_OcamlLexer_not_lparen_3083 = 2959;
	public static final int ART_L_OcamlLexer_not_lparen_3086 = 2960;
	public static final int ART_L_OcamlLexer_not_lparen_3087 = 2961;
	public static final int ART_L_OcamlLexer_not_lparen_3090 = 2962;
	public static final int ART_L_OcamlLexer_not_lparen_3091 = 2963;
	public static final int ART_L_OcamlLexer_not_lparen_3094 = 2964;
	public static final int ART_L_OcamlLexer_not_lparen_3095 = 2965;
	public static final int ART_L_OcamlLexer_not_lparen_3098 = 2966;
	public static final int ART_L_OcamlLexer_not_lparen_3099 = 2967;
	public static final int ART_L_OcamlLexer_not_lparen_3102 = 2968;
	public static final int ART_L_OcamlLexer_not_lparen_3103 = 2969;
	public static final int ART_L_OcamlLexer_not_lparen_3106 = 2970;
	public static final int ART_L_OcamlLexer_not_lparen_3107 = 2971;
	public static final int ART_L_OcamlLexer_not_lparen_3110 = 2972;
	public static final int ART_L_OcamlLexer_not_lparen_3111 = 2973;
	public static final int ART_L_OcamlLexer_not_lparen_3114 = 2974;
	public static final int ART_L_OcamlLexer_not_lparen_3115 = 2975;
	public static final int ART_L_OcamlLexer_not_lparen_3118 = 2976;
	public static final int ART_L_OcamlLexer_not_lparen_3119 = 2977;
	public static final int ART_L_OcamlLexer_not_lparen_3122 = 2978;
	public static final int ART_L_OcamlLexer_not_lparen_3123 = 2979;
	public static final int ART_L_OcamlLexer_not_lparen_3126 = 2980;
	public static final int ART_L_OcamlLexer_not_lparen_3127 = 2981;
	public static final int ART_L_OcamlLexer_not_lparen_3130 = 2982;
	public static final int ART_L_OcamlLexer_not_lparen_3131 = 2983;
	public static final int ART_L_OcamlLexer_not_lparen_3134 = 2984;
	public static final int ART_L_OcamlLexer_not_lparen_3135 = 2985;
	public static final int ART_L_OcamlLexer_not_lparen_3138 = 2986;
	public static final int ART_L_OcamlLexer_not_lparen_3139 = 2987;
	public static final int ART_L_OcamlLexer_not_lparen_3142 = 2988;
	public static final int ART_L_OcamlLexer_not_lparen_3143 = 2989;
	public static final int ART_L_OcamlLexer_not_lparen_3146 = 2990;
	public static final int ART_L_OcamlLexer_not_lparen_3147 = 2991;
	public static final int ART_L_OcamlLexer_not_lparen_3150 = 2992;
	public static final int ART_L_OcamlLexer_not_lparen_3151 = 2993;
	public static final int ART_L_OcamlLexer_not_lparen_3154 = 2994;
	public static final int ART_L_OcamlLexer_not_lparen_3155 = 2995;
	public static final int ART_L_OcamlLexer_not_lparen_3158 = 2996;
	public static final int ART_L_OcamlLexer_not_lparen_3159 = 2997;
	public static final int ART_L_OcamlLexer_not_lparen_3162 = 2998;
	public static final int ART_L_OcamlLexer_not_lparen_3163 = 2999;
	public static final int ART_L_OcamlLexer_not_lparen_3166 = 3000;
	public static final int ART_L_OcamlLexer_not_lparen_3167 = 3001;
	public static final int ART_L_OcamlLexer_not_lparen_3170 = 3002;
	public static final int ART_L_OcamlLexer_not_lparen_3171 = 3003;
	public static final int ART_L_OcamlLexer_not_lparen_3174 = 3004;
	public static final int ART_L_OcamlLexer_not_lparen_3175 = 3005;
	public static final int ART_L_OcamlLexer_not_lparen_3178 = 3006;
	public static final int ART_L_OcamlLexer_not_lparen_3179 = 3007;
	public static final int ART_L_OcamlLexer_not_lparen_3182 = 3008;
	public static final int ART_L_OcamlLexer_not_lparen_3183 = 3009;
	public static final int ART_L_OcamlLexer_not_lparen_3186 = 3010;
	public static final int ART_L_OcamlLexer_not_lparen_3187 = 3011;
	public static final int ART_L_OcamlLexer_not_lparen_3190 = 3012;
	public static final int ART_L_OcamlLexer_not_lparen_3191 = 3013;
	public static final int ART_L_OcamlLexer_not_lparen_3194 = 3014;
	public static final int ART_L_OcamlLexer_not_lparen_3195 = 3015;
	public static final int ART_L_OcamlLexer_not_lparen_3198 = 3016;
	public static final int ART_L_OcamlLexer_not_lparen_3199 = 3017;
	public static final int ART_L_OcamlLexer_not_lparen_3202 = 3018;
	public static final int ART_L_OcamlLexer_not_lparen_3203 = 3019;
	public static final int ART_L_OcamlLexer_not_lparen_3206 = 3020;
	public static final int ART_L_OcamlLexer_not_lparen_3207 = 3021;
	public static final int ART_L_OcamlLexer_not_lparen_3210 = 3022;
	public static final int ART_L_OcamlLexer_not_lparen_3211 = 3023;
	public static final int ART_L_OcamlLexer_not_lparen_3214 = 3024;
	public static final int ART_L_OcamlLexer_not_lparen_3215 = 3025;
	public static final int ART_L_OcamlLexer_not_lparen_3218 = 3026;
	public static final int ART_L_OcamlLexer_not_lparen_3219 = 3027;
	public static final int ART_L_OcamlLexer_not_lparen_3222 = 3028;
	public static final int ART_L_OcamlLexer_not_lparen_3223 = 3029;
	public static final int ART_L_OcamlLexer_not_lparen_3226 = 3030;
	public static final int ART_L_OcamlLexer_not_lparen_3227 = 3031;
	public static final int ART_L_OcamlLexer_not_lparen_3230 = 3032;
	public static final int ART_L_OcamlLexer_not_lparen_3231 = 3033;
	public static final int ART_L_OcamlLexer_not_lparen_3234 = 3034;
	public static final int ART_L_OcamlLexer_not_lparen_3235 = 3035;
	public static final int ART_L_OcamlLexer_not_lparen_3238 = 3036;
	public static final int ART_L_OcamlLexer_not_lparen_3239 = 3037;
	public static final int ART_L_OcamlLexer_not_lparen_3242 = 3038;
	public static final int ART_L_OcamlLexer_not_lparen_3243 = 3039;
	public static final int ART_L_OcamlLexer_not_lparen_3246 = 3040;
	public static final int ART_L_OcamlLexer_not_lparen_3247 = 3041;
	public static final int ART_L_OcamlLexer_not_lparen_3250 = 3042;
	public static final int ART_L_OcamlLexer_not_lparen_3251 = 3043;
	public static final int ART_L_OcamlLexer_not_lparen_3254 = 3044;
	public static final int ART_L_OcamlLexer_not_lparen_3255 = 3045;
	public static final int ART_L_OcamlLexer_not_lparen_3258 = 3046;
	public static final int ART_L_OcamlLexer_not_lparen_3259 = 3047;
	public static final int ART_L_OcamlLexer_not_lparen_3262 = 3048;
	public static final int ART_L_OcamlLexer_not_lparen_3263 = 3049;
	public static final int ART_L_OcamlLexer_not_lparen_3266 = 3050;
	public static final int ART_L_OcamlLexer_not_lparen_3267 = 3051;
	public static final int ART_L_OcamlLexer_not_lparen_3270 = 3052;
	public static final int ART_L_OcamlLexer_not_lparen_3271 = 3053;
	public static final int ART_L_OcamlLexer_not_lparen_3274 = 3054;
	public static final int ART_L_OcamlLexer_not_lparen_3275 = 3055;
	public static final int ART_L_OcamlLexer_not_lparen_3278 = 3056;
	public static final int ART_L_OcamlLexer_not_lparen_3279 = 3057;
	public static final int ART_L_OcamlLexer_not_lparen_3282 = 3058;
	public static final int ART_L_OcamlLexer_not_lparen_3283 = 3059;
	public static final int ART_L_OcamlLexer_not_lparen_3286 = 3060;
	public static final int ART_L_OcamlLexer_not_lparen_3287 = 3061;
	public static final int ART_L_OcamlLexer_not_lparen_3290 = 3062;
	public static final int ART_L_OcamlLexer_not_lparen_3291 = 3063;
	public static final int ART_L_OcamlLexer_not_lparen_3294 = 3064;
	public static final int ART_L_OcamlLexer_not_lparen_3295 = 3065;
	public static final int ART_L_OcamlLexer_not_lparen_3298 = 3066;
	public static final int ART_L_OcamlLexer_not_lparen_3299 = 3067;
	public static final int ART_L_OcamlLexer_not_lparen_3302 = 3068;
	public static final int ART_L_OcamlLexer_not_lparen_3303 = 3069;
	public static final int ART_L_OcamlLexer_not_lparen_3306 = 3070;
	public static final int ART_L_OcamlLexer_not_lparen_3307 = 3071;
	public static final int ART_L_OcamlLexer_not_lparen_3310 = 3072;
	public static final int ART_L_OcamlLexer_not_lparen_3311 = 3073;
	public static final int ART_L_OcamlLexer_not_lparen_3314 = 3074;
	public static final int ART_L_OcamlLexer_not_lparen_3315 = 3075;
	public static final int ART_L_OcamlLexer_not_lparen_3318 = 3076;
	public static final int ART_L_OcamlLexer_not_lparen_3319 = 3077;
	public static final int ART_L_OcamlLexer_not_lparen_3322 = 3078;
	public static final int ART_L_OcamlLexer_not_lparen_3323 = 3079;
	public static final int ART_L_OcamlLexer_not_lparen_3326 = 3080;
	public static final int ART_L_OcamlLexer_not_lparen_3327 = 3081;
	public static final int ART_L_OcamlLexer_not_lparen_3330 = 3082;
	public static final int ART_L_OcamlLexer_not_lparen_3331 = 3083;
	public static final int ART_L_OcamlLexer_not_lparen_3334 = 3084;
	public static final int ART_L_OcamlLexer_not_lparen_3335 = 3085;
	public static final int ART_L_OcamlLexer_not_lparen_3338 = 3086;
	public static final int ART_L_OcamlLexer_not_lparen_3339 = 3087;
	public static final int ART_L_OcamlLexer_not_lparen_3342 = 3088;
	public static final int ART_L_OcamlLexer_not_lparen_3343 = 3089;
	public static final int ART_L_OcamlLexer_not_lparen_3346 = 3090;
	public static final int ART_L_OcamlLexer_not_lparen_3347 = 3091;
	public static final int ART_L_OcamlLexer_not_lparen_3350 = 3092;
	public static final int ART_L_OcamlLexer_not_lparen_3351 = 3093;
	public static final int ART_L_OcamlLexer_not_lparen_3354 = 3094;
	public static final int ART_L_OcamlLexer_not_lparen_3355 = 3095;
	public static final int ART_L_OcamlLexer_not_lparen_3358 = 3096;
	public static final int ART_L_OcamlLexer_not_lparen_3359 = 3097;
	public static final int ART_L_OcamlLexer_not_lparen_3362 = 3098;
	public static final int ART_L_OcamlLexer_not_lparen_3363 = 3099;
	public static final int ART_L_OcamlLexer_not_lparen_3366 = 3100;
	public static final int ART_L_OcamlLexer_not_lparen_3367 = 3101;
	public static final int ART_L_OcamlLexer_not_lparen_3370 = 3102;
	public static final int ART_L_OcamlLexer_not_lparen_3371 = 3103;
	public static final int ART_L_OcamlLexer_not_lparen_3374 = 3104;
	public static final int ART_L_OcamlLexer_not_lparen_3375 = 3105;
	public static final int ART_L_OcamlLexer_not_lparen_3378 = 3106;
	public static final int ART_L_OcamlLexer_not_lparen_3379 = 3107;
	public static final int ART_L_OcamlLexer_not_lparen_3382 = 3108;
	public static final int ART_L_OcamlLexer_not_lparen_3383 = 3109;
	public static final int ART_L_OcamlLexer_not_lparen_3386 = 3110;
	public static final int ART_L_OcamlLexer_not_lparen_3387 = 3111;
	public static final int ART_L_OcamlLexer_not_lparen_3390 = 3112;
	public static final int ART_L_OcamlLexer_not_lparen_3391 = 3113;
	public static final int ART_L_OcamlLexer_not_lparen_3394 = 3114;
	public static final int ART_L_OcamlLexer_not_lparen_3395 = 3115;
	public static final int ART_L_OcamlLexer_not_lparen_3398 = 3116;
	public static final int ART_L_OcamlLexer_not_lparen_3399 = 3117;
	public static final int ART_L_OcamlLexer_not_rparen_3403 = 3118;
	public static final int ART_L_OcamlLexer_not_rparen_3404 = 3119;
	public static final int ART_L_OcamlLexer_not_rparen_3407 = 3120;
	public static final int ART_L_OcamlLexer_not_rparen_3408 = 3121;
	public static final int ART_L_OcamlLexer_not_rparen_3411 = 3122;
	public static final int ART_L_OcamlLexer_not_rparen_3412 = 3123;
	public static final int ART_L_OcamlLexer_not_rparen_3415 = 3124;
	public static final int ART_L_OcamlLexer_not_rparen_3416 = 3125;
	public static final int ART_L_OcamlLexer_not_rparen_3419 = 3126;
	public static final int ART_L_OcamlLexer_not_rparen_3420 = 3127;
	public static final int ART_L_OcamlLexer_not_rparen_3423 = 3128;
	public static final int ART_L_OcamlLexer_not_rparen_3424 = 3129;
	public static final int ART_L_OcamlLexer_not_rparen_3427 = 3130;
	public static final int ART_L_OcamlLexer_not_rparen_3428 = 3131;
	public static final int ART_L_OcamlLexer_not_rparen_3431 = 3132;
	public static final int ART_L_OcamlLexer_not_rparen_3432 = 3133;
	public static final int ART_L_OcamlLexer_not_rparen_3435 = 3134;
	public static final int ART_L_OcamlLexer_not_rparen_3436 = 3135;
	public static final int ART_L_OcamlLexer_not_rparen_3439 = 3136;
	public static final int ART_L_OcamlLexer_not_rparen_3440 = 3137;
	public static final int ART_L_OcamlLexer_not_rparen_3443 = 3138;
	public static final int ART_L_OcamlLexer_not_rparen_3444 = 3139;
	public static final int ART_L_OcamlLexer_not_rparen_3447 = 3140;
	public static final int ART_L_OcamlLexer_not_rparen_3448 = 3141;
	public static final int ART_L_OcamlLexer_not_rparen_3451 = 3142;
	public static final int ART_L_OcamlLexer_not_rparen_3452 = 3143;
	public static final int ART_L_OcamlLexer_not_rparen_3455 = 3144;
	public static final int ART_L_OcamlLexer_not_rparen_3456 = 3145;
	public static final int ART_L_OcamlLexer_not_rparen_3459 = 3146;
	public static final int ART_L_OcamlLexer_not_rparen_3460 = 3147;
	public static final int ART_L_OcamlLexer_not_rparen_3463 = 3148;
	public static final int ART_L_OcamlLexer_not_rparen_3464 = 3149;
	public static final int ART_L_OcamlLexer_not_rparen_3467 = 3150;
	public static final int ART_L_OcamlLexer_not_rparen_3468 = 3151;
	public static final int ART_L_OcamlLexer_not_rparen_3471 = 3152;
	public static final int ART_L_OcamlLexer_not_rparen_3472 = 3153;
	public static final int ART_L_OcamlLexer_not_rparen_3475 = 3154;
	public static final int ART_L_OcamlLexer_not_rparen_3476 = 3155;
	public static final int ART_L_OcamlLexer_not_rparen_3479 = 3156;
	public static final int ART_L_OcamlLexer_not_rparen_3480 = 3157;
	public static final int ART_L_OcamlLexer_not_rparen_3483 = 3158;
	public static final int ART_L_OcamlLexer_not_rparen_3484 = 3159;
	public static final int ART_L_OcamlLexer_not_rparen_3487 = 3160;
	public static final int ART_L_OcamlLexer_not_rparen_3488 = 3161;
	public static final int ART_L_OcamlLexer_not_rparen_3491 = 3162;
	public static final int ART_L_OcamlLexer_not_rparen_3492 = 3163;
	public static final int ART_L_OcamlLexer_not_rparen_3495 = 3164;
	public static final int ART_L_OcamlLexer_not_rparen_3496 = 3165;
	public static final int ART_L_OcamlLexer_not_rparen_3499 = 3166;
	public static final int ART_L_OcamlLexer_not_rparen_3500 = 3167;
	public static final int ART_L_OcamlLexer_not_rparen_3503 = 3168;
	public static final int ART_L_OcamlLexer_not_rparen_3504 = 3169;
	public static final int ART_L_OcamlLexer_not_rparen_3507 = 3170;
	public static final int ART_L_OcamlLexer_not_rparen_3508 = 3171;
	public static final int ART_L_OcamlLexer_not_rparen_3511 = 3172;
	public static final int ART_L_OcamlLexer_not_rparen_3512 = 3173;
	public static final int ART_L_OcamlLexer_not_rparen_3515 = 3174;
	public static final int ART_L_OcamlLexer_not_rparen_3516 = 3175;
	public static final int ART_L_OcamlLexer_not_rparen_3519 = 3176;
	public static final int ART_L_OcamlLexer_not_rparen_3520 = 3177;
	public static final int ART_L_OcamlLexer_not_rparen_3523 = 3178;
	public static final int ART_L_OcamlLexer_not_rparen_3524 = 3179;
	public static final int ART_L_OcamlLexer_not_rparen_3527 = 3180;
	public static final int ART_L_OcamlLexer_not_rparen_3528 = 3181;
	public static final int ART_L_OcamlLexer_not_rparen_3531 = 3182;
	public static final int ART_L_OcamlLexer_not_rparen_3532 = 3183;
	public static final int ART_L_OcamlLexer_not_rparen_3535 = 3184;
	public static final int ART_L_OcamlLexer_not_rparen_3536 = 3185;
	public static final int ART_L_OcamlLexer_not_rparen_3539 = 3186;
	public static final int ART_L_OcamlLexer_not_rparen_3540 = 3187;
	public static final int ART_L_OcamlLexer_not_rparen_3543 = 3188;
	public static final int ART_L_OcamlLexer_not_rparen_3544 = 3189;
	public static final int ART_L_OcamlLexer_not_rparen_3547 = 3190;
	public static final int ART_L_OcamlLexer_not_rparen_3548 = 3191;
	public static final int ART_L_OcamlLexer_not_rparen_3551 = 3192;
	public static final int ART_L_OcamlLexer_not_rparen_3552 = 3193;
	public static final int ART_L_OcamlLexer_not_rparen_3555 = 3194;
	public static final int ART_L_OcamlLexer_not_rparen_3556 = 3195;
	public static final int ART_L_OcamlLexer_not_rparen_3559 = 3196;
	public static final int ART_L_OcamlLexer_not_rparen_3560 = 3197;
	public static final int ART_L_OcamlLexer_not_rparen_3563 = 3198;
	public static final int ART_L_OcamlLexer_not_rparen_3564 = 3199;
	public static final int ART_L_OcamlLexer_not_rparen_3567 = 3200;
	public static final int ART_L_OcamlLexer_not_rparen_3568 = 3201;
	public static final int ART_L_OcamlLexer_not_rparen_3571 = 3202;
	public static final int ART_L_OcamlLexer_not_rparen_3572 = 3203;
	public static final int ART_L_OcamlLexer_not_rparen_3575 = 3204;
	public static final int ART_L_OcamlLexer_not_rparen_3576 = 3205;
	public static final int ART_L_OcamlLexer_not_rparen_3579 = 3206;
	public static final int ART_L_OcamlLexer_not_rparen_3580 = 3207;
	public static final int ART_L_OcamlLexer_not_rparen_3583 = 3208;
	public static final int ART_L_OcamlLexer_not_rparen_3584 = 3209;
	public static final int ART_L_OcamlLexer_not_rparen_3587 = 3210;
	public static final int ART_L_OcamlLexer_not_rparen_3588 = 3211;
	public static final int ART_L_OcamlLexer_not_rparen_3591 = 3212;
	public static final int ART_L_OcamlLexer_not_rparen_3592 = 3213;
	public static final int ART_L_OcamlLexer_not_rparen_3595 = 3214;
	public static final int ART_L_OcamlLexer_not_rparen_3596 = 3215;
	public static final int ART_L_OcamlLexer_not_rparen_3599 = 3216;
	public static final int ART_L_OcamlLexer_not_rparen_3600 = 3217;
	public static final int ART_L_OcamlLexer_not_rparen_3603 = 3218;
	public static final int ART_L_OcamlLexer_not_rparen_3604 = 3219;
	public static final int ART_L_OcamlLexer_not_rparen_3607 = 3220;
	public static final int ART_L_OcamlLexer_not_rparen_3608 = 3221;
	public static final int ART_L_OcamlLexer_not_rparen_3611 = 3222;
	public static final int ART_L_OcamlLexer_not_rparen_3612 = 3223;
	public static final int ART_L_OcamlLexer_not_rparen_3615 = 3224;
	public static final int ART_L_OcamlLexer_not_rparen_3616 = 3225;
	public static final int ART_L_OcamlLexer_not_rparen_3619 = 3226;
	public static final int ART_L_OcamlLexer_not_rparen_3620 = 3227;
	public static final int ART_L_OcamlLexer_not_rparen_3623 = 3228;
	public static final int ART_L_OcamlLexer_not_rparen_3624 = 3229;
	public static final int ART_L_OcamlLexer_not_rparen_3627 = 3230;
	public static final int ART_L_OcamlLexer_not_rparen_3628 = 3231;
	public static final int ART_L_OcamlLexer_not_rparen_3631 = 3232;
	public static final int ART_L_OcamlLexer_not_rparen_3632 = 3233;
	public static final int ART_L_OcamlLexer_not_rparen_3635 = 3234;
	public static final int ART_L_OcamlLexer_not_rparen_3636 = 3235;
	public static final int ART_L_OcamlLexer_not_rparen_3639 = 3236;
	public static final int ART_L_OcamlLexer_not_rparen_3640 = 3237;
	public static final int ART_L_OcamlLexer_not_rparen_3643 = 3238;
	public static final int ART_L_OcamlLexer_not_rparen_3644 = 3239;
	public static final int ART_L_OcamlLexer_not_rparen_3647 = 3240;
	public static final int ART_L_OcamlLexer_not_rparen_3648 = 3241;
	public static final int ART_L_OcamlLexer_not_rparen_3651 = 3242;
	public static final int ART_L_OcamlLexer_not_rparen_3652 = 3243;
	public static final int ART_L_OcamlLexer_not_rparen_3655 = 3244;
	public static final int ART_L_OcamlLexer_not_rparen_3656 = 3245;
	public static final int ART_L_OcamlLexer_not_rparen_3659 = 3246;
	public static final int ART_L_OcamlLexer_not_rparen_3660 = 3247;
	public static final int ART_L_OcamlLexer_not_rparen_3663 = 3248;
	public static final int ART_L_OcamlLexer_not_rparen_3664 = 3249;
	public static final int ART_L_OcamlLexer_not_rparen_3667 = 3250;
	public static final int ART_L_OcamlLexer_not_rparen_3668 = 3251;
	public static final int ART_L_OcamlLexer_not_rparen_3671 = 3252;
	public static final int ART_L_OcamlLexer_not_rparen_3672 = 3253;
	public static final int ART_L_OcamlLexer_not_rparen_3675 = 3254;
	public static final int ART_L_OcamlLexer_not_rparen_3676 = 3255;
	public static final int ART_L_OcamlLexer_not_rparen_3679 = 3256;
	public static final int ART_L_OcamlLexer_not_rparen_3680 = 3257;
	public static final int ART_L_OcamlLexer_not_rparen_3683 = 3258;
	public static final int ART_L_OcamlLexer_not_rparen_3684 = 3259;
	public static final int ART_L_OcamlLexer_not_rparen_3687 = 3260;
	public static final int ART_L_OcamlLexer_not_rparen_3688 = 3261;
	public static final int ART_L_OcamlLexer_not_rparen_3691 = 3262;
	public static final int ART_L_OcamlLexer_not_rparen_3692 = 3263;
	public static final int ART_L_OcamlLexer_not_rparen_3695 = 3264;
	public static final int ART_L_OcamlLexer_not_rparen_3696 = 3265;
	public static final int ART_L_OcamlLexer_not_rparen_3699 = 3266;
	public static final int ART_L_OcamlLexer_not_rparen_3700 = 3267;
	public static final int ART_L_OcamlLexer_not_rparen_3703 = 3268;
	public static final int ART_L_OcamlLexer_not_rparen_3704 = 3269;
	public static final int ART_L_OcamlLexer_not_rparen_3707 = 3270;
	public static final int ART_L_OcamlLexer_not_rparen_3708 = 3271;
	public static final int ART_L_OcamlLexer_not_rparen_3711 = 3272;
	public static final int ART_L_OcamlLexer_not_rparen_3712 = 3273;
	public static final int ART_L_OcamlLexer_not_rparen_3715 = 3274;
	public static final int ART_L_OcamlLexer_not_rparen_3716 = 3275;
	public static final int ART_L_OcamlLexer_not_rparen_3719 = 3276;
	public static final int ART_L_OcamlLexer_not_rparen_3720 = 3277;
	public static final int ART_L_OcamlLexer_not_rparen_3723 = 3278;
	public static final int ART_L_OcamlLexer_not_rparen_3724 = 3279;
	public static final int ART_L_OcamlLexer_not_rparen_3727 = 3280;
	public static final int ART_L_OcamlLexer_not_rparen_3728 = 3281;
	public static final int ART_L_OcamlLexer_not_rparen_3731 = 3282;
	public static final int ART_L_OcamlLexer_not_rparen_3732 = 3283;
	public static final int ART_L_OcamlLexer_not_rparen_3735 = 3284;
	public static final int ART_L_OcamlLexer_not_rparen_3736 = 3285;
	public static final int ART_L_OcamlLexer_not_rparen_3739 = 3286;
	public static final int ART_L_OcamlLexer_not_rparen_3740 = 3287;
	public static final int ART_L_OcamlLexer_not_rparen_3743 = 3288;
	public static final int ART_L_OcamlLexer_not_rparen_3744 = 3289;
	public static final int ART_L_OcamlLexer_not_rparen_3747 = 3290;
	public static final int ART_L_OcamlLexer_not_rparen_3748 = 3291;
	public static final int ART_L_OcamlLexer_not_rparen_3751 = 3292;
	public static final int ART_L_OcamlLexer_not_rparen_3752 = 3293;
	public static final int ART_L_OcamlLexer_not_rparen_3755 = 3294;
	public static final int ART_L_OcamlLexer_not_rparen_3756 = 3295;
	public static final int ART_L_OcamlLexer_not_rparen_3759 = 3296;
	public static final int ART_L_OcamlLexer_not_rparen_3760 = 3297;
	public static final int ART_L_OcamlLexer_not_rparen_3763 = 3298;
	public static final int ART_L_OcamlLexer_not_rparen_3764 = 3299;
	public static final int ART_L_OcamlLexer_not_rparen_3767 = 3300;
	public static final int ART_L_OcamlLexer_not_rparen_3768 = 3301;
	public static final int ART_L_OcamlLexer_not_rparen_3771 = 3302;
	public static final int ART_L_OcamlLexer_not_rparen_3772 = 3303;
	public static final int ART_L_OcamlLexer_not_rparen_3775 = 3304;
	public static final int ART_L_OcamlLexer_not_rparen_3776 = 3305;
	public static final int ART_L_OcamlLexer_not_rparen_3779 = 3306;
	public static final int ART_L_OcamlLexer_not_rparen_3780 = 3307;
	public static final int ART_L_OcamlLexer_not_rparen_3783 = 3308;
	public static final int ART_L_OcamlLexer_not_rparen_3784 = 3309;
	public static final int ART_L_OcamlLexer_not_rparen_3787 = 3310;
	public static final int ART_L_OcamlLexer_not_rparen_3788 = 3311;
	public static final int ART_L_OcamlLexer_not_rparen_3791 = 3312;
	public static final int ART_L_OcamlLexer_not_rparen_3792 = 3313;
	public static final int ART_L_OcamlLexer_not_rparen_3795 = 3314;
	public static final int ART_L_OcamlLexer_not_rparen_3796 = 3315;
	public static final int ART_L_OcamlLexer_not_rparen_3799 = 3316;
	public static final int ART_L_OcamlLexer_not_rparen_3800 = 3317;
	public static final int ART_L_OcamlLexer_not_rparen_3803 = 3318;
	public static final int ART_L_OcamlLexer_not_rparen_3804 = 3319;
	public static final int ART_L_OcamlLexer_not_rparen_3807 = 3320;
	public static final int ART_L_OcamlLexer_not_rparen_3808 = 3321;
	public static final int ART_L_OcamlLexer_integer_literal_3815 = 3322;
	public static final int ART_L_OcamlLexer_integer_literal_3816 = 3323;
	public static final int ART_C_OcamlLexer_integer_literal_3820 = 3324;
	public static final int ART_L_OcamlLexer_integer_literal_3821 = 3325;
	public static final int ART_A_OcamlLexer_integer_literal_3821 = 3326;
	public static final int ART_L_OcamlLexer_integer_literal_3828 = 3327;
	public static final int ART_L_OcamlLexer_integer_literal_3829 = 3328;
	public static final int ART_L_OcamlLexer_integer_literal_3836 = 3329;
	public static final int ART_L_OcamlLexer_integer_literal_3837 = 3330;
	public static final int ART_L_OcamlLexer_integer_literal_3840 = 3331;
	public static final int ART_A_OcamlLexer_integer_literal_3840 = 3332;
	public static final int ART_L_OcamlLexer_integer_literal_3843 = 3333;
	public static final int ART_L_OcamlLexer_integer_literal_3844 = 3334;
	public static final int ART_L_OcamlLexer_integer_literal_3845 = 3335;
	public static final int ART_L_OcamlLexer_integer_literal_3846 = 3336;
	public static final int ART_L_OcamlLexer_integer_literal_3849 = 3337;
	public static final int ART_L_OcamlLexer_integer_literal_3850 = 3338;
	public static final int ART_L_OcamlLexer_integer_literal_3851 = 3339;
	public static final int ART_L_OcamlLexer_integer_literal_3852 = 3340;
	public static final int ART_L_OcamlLexer_integer_literal_3853 = 3341;
	public static final int ART_C_OcamlLexer_integer_literal_3856 = 3342;
	public static final int ART_L_OcamlLexer_integer_literal_3857 = 3343;
	public static final int ART_A_OcamlLexer_integer_literal_3857 = 3344;
	public static final int ART_L_OcamlLexer_integer_literal_3864 = 3345;
	public static final int ART_L_OcamlLexer_integer_literal_3865 = 3346;
	public static final int ART_L_OcamlLexer_integer_literal_3872 = 3347;
	public static final int ART_L_OcamlLexer_integer_literal_3873 = 3348;
	public static final int ART_L_OcamlLexer_integer_literal_3876 = 3349;
	public static final int ART_A_OcamlLexer_integer_literal_3876 = 3350;
	public static final int ART_L_OcamlLexer_integer_literal_3879 = 3351;
	public static final int ART_L_OcamlLexer_integer_literal_3880 = 3352;
	public static final int ART_L_OcamlLexer_integer_literal_3881 = 3353;
	public static final int ART_L_OcamlLexer_integer_literal_3882 = 3354;
	public static final int ART_L_OcamlLexer_integer_literal_3885 = 3355;
	public static final int ART_L_OcamlLexer_integer_literal_3886 = 3356;
	public static final int ART_L_OcamlLexer_integer_literal_3887 = 3357;
	public static final int ART_L_OcamlLexer_integer_literal_3888 = 3358;
	public static final int ART_L_OcamlLexer_integer_literal_3889 = 3359;
	public static final int ART_C_OcamlLexer_integer_literal_3892 = 3360;
	public static final int ART_L_OcamlLexer_integer_literal_3893 = 3361;
	public static final int ART_A_OcamlLexer_integer_literal_3893 = 3362;
	public static final int ART_L_OcamlLexer_integer_literal_3900 = 3363;
	public static final int ART_L_OcamlLexer_integer_literal_3901 = 3364;
	public static final int ART_L_OcamlLexer_integer_literal_3908 = 3365;
	public static final int ART_L_OcamlLexer_integer_literal_3909 = 3366;
	public static final int ART_L_OcamlLexer_integer_literal_3912 = 3367;
	public static final int ART_A_OcamlLexer_integer_literal_3912 = 3368;
	public static final int ART_L_OcamlLexer_integer_literal_3915 = 3369;
	public static final int ART_L_OcamlLexer_integer_literal_3916 = 3370;
	public static final int ART_L_OcamlLexer_integer_literal_3917 = 3371;
	public static final int ART_L_OcamlLexer_integer_literal_3918 = 3372;
	public static final int ART_L_OcamlLexer_integer_literal_3921 = 3373;
	public static final int ART_L_OcamlLexer_integer_literal_3922 = 3374;
	public static final int ART_L_OcamlLexer_integer_literal_3923 = 3375;
	public static final int ART_L_OcamlLexer_integer_literal_3924 = 3376;
	public static final int ART_L_OcamlLexer_integer_literal_3925 = 3377;
	public static final int ART_L_OcamlLexer_integer_literal_3927 = 3378;
	public static final int ART_A_OcamlLexer_integer_literal_3927 = 3379;
	public static final int ART_L_OcamlLexer_integer_literal_3930 = 3380;
	public static final int ART_L_OcamlLexer_integer_literal_3931 = 3381;
	public static final int ART_L_OcamlLexer_integer_literal_3934 = 3382;
	public static final int ART_L_OcamlLexer_integer_literal_3935 = 3383;
	public static final int ART_L_OcamlLexer_integer_literal_3936 = 3384;
	public static final int ART_C_OcamlLexer_integer_literal_3937 = 3385;
	public static final int ART_L_OcamlLexer_integer_literal_3938 = 3386;
	public static final int ART_A_OcamlLexer_integer_literal_3938 = 3387;
	public static final int ART_L_OcamlLexer_integer_literal_3941 = 3388;
	public static final int ART_L_OcamlLexer_integer_literal_3942 = 3389;
	public static final int ART_L_OcamlLexer_integer_literal_3945 = 3390;
	public static final int ART_L_OcamlLexer_integer_literal_3946 = 3391;
	public static final int ART_L_OcamlLexer_integer_literal_3949 = 3392;
	public static final int ART_L_OcamlLexer_integer_literal_3950 = 3393;
	public static final int ART_L_OcamlLexer_dec_digit_3955 = 3394;
	public static final int ART_L_OcamlLexer_dec_digit_3956 = 3395;
	public static final int ART_L_OcamlLexer_dec_digit_3959 = 3396;
	public static final int ART_L_OcamlLexer_dec_digit_3960 = 3397;
	public static final int ART_L_OcamlLexer_dec_digit_3963 = 3398;
	public static final int ART_L_OcamlLexer_dec_digit_3964 = 3399;
	public static final int ART_L_OcamlLexer_dec_digit_3967 = 3400;
	public static final int ART_L_OcamlLexer_dec_digit_3968 = 3401;
	public static final int ART_L_OcamlLexer_dec_digit_3971 = 3402;
	public static final int ART_L_OcamlLexer_dec_digit_3972 = 3403;
	public static final int ART_L_OcamlLexer_dec_digit_3975 = 3404;
	public static final int ART_L_OcamlLexer_dec_digit_3976 = 3405;
	public static final int ART_L_OcamlLexer_dec_digit_3979 = 3406;
	public static final int ART_L_OcamlLexer_dec_digit_3980 = 3407;
	public static final int ART_L_OcamlLexer_dec_digit_3983 = 3408;
	public static final int ART_L_OcamlLexer_dec_digit_3984 = 3409;
	public static final int ART_L_OcamlLexer_dec_digit_3987 = 3410;
	public static final int ART_L_OcamlLexer_dec_digit_3988 = 3411;
	public static final int ART_L_OcamlLexer_dec_digit_3991 = 3412;
	public static final int ART_L_OcamlLexer_dec_digit_3992 = 3413;
	public static final int ART_L_OcamlLexer_oct_digit_3996 = 3414;
	public static final int ART_L_OcamlLexer_oct_digit_3997 = 3415;
	public static final int ART_L_OcamlLexer_oct_digit_4000 = 3416;
	public static final int ART_L_OcamlLexer_oct_digit_4001 = 3417;
	public static final int ART_L_OcamlLexer_oct_digit_4004 = 3418;
	public static final int ART_L_OcamlLexer_oct_digit_4005 = 3419;
	public static final int ART_L_OcamlLexer_oct_digit_4008 = 3420;
	public static final int ART_L_OcamlLexer_oct_digit_4009 = 3421;
	public static final int ART_L_OcamlLexer_oct_digit_4012 = 3422;
	public static final int ART_L_OcamlLexer_oct_digit_4013 = 3423;
	public static final int ART_L_OcamlLexer_oct_digit_4016 = 3424;
	public static final int ART_L_OcamlLexer_oct_digit_4017 = 3425;
	public static final int ART_L_OcamlLexer_oct_digit_4020 = 3426;
	public static final int ART_L_OcamlLexer_oct_digit_4021 = 3427;
	public static final int ART_L_OcamlLexer_oct_digit_4024 = 3428;
	public static final int ART_L_OcamlLexer_oct_digit_4025 = 3429;
	public static final int ART_L_OcamlLexer_hex_digit_4029 = 3430;
	public static final int ART_L_OcamlLexer_hex_digit_4030 = 3431;
	public static final int ART_L_OcamlLexer_hex_digit_4033 = 3432;
	public static final int ART_L_OcamlLexer_hex_digit_4034 = 3433;
	public static final int ART_L_OcamlLexer_hex_digit_4037 = 3434;
	public static final int ART_L_OcamlLexer_hex_digit_4038 = 3435;
	public static final int ART_L_OcamlLexer_hex_digit_4041 = 3436;
	public static final int ART_L_OcamlLexer_hex_digit_4042 = 3437;
	public static final int ART_L_OcamlLexer_hex_digit_4045 = 3438;
	public static final int ART_L_OcamlLexer_hex_digit_4046 = 3439;
	public static final int ART_L_OcamlLexer_hex_digit_4049 = 3440;
	public static final int ART_L_OcamlLexer_hex_digit_4050 = 3441;
	public static final int ART_L_OcamlLexer_hex_digit_4053 = 3442;
	public static final int ART_L_OcamlLexer_hex_digit_4054 = 3443;
	public static final int ART_L_OcamlLexer_hex_digit_4057 = 3444;
	public static final int ART_L_OcamlLexer_hex_digit_4058 = 3445;
	public static final int ART_L_OcamlLexer_hex_digit_4061 = 3446;
	public static final int ART_L_OcamlLexer_hex_digit_4062 = 3447;
	public static final int ART_L_OcamlLexer_hex_digit_4065 = 3448;
	public static final int ART_L_OcamlLexer_hex_digit_4066 = 3449;
	public static final int ART_L_OcamlLexer_hex_digit_4069 = 3450;
	public static final int ART_L_OcamlLexer_hex_digit_4070 = 3451;
	public static final int ART_L_OcamlLexer_hex_digit_4073 = 3452;
	public static final int ART_L_OcamlLexer_hex_digit_4074 = 3453;
	public static final int ART_L_OcamlLexer_hex_digit_4077 = 3454;
	public static final int ART_L_OcamlLexer_hex_digit_4078 = 3455;
	public static final int ART_L_OcamlLexer_hex_digit_4081 = 3456;
	public static final int ART_L_OcamlLexer_hex_digit_4082 = 3457;
	public static final int ART_L_OcamlLexer_hex_digit_4085 = 3458;
	public static final int ART_L_OcamlLexer_hex_digit_4086 = 3459;
	public static final int ART_L_OcamlLexer_hex_digit_4089 = 3460;
	public static final int ART_L_OcamlLexer_hex_digit_4090 = 3461;
	public static final int ART_L_OcamlLexer_hex_digit_4093 = 3462;
	public static final int ART_L_OcamlLexer_hex_digit_4094 = 3463;
	public static final int ART_L_OcamlLexer_hex_digit_4097 = 3464;
	public static final int ART_L_OcamlLexer_hex_digit_4098 = 3465;
	public static final int ART_L_OcamlLexer_hex_digit_4101 = 3466;
	public static final int ART_L_OcamlLexer_hex_digit_4102 = 3467;
	public static final int ART_L_OcamlLexer_hex_digit_4105 = 3468;
	public static final int ART_L_OcamlLexer_hex_digit_4106 = 3469;
	public static final int ART_L_OcamlLexer_hex_digit_4109 = 3470;
	public static final int ART_L_OcamlLexer_hex_digit_4110 = 3471;
	public static final int ART_L_OcamlLexer_hex_digit_4113 = 3472;
	public static final int ART_L_OcamlLexer_hex_digit_4114 = 3473;
	public static final int ART_L_OcamlLexer_float_literal_4121 = 3474;
	public static final int ART_L_OcamlLexer_float_literal_4122 = 3475;
	public static final int ART_C_OcamlLexer_float_literal_4126 = 3476;
	public static final int ART_L_OcamlLexer_float_literal_4127 = 3477;
	public static final int ART_A_OcamlLexer_float_literal_4127 = 3478;
	public static final int ART_L_OcamlLexer_float_literal_4134 = 3479;
	public static final int ART_L_OcamlLexer_float_literal_4135 = 3480;
	public static final int ART_L_OcamlLexer_float_literal_4140 = 3481;
	public static final int ART_L_OcamlLexer_float_literal_4141 = 3482;
	public static final int ART_C_OcamlLexer_float_literal_4142 = 3483;
	public static final int ART_L_OcamlLexer_float_literal_4143 = 3484;
	public static final int ART_A_OcamlLexer_float_literal_4143 = 3485;
	public static final int ART_L_OcamlLexer_float_literal_4150 = 3486;
	public static final int ART_L_OcamlLexer_float_literal_4151 = 3487;
	public static final int ART_L_OcamlLexer_float_literal_4158 = 3488;
	public static final int ART_A_OcamlLexer_float_literal_4158 = 3489;
	public static final int ART_L_OcamlLexer_float_literal_4161 = 3490;
	public static final int ART_L_OcamlLexer_float_literal_4162 = 3491;
	public static final int ART_L_OcamlLexer_float_literal_4165 = 3492;
	public static final int ART_L_OcamlLexer_float_literal_4166 = 3493;
	public static final int ART_L_OcamlLexer_float_literal_4167 = 3494;
	public static final int ART_L_OcamlLexer_float_literal_4169 = 3495;
	public static final int ART_A_OcamlLexer_float_literal_4169 = 3496;
	public static final int ART_L_OcamlLexer_float_literal_4172 = 3497;
	public static final int ART_L_OcamlLexer_float_literal_4173 = 3498;
	public static final int ART_L_OcamlLexer_float_literal_4176 = 3499;
	public static final int ART_L_OcamlLexer_float_literal_4177 = 3500;
	public static final int ART_C_OcamlLexer_float_literal_4181 = 3501;
	public static final int ART_L_OcamlLexer_float_literal_4182 = 3502;
	public static final int ART_A_OcamlLexer_float_literal_4182 = 3503;
	public static final int ART_L_OcamlLexer_float_literal_4189 = 3504;
	public static final int ART_L_OcamlLexer_float_literal_4190 = 3505;
	public static final int ART_L_OcamlLexer_char_literal_4196 = 3506;
	public static final int ART_L_OcamlLexer_char_literal_4197 = 3507;
	public static final int ART_L_OcamlLexer_char_literal_4200 = 3508;
	public static final int ART_L_OcamlLexer_char_literal_4201 = 3509;
	public static final int ART_L_OcamlLexer_char_literal_4204 = 3510;
	public static final int ART_L_OcamlLexer_char_literal_4205 = 3511;
	public static final int ART_L_OcamlLexer_char_literal_4208 = 3512;
	public static final int ART_L_OcamlLexer_char_literal_4209 = 3513;
	public static final int ART_L_OcamlLexer_regular_char_4213 = 3514;
	public static final int ART_L_OcamlLexer_regular_char_4214 = 3515;
	public static final int ART_L_OcamlLexer_regular_char_4217 = 3516;
	public static final int ART_L_OcamlLexer_regular_char_4218 = 3517;
	public static final int ART_L_OcamlLexer_regular_char_4221 = 3518;
	public static final int ART_L_OcamlLexer_regular_char_4222 = 3519;
	public static final int ART_L_OcamlLexer_regular_char_4225 = 3520;
	public static final int ART_L_OcamlLexer_regular_char_4226 = 3521;
	public static final int ART_L_OcamlLexer_regular_char_4229 = 3522;
	public static final int ART_L_OcamlLexer_regular_char_4230 = 3523;
	public static final int ART_L_OcamlLexer_regular_char_4233 = 3524;
	public static final int ART_L_OcamlLexer_regular_char_4234 = 3525;
	public static final int ART_L_OcamlLexer_regular_char_4237 = 3526;
	public static final int ART_L_OcamlLexer_regular_char_4238 = 3527;
	public static final int ART_L_OcamlLexer_regular_char_4241 = 3528;
	public static final int ART_L_OcamlLexer_regular_char_4242 = 3529;
	public static final int ART_L_OcamlLexer_regular_char_4245 = 3530;
	public static final int ART_L_OcamlLexer_regular_char_4246 = 3531;
	public static final int ART_L_OcamlLexer_regular_char_4249 = 3532;
	public static final int ART_L_OcamlLexer_regular_char_4250 = 3533;
	public static final int ART_L_OcamlLexer_regular_char_4253 = 3534;
	public static final int ART_L_OcamlLexer_regular_char_4254 = 3535;
	public static final int ART_L_OcamlLexer_regular_char_4257 = 3536;
	public static final int ART_L_OcamlLexer_regular_char_4258 = 3537;
	public static final int ART_L_OcamlLexer_regular_char_4261 = 3538;
	public static final int ART_L_OcamlLexer_regular_char_4262 = 3539;
	public static final int ART_L_OcamlLexer_regular_char_4265 = 3540;
	public static final int ART_L_OcamlLexer_regular_char_4266 = 3541;
	public static final int ART_L_OcamlLexer_regular_char_4269 = 3542;
	public static final int ART_L_OcamlLexer_regular_char_4270 = 3543;
	public static final int ART_L_OcamlLexer_regular_char_4273 = 3544;
	public static final int ART_L_OcamlLexer_regular_char_4274 = 3545;
	public static final int ART_L_OcamlLexer_regular_char_4277 = 3546;
	public static final int ART_L_OcamlLexer_regular_char_4278 = 3547;
	public static final int ART_L_OcamlLexer_regular_char_4281 = 3548;
	public static final int ART_L_OcamlLexer_regular_char_4282 = 3549;
	public static final int ART_L_OcamlLexer_regular_char_4285 = 3550;
	public static final int ART_L_OcamlLexer_regular_char_4286 = 3551;
	public static final int ART_L_OcamlLexer_regular_char_4289 = 3552;
	public static final int ART_L_OcamlLexer_regular_char_4290 = 3553;
	public static final int ART_L_OcamlLexer_regular_char_4293 = 3554;
	public static final int ART_L_OcamlLexer_regular_char_4294 = 3555;
	public static final int ART_L_OcamlLexer_regular_char_4297 = 3556;
	public static final int ART_L_OcamlLexer_regular_char_4298 = 3557;
	public static final int ART_L_OcamlLexer_regular_char_4301 = 3558;
	public static final int ART_L_OcamlLexer_regular_char_4302 = 3559;
	public static final int ART_L_OcamlLexer_regular_char_4305 = 3560;
	public static final int ART_L_OcamlLexer_regular_char_4306 = 3561;
	public static final int ART_L_OcamlLexer_regular_char_4309 = 3562;
	public static final int ART_L_OcamlLexer_regular_char_4310 = 3563;
	public static final int ART_L_OcamlLexer_regular_char_4313 = 3564;
	public static final int ART_L_OcamlLexer_regular_char_4314 = 3565;
	public static final int ART_L_OcamlLexer_regular_char_4317 = 3566;
	public static final int ART_L_OcamlLexer_regular_char_4318 = 3567;
	public static final int ART_L_OcamlLexer_regular_char_4321 = 3568;
	public static final int ART_L_OcamlLexer_regular_char_4322 = 3569;
	public static final int ART_L_OcamlLexer_regular_char_4325 = 3570;
	public static final int ART_L_OcamlLexer_regular_char_4326 = 3571;
	public static final int ART_L_OcamlLexer_regular_char_4329 = 3572;
	public static final int ART_L_OcamlLexer_regular_char_4330 = 3573;
	public static final int ART_L_OcamlLexer_regular_char_4333 = 3574;
	public static final int ART_L_OcamlLexer_regular_char_4334 = 3575;
	public static final int ART_L_OcamlLexer_regular_char_4337 = 3576;
	public static final int ART_L_OcamlLexer_regular_char_4338 = 3577;
	public static final int ART_L_OcamlLexer_regular_char_4341 = 3578;
	public static final int ART_L_OcamlLexer_regular_char_4342 = 3579;
	public static final int ART_L_OcamlLexer_regular_char_4345 = 3580;
	public static final int ART_L_OcamlLexer_regular_char_4346 = 3581;
	public static final int ART_L_OcamlLexer_regular_char_4349 = 3582;
	public static final int ART_L_OcamlLexer_regular_char_4350 = 3583;
	public static final int ART_L_OcamlLexer_regular_char_4353 = 3584;
	public static final int ART_L_OcamlLexer_regular_char_4354 = 3585;
	public static final int ART_L_OcamlLexer_regular_char_4357 = 3586;
	public static final int ART_L_OcamlLexer_regular_char_4358 = 3587;
	public static final int ART_L_OcamlLexer_regular_char_4361 = 3588;
	public static final int ART_L_OcamlLexer_regular_char_4362 = 3589;
	public static final int ART_L_OcamlLexer_regular_char_4365 = 3590;
	public static final int ART_L_OcamlLexer_regular_char_4366 = 3591;
	public static final int ART_L_OcamlLexer_regular_char_4369 = 3592;
	public static final int ART_L_OcamlLexer_regular_char_4370 = 3593;
	public static final int ART_L_OcamlLexer_regular_char_4373 = 3594;
	public static final int ART_L_OcamlLexer_regular_char_4374 = 3595;
	public static final int ART_L_OcamlLexer_regular_char_4377 = 3596;
	public static final int ART_L_OcamlLexer_regular_char_4378 = 3597;
	public static final int ART_L_OcamlLexer_regular_char_4381 = 3598;
	public static final int ART_L_OcamlLexer_regular_char_4382 = 3599;
	public static final int ART_L_OcamlLexer_regular_char_4385 = 3600;
	public static final int ART_L_OcamlLexer_regular_char_4386 = 3601;
	public static final int ART_L_OcamlLexer_regular_char_4389 = 3602;
	public static final int ART_L_OcamlLexer_regular_char_4390 = 3603;
	public static final int ART_L_OcamlLexer_regular_char_4393 = 3604;
	public static final int ART_L_OcamlLexer_regular_char_4394 = 3605;
	public static final int ART_L_OcamlLexer_regular_char_4397 = 3606;
	public static final int ART_L_OcamlLexer_regular_char_4398 = 3607;
	public static final int ART_L_OcamlLexer_regular_char_4401 = 3608;
	public static final int ART_L_OcamlLexer_regular_char_4402 = 3609;
	public static final int ART_L_OcamlLexer_regular_char_4405 = 3610;
	public static final int ART_L_OcamlLexer_regular_char_4406 = 3611;
	public static final int ART_L_OcamlLexer_regular_char_4409 = 3612;
	public static final int ART_L_OcamlLexer_regular_char_4410 = 3613;
	public static final int ART_L_OcamlLexer_regular_char_4413 = 3614;
	public static final int ART_L_OcamlLexer_regular_char_4414 = 3615;
	public static final int ART_L_OcamlLexer_regular_char_4417 = 3616;
	public static final int ART_L_OcamlLexer_regular_char_4418 = 3617;
	public static final int ART_L_OcamlLexer_regular_char_4421 = 3618;
	public static final int ART_L_OcamlLexer_regular_char_4422 = 3619;
	public static final int ART_L_OcamlLexer_regular_char_4425 = 3620;
	public static final int ART_L_OcamlLexer_regular_char_4426 = 3621;
	public static final int ART_L_OcamlLexer_regular_char_4429 = 3622;
	public static final int ART_L_OcamlLexer_regular_char_4430 = 3623;
	public static final int ART_L_OcamlLexer_regular_char_4433 = 3624;
	public static final int ART_L_OcamlLexer_regular_char_4434 = 3625;
	public static final int ART_L_OcamlLexer_regular_char_4437 = 3626;
	public static final int ART_L_OcamlLexer_regular_char_4438 = 3627;
	public static final int ART_L_OcamlLexer_regular_char_4441 = 3628;
	public static final int ART_L_OcamlLexer_regular_char_4442 = 3629;
	public static final int ART_L_OcamlLexer_regular_char_4445 = 3630;
	public static final int ART_L_OcamlLexer_regular_char_4446 = 3631;
	public static final int ART_L_OcamlLexer_regular_char_4449 = 3632;
	public static final int ART_L_OcamlLexer_regular_char_4450 = 3633;
	public static final int ART_L_OcamlLexer_regular_char_4453 = 3634;
	public static final int ART_L_OcamlLexer_regular_char_4454 = 3635;
	public static final int ART_L_OcamlLexer_regular_char_4457 = 3636;
	public static final int ART_L_OcamlLexer_regular_char_4458 = 3637;
	public static final int ART_L_OcamlLexer_regular_char_4461 = 3638;
	public static final int ART_L_OcamlLexer_regular_char_4462 = 3639;
	public static final int ART_L_OcamlLexer_regular_char_4465 = 3640;
	public static final int ART_L_OcamlLexer_regular_char_4466 = 3641;
	public static final int ART_L_OcamlLexer_regular_char_4469 = 3642;
	public static final int ART_L_OcamlLexer_regular_char_4470 = 3643;
	public static final int ART_L_OcamlLexer_regular_char_4473 = 3644;
	public static final int ART_L_OcamlLexer_regular_char_4474 = 3645;
	public static final int ART_L_OcamlLexer_regular_char_4477 = 3646;
	public static final int ART_L_OcamlLexer_regular_char_4478 = 3647;
	public static final int ART_L_OcamlLexer_regular_char_4481 = 3648;
	public static final int ART_L_OcamlLexer_regular_char_4482 = 3649;
	public static final int ART_L_OcamlLexer_regular_char_4485 = 3650;
	public static final int ART_L_OcamlLexer_regular_char_4486 = 3651;
	public static final int ART_L_OcamlLexer_regular_char_4489 = 3652;
	public static final int ART_L_OcamlLexer_regular_char_4490 = 3653;
	public static final int ART_L_OcamlLexer_regular_char_4493 = 3654;
	public static final int ART_L_OcamlLexer_regular_char_4494 = 3655;
	public static final int ART_L_OcamlLexer_regular_char_4497 = 3656;
	public static final int ART_L_OcamlLexer_regular_char_4498 = 3657;
	public static final int ART_L_OcamlLexer_regular_char_4501 = 3658;
	public static final int ART_L_OcamlLexer_regular_char_4502 = 3659;
	public static final int ART_L_OcamlLexer_regular_char_4505 = 3660;
	public static final int ART_L_OcamlLexer_regular_char_4506 = 3661;
	public static final int ART_L_OcamlLexer_regular_char_4509 = 3662;
	public static final int ART_L_OcamlLexer_regular_char_4510 = 3663;
	public static final int ART_L_OcamlLexer_regular_char_4513 = 3664;
	public static final int ART_L_OcamlLexer_regular_char_4514 = 3665;
	public static final int ART_L_OcamlLexer_regular_char_4517 = 3666;
	public static final int ART_L_OcamlLexer_regular_char_4518 = 3667;
	public static final int ART_L_OcamlLexer_regular_char_4521 = 3668;
	public static final int ART_L_OcamlLexer_regular_char_4522 = 3669;
	public static final int ART_L_OcamlLexer_regular_char_4525 = 3670;
	public static final int ART_L_OcamlLexer_regular_char_4526 = 3671;
	public static final int ART_L_OcamlLexer_regular_char_4529 = 3672;
	public static final int ART_L_OcamlLexer_regular_char_4530 = 3673;
	public static final int ART_L_OcamlLexer_regular_char_4533 = 3674;
	public static final int ART_L_OcamlLexer_regular_char_4534 = 3675;
	public static final int ART_L_OcamlLexer_regular_char_4537 = 3676;
	public static final int ART_L_OcamlLexer_regular_char_4538 = 3677;
	public static final int ART_L_OcamlLexer_regular_char_4541 = 3678;
	public static final int ART_L_OcamlLexer_regular_char_4542 = 3679;
	public static final int ART_L_OcamlLexer_regular_char_4545 = 3680;
	public static final int ART_L_OcamlLexer_regular_char_4546 = 3681;
	public static final int ART_L_OcamlLexer_regular_char_4549 = 3682;
	public static final int ART_L_OcamlLexer_regular_char_4550 = 3683;
	public static final int ART_L_OcamlLexer_regular_char_4553 = 3684;
	public static final int ART_L_OcamlLexer_regular_char_4554 = 3685;
	public static final int ART_L_OcamlLexer_regular_char_4557 = 3686;
	public static final int ART_L_OcamlLexer_regular_char_4558 = 3687;
	public static final int ART_L_OcamlLexer_regular_char_4561 = 3688;
	public static final int ART_L_OcamlLexer_regular_char_4562 = 3689;
	public static final int ART_L_OcamlLexer_regular_char_4565 = 3690;
	public static final int ART_L_OcamlLexer_regular_char_4566 = 3691;
	public static final int ART_L_OcamlLexer_regular_char_4569 = 3692;
	public static final int ART_L_OcamlLexer_regular_char_4570 = 3693;
	public static final int ART_L_OcamlLexer_regular_char_4573 = 3694;
	public static final int ART_L_OcamlLexer_regular_char_4574 = 3695;
	public static final int ART_L_OcamlLexer_regular_char_4577 = 3696;
	public static final int ART_L_OcamlLexer_regular_char_4578 = 3697;
	public static final int ART_L_OcamlLexer_regular_char_4581 = 3698;
	public static final int ART_L_OcamlLexer_regular_char_4582 = 3699;
	public static final int ART_L_OcamlLexer_regular_char_4585 = 3700;
	public static final int ART_L_OcamlLexer_regular_char_4586 = 3701;
	public static final int ART_L_OcamlLexer_regular_char_4589 = 3702;
	public static final int ART_L_OcamlLexer_regular_char_4590 = 3703;
	public static final int ART_L_OcamlLexer_regular_char_4593 = 3704;
	public static final int ART_L_OcamlLexer_regular_char_4594 = 3705;
	public static final int ART_L_OcamlLexer_regular_char_4597 = 3706;
	public static final int ART_L_OcamlLexer_regular_char_4598 = 3707;
	public static final int ART_L_OcamlLexer_regular_char_4601 = 3708;
	public static final int ART_L_OcamlLexer_regular_char_4602 = 3709;
	public static final int ART_L_OcamlLexer_regular_char_4605 = 3710;
	public static final int ART_L_OcamlLexer_regular_char_4606 = 3711;
	public static final int ART_L_OcamlLexer_escape_sequence_4610 = 3712;
	public static final int ART_L_OcamlLexer_escape_sequence_4611 = 3713;
	public static final int ART_L_OcamlLexer_escape_sequence_4613 = 3714;
	public static final int ART_A_OcamlLexer_escape_sequence_4613 = 3715;
	public static final int ART_L_OcamlLexer_escape_sequence_4616 = 3716;
	public static final int ART_L_OcamlLexer_escape_sequence_4617 = 3717;
	public static final int ART_L_OcamlLexer_escape_sequence_4620 = 3718;
	public static final int ART_L_OcamlLexer_escape_sequence_4621 = 3719;
	public static final int ART_L_OcamlLexer_escape_sequence_4624 = 3720;
	public static final int ART_L_OcamlLexer_escape_sequence_4625 = 3721;
	public static final int ART_L_OcamlLexer_escape_sequence_4628 = 3722;
	public static final int ART_L_OcamlLexer_escape_sequence_4629 = 3723;
	public static final int ART_L_OcamlLexer_escape_sequence_4632 = 3724;
	public static final int ART_L_OcamlLexer_escape_sequence_4633 = 3725;
	public static final int ART_L_OcamlLexer_escape_sequence_4636 = 3726;
	public static final int ART_L_OcamlLexer_escape_sequence_4637 = 3727;
	public static final int ART_L_OcamlLexer_escape_sequence_4640 = 3728;
	public static final int ART_L_OcamlLexer_escape_sequence_4641 = 3729;
	public static final int ART_L_OcamlLexer_escape_sequence_4644 = 3730;
	public static final int ART_L_OcamlLexer_escape_sequence_4645 = 3731;
	public static final int ART_L_OcamlLexer_escape_sequence_4646 = 3732;
	public static final int ART_L_OcamlLexer_escape_sequence_4649 = 3733;
	public static final int ART_L_OcamlLexer_escape_sequence_4650 = 3734;
	public static final int ART_L_OcamlLexer_escape_sequence_4659 = 3735;
	public static final int ART_L_OcamlLexer_escape_sequence_4660 = 3736;
	public static final int ART_L_OcamlLexer_escape_sequence_4661 = 3737;
	public static final int ART_L_OcamlLexer_escape_sequence_4662 = 3738;
	public static final int ART_L_OcamlLexer_string_literal_4670 = 3739;
	public static final int ART_L_OcamlLexer_string_literal_4671 = 3740;
	public static final int ART_C_OcamlLexer_string_literal_4672 = 3741;
	public static final int ART_L_OcamlLexer_string_literal_4678 = 3742;
	public static final int ART_L_OcamlLexer_string_literal_4679 = 3743;
	public static final int ART_L_OcamlLexer_string_character_4691 = 3744;
	public static final int ART_L_OcamlLexer_string_character_4692 = 3745;
	public static final int ART_L_OcamlLexer_string_character_4693 = 3746;
	public static final int ART_L_OcamlLexer_string_character_4694 = 3747;
	public static final int ART_C_OcamlLexer_string_character_4695 = 3748;
	public static final int ART_L_OcamlLexer_string_character_4696 = 3749;
	public static final int ART_A_OcamlLexer_string_character_4696 = 3750;
	public static final int ART_L_OcamlLexer_string_character_4699 = 3751;
	public static final int ART_L_OcamlLexer_string_character_4700 = 3752;
	public static final int ART_L_OcamlLexer_string_character_4703 = 3753;
	public static final int ART_L_OcamlLexer_string_character_4704 = 3754;
	public static final int ART_L_OcamlLexer_regular_string_char_4709 = 3755;
	public static final int ART_L_OcamlLexer_regular_string_char_4710 = 3756;
	public static final int ART_L_OcamlLexer_regular_string_char_4713 = 3757;
	public static final int ART_L_OcamlLexer_regular_string_char_4714 = 3758;
	public static final int ART_L_OcamlLexer_regular_string_char_4717 = 3759;
	public static final int ART_L_OcamlLexer_regular_string_char_4718 = 3760;
	public static final int ART_L_OcamlLexer_regular_string_char_4721 = 3761;
	public static final int ART_L_OcamlLexer_regular_string_char_4722 = 3762;
	public static final int ART_L_OcamlLexer_regular_string_char_4725 = 3763;
	public static final int ART_L_OcamlLexer_regular_string_char_4726 = 3764;
	public static final int ART_L_OcamlLexer_regular_string_char_4729 = 3765;
	public static final int ART_L_OcamlLexer_regular_string_char_4730 = 3766;
	public static final int ART_L_OcamlLexer_regular_string_char_4733 = 3767;
	public static final int ART_L_OcamlLexer_regular_string_char_4734 = 3768;
	public static final int ART_L_OcamlLexer_regular_string_char_4737 = 3769;
	public static final int ART_L_OcamlLexer_regular_string_char_4738 = 3770;
	public static final int ART_L_OcamlLexer_regular_string_char_4741 = 3771;
	public static final int ART_L_OcamlLexer_regular_string_char_4742 = 3772;
	public static final int ART_L_OcamlLexer_regular_string_char_4745 = 3773;
	public static final int ART_L_OcamlLexer_regular_string_char_4746 = 3774;
	public static final int ART_L_OcamlLexer_regular_string_char_4749 = 3775;
	public static final int ART_L_OcamlLexer_regular_string_char_4750 = 3776;
	public static final int ART_L_OcamlLexer_regular_string_char_4753 = 3777;
	public static final int ART_L_OcamlLexer_regular_string_char_4754 = 3778;
	public static final int ART_L_OcamlLexer_regular_string_char_4757 = 3779;
	public static final int ART_L_OcamlLexer_regular_string_char_4758 = 3780;
	public static final int ART_L_OcamlLexer_regular_string_char_4761 = 3781;
	public static final int ART_L_OcamlLexer_regular_string_char_4762 = 3782;
	public static final int ART_L_OcamlLexer_regular_string_char_4765 = 3783;
	public static final int ART_L_OcamlLexer_regular_string_char_4766 = 3784;
	public static final int ART_L_OcamlLexer_regular_string_char_4769 = 3785;
	public static final int ART_L_OcamlLexer_regular_string_char_4770 = 3786;
	public static final int ART_L_OcamlLexer_regular_string_char_4773 = 3787;
	public static final int ART_L_OcamlLexer_regular_string_char_4774 = 3788;
	public static final int ART_L_OcamlLexer_regular_string_char_4777 = 3789;
	public static final int ART_L_OcamlLexer_regular_string_char_4778 = 3790;
	public static final int ART_L_OcamlLexer_regular_string_char_4781 = 3791;
	public static final int ART_L_OcamlLexer_regular_string_char_4782 = 3792;
	public static final int ART_L_OcamlLexer_regular_string_char_4785 = 3793;
	public static final int ART_L_OcamlLexer_regular_string_char_4786 = 3794;
	public static final int ART_L_OcamlLexer_regular_string_char_4789 = 3795;
	public static final int ART_L_OcamlLexer_regular_string_char_4790 = 3796;
	public static final int ART_L_OcamlLexer_regular_string_char_4793 = 3797;
	public static final int ART_L_OcamlLexer_regular_string_char_4794 = 3798;
	public static final int ART_L_OcamlLexer_regular_string_char_4797 = 3799;
	public static final int ART_L_OcamlLexer_regular_string_char_4798 = 3800;
	public static final int ART_L_OcamlLexer_regular_string_char_4801 = 3801;
	public static final int ART_L_OcamlLexer_regular_string_char_4802 = 3802;
	public static final int ART_L_OcamlLexer_regular_string_char_4805 = 3803;
	public static final int ART_L_OcamlLexer_regular_string_char_4806 = 3804;
	public static final int ART_L_OcamlLexer_regular_string_char_4809 = 3805;
	public static final int ART_L_OcamlLexer_regular_string_char_4810 = 3806;
	public static final int ART_L_OcamlLexer_regular_string_char_4813 = 3807;
	public static final int ART_L_OcamlLexer_regular_string_char_4814 = 3808;
	public static final int ART_L_OcamlLexer_regular_string_char_4817 = 3809;
	public static final int ART_L_OcamlLexer_regular_string_char_4818 = 3810;
	public static final int ART_L_OcamlLexer_regular_string_char_4821 = 3811;
	public static final int ART_L_OcamlLexer_regular_string_char_4822 = 3812;
	public static final int ART_L_OcamlLexer_regular_string_char_4825 = 3813;
	public static final int ART_L_OcamlLexer_regular_string_char_4826 = 3814;
	public static final int ART_L_OcamlLexer_regular_string_char_4829 = 3815;
	public static final int ART_L_OcamlLexer_regular_string_char_4830 = 3816;
	public static final int ART_L_OcamlLexer_regular_string_char_4833 = 3817;
	public static final int ART_L_OcamlLexer_regular_string_char_4834 = 3818;
	public static final int ART_L_OcamlLexer_regular_string_char_4837 = 3819;
	public static final int ART_L_OcamlLexer_regular_string_char_4838 = 3820;
	public static final int ART_L_OcamlLexer_regular_string_char_4841 = 3821;
	public static final int ART_L_OcamlLexer_regular_string_char_4842 = 3822;
	public static final int ART_L_OcamlLexer_regular_string_char_4845 = 3823;
	public static final int ART_L_OcamlLexer_regular_string_char_4846 = 3824;
	public static final int ART_L_OcamlLexer_regular_string_char_4849 = 3825;
	public static final int ART_L_OcamlLexer_regular_string_char_4850 = 3826;
	public static final int ART_L_OcamlLexer_regular_string_char_4853 = 3827;
	public static final int ART_L_OcamlLexer_regular_string_char_4854 = 3828;
	public static final int ART_L_OcamlLexer_regular_string_char_4857 = 3829;
	public static final int ART_L_OcamlLexer_regular_string_char_4858 = 3830;
	public static final int ART_L_OcamlLexer_regular_string_char_4861 = 3831;
	public static final int ART_L_OcamlLexer_regular_string_char_4862 = 3832;
	public static final int ART_L_OcamlLexer_regular_string_char_4865 = 3833;
	public static final int ART_L_OcamlLexer_regular_string_char_4866 = 3834;
	public static final int ART_L_OcamlLexer_regular_string_char_4869 = 3835;
	public static final int ART_L_OcamlLexer_regular_string_char_4870 = 3836;
	public static final int ART_L_OcamlLexer_regular_string_char_4873 = 3837;
	public static final int ART_L_OcamlLexer_regular_string_char_4874 = 3838;
	public static final int ART_L_OcamlLexer_regular_string_char_4877 = 3839;
	public static final int ART_L_OcamlLexer_regular_string_char_4878 = 3840;
	public static final int ART_L_OcamlLexer_regular_string_char_4881 = 3841;
	public static final int ART_L_OcamlLexer_regular_string_char_4882 = 3842;
	public static final int ART_L_OcamlLexer_regular_string_char_4885 = 3843;
	public static final int ART_L_OcamlLexer_regular_string_char_4886 = 3844;
	public static final int ART_L_OcamlLexer_regular_string_char_4889 = 3845;
	public static final int ART_L_OcamlLexer_regular_string_char_4890 = 3846;
	public static final int ART_L_OcamlLexer_regular_string_char_4893 = 3847;
	public static final int ART_L_OcamlLexer_regular_string_char_4894 = 3848;
	public static final int ART_L_OcamlLexer_regular_string_char_4897 = 3849;
	public static final int ART_L_OcamlLexer_regular_string_char_4898 = 3850;
	public static final int ART_L_OcamlLexer_regular_string_char_4901 = 3851;
	public static final int ART_L_OcamlLexer_regular_string_char_4902 = 3852;
	public static final int ART_L_OcamlLexer_regular_string_char_4905 = 3853;
	public static final int ART_L_OcamlLexer_regular_string_char_4906 = 3854;
	public static final int ART_L_OcamlLexer_regular_string_char_4909 = 3855;
	public static final int ART_L_OcamlLexer_regular_string_char_4910 = 3856;
	public static final int ART_L_OcamlLexer_regular_string_char_4913 = 3857;
	public static final int ART_L_OcamlLexer_regular_string_char_4914 = 3858;
	public static final int ART_L_OcamlLexer_regular_string_char_4917 = 3859;
	public static final int ART_L_OcamlLexer_regular_string_char_4918 = 3860;
	public static final int ART_L_OcamlLexer_regular_string_char_4921 = 3861;
	public static final int ART_L_OcamlLexer_regular_string_char_4922 = 3862;
	public static final int ART_L_OcamlLexer_regular_string_char_4925 = 3863;
	public static final int ART_L_OcamlLexer_regular_string_char_4926 = 3864;
	public static final int ART_L_OcamlLexer_regular_string_char_4929 = 3865;
	public static final int ART_L_OcamlLexer_regular_string_char_4930 = 3866;
	public static final int ART_L_OcamlLexer_regular_string_char_4933 = 3867;
	public static final int ART_L_OcamlLexer_regular_string_char_4934 = 3868;
	public static final int ART_L_OcamlLexer_regular_string_char_4937 = 3869;
	public static final int ART_L_OcamlLexer_regular_string_char_4938 = 3870;
	public static final int ART_L_OcamlLexer_regular_string_char_4941 = 3871;
	public static final int ART_L_OcamlLexer_regular_string_char_4942 = 3872;
	public static final int ART_L_OcamlLexer_regular_string_char_4945 = 3873;
	public static final int ART_L_OcamlLexer_regular_string_char_4946 = 3874;
	public static final int ART_L_OcamlLexer_regular_string_char_4949 = 3875;
	public static final int ART_L_OcamlLexer_regular_string_char_4950 = 3876;
	public static final int ART_L_OcamlLexer_regular_string_char_4953 = 3877;
	public static final int ART_L_OcamlLexer_regular_string_char_4954 = 3878;
	public static final int ART_L_OcamlLexer_regular_string_char_4957 = 3879;
	public static final int ART_L_OcamlLexer_regular_string_char_4958 = 3880;
	public static final int ART_L_OcamlLexer_regular_string_char_4961 = 3881;
	public static final int ART_L_OcamlLexer_regular_string_char_4962 = 3882;
	public static final int ART_L_OcamlLexer_regular_string_char_4965 = 3883;
	public static final int ART_L_OcamlLexer_regular_string_char_4966 = 3884;
	public static final int ART_L_OcamlLexer_regular_string_char_4969 = 3885;
	public static final int ART_L_OcamlLexer_regular_string_char_4970 = 3886;
	public static final int ART_L_OcamlLexer_regular_string_char_4973 = 3887;
	public static final int ART_L_OcamlLexer_regular_string_char_4974 = 3888;
	public static final int ART_L_OcamlLexer_regular_string_char_4977 = 3889;
	public static final int ART_L_OcamlLexer_regular_string_char_4978 = 3890;
	public static final int ART_L_OcamlLexer_regular_string_char_4981 = 3891;
	public static final int ART_L_OcamlLexer_regular_string_char_4982 = 3892;
	public static final int ART_L_OcamlLexer_regular_string_char_4985 = 3893;
	public static final int ART_L_OcamlLexer_regular_string_char_4986 = 3894;
	public static final int ART_L_OcamlLexer_regular_string_char_4989 = 3895;
	public static final int ART_L_OcamlLexer_regular_string_char_4990 = 3896;
	public static final int ART_L_OcamlLexer_regular_string_char_4993 = 3897;
	public static final int ART_L_OcamlLexer_regular_string_char_4994 = 3898;
	public static final int ART_L_OcamlLexer_regular_string_char_4997 = 3899;
	public static final int ART_L_OcamlLexer_regular_string_char_4998 = 3900;
	public static final int ART_L_OcamlLexer_regular_string_char_5001 = 3901;
	public static final int ART_L_OcamlLexer_regular_string_char_5002 = 3902;
	public static final int ART_L_OcamlLexer_regular_string_char_5005 = 3903;
	public static final int ART_L_OcamlLexer_regular_string_char_5006 = 3904;
	public static final int ART_L_OcamlLexer_regular_string_char_5009 = 3905;
	public static final int ART_L_OcamlLexer_regular_string_char_5010 = 3906;
	public static final int ART_L_OcamlLexer_regular_string_char_5013 = 3907;
	public static final int ART_L_OcamlLexer_regular_string_char_5014 = 3908;
	public static final int ART_L_OcamlLexer_regular_string_char_5017 = 3909;
	public static final int ART_L_OcamlLexer_regular_string_char_5018 = 3910;
	public static final int ART_L_OcamlLexer_regular_string_char_5021 = 3911;
	public static final int ART_L_OcamlLexer_regular_string_char_5022 = 3912;
	public static final int ART_L_OcamlLexer_regular_string_char_5025 = 3913;
	public static final int ART_L_OcamlLexer_regular_string_char_5026 = 3914;
	public static final int ART_L_OcamlLexer_regular_string_char_5029 = 3915;
	public static final int ART_L_OcamlLexer_regular_string_char_5030 = 3916;
	public static final int ART_L_OcamlLexer_regular_string_char_5033 = 3917;
	public static final int ART_L_OcamlLexer_regular_string_char_5034 = 3918;
	public static final int ART_L_OcamlLexer_regular_string_char_5037 = 3919;
	public static final int ART_L_OcamlLexer_regular_string_char_5038 = 3920;
	public static final int ART_L_OcamlLexer_regular_string_char_5041 = 3921;
	public static final int ART_L_OcamlLexer_regular_string_char_5042 = 3922;
	public static final int ART_L_OcamlLexer_regular_string_char_5045 = 3923;
	public static final int ART_L_OcamlLexer_regular_string_char_5046 = 3924;
	public static final int ART_L_OcamlLexer_regular_string_char_5049 = 3925;
	public static final int ART_L_OcamlLexer_regular_string_char_5050 = 3926;
	public static final int ART_L_OcamlLexer_regular_string_char_5053 = 3927;
	public static final int ART_L_OcamlLexer_regular_string_char_5054 = 3928;
	public static final int ART_L_OcamlLexer_regular_string_char_5057 = 3929;
	public static final int ART_L_OcamlLexer_regular_string_char_5058 = 3930;
	public static final int ART_L_OcamlLexer_regular_string_char_5061 = 3931;
	public static final int ART_L_OcamlLexer_regular_string_char_5062 = 3932;
	public static final int ART_L_OcamlLexer_regular_string_char_5065 = 3933;
	public static final int ART_L_OcamlLexer_regular_string_char_5066 = 3934;
	public static final int ART_L_OcamlLexer_regular_string_char_5069 = 3935;
	public static final int ART_L_OcamlLexer_regular_string_char_5070 = 3936;
	public static final int ART_L_OcamlLexer_regular_string_char_5073 = 3937;
	public static final int ART_L_OcamlLexer_regular_string_char_5074 = 3938;
	public static final int ART_L_OcamlLexer_regular_string_char_5077 = 3939;
	public static final int ART_L_OcamlLexer_regular_string_char_5078 = 3940;
	public static final int ART_L_OcamlLexer_regular_string_char_5081 = 3941;
	public static final int ART_L_OcamlLexer_regular_string_char_5082 = 3942;
	public static final int ART_L_OcamlLexer_regular_string_char_5085 = 3943;
	public static final int ART_L_OcamlLexer_regular_string_char_5086 = 3944;
	public static final int ART_L_OcamlLexer_regular_string_char_5089 = 3945;
	public static final int ART_L_OcamlLexer_regular_string_char_5090 = 3946;
	public static final int ART_L_OcamlLexer_regular_string_char_5093 = 3947;
	public static final int ART_L_OcamlLexer_regular_string_char_5094 = 3948;
	public static final int ART_L_OcamlLexer_regular_string_char_5097 = 3949;
	public static final int ART_L_OcamlLexer_regular_string_char_5098 = 3950;
	public static final int ART_L_OcamlLexer_regular_string_char_5101 = 3951;
	public static final int ART_L_OcamlLexer_regular_string_char_5102 = 3952;
	public static final int ART_L_OcamlLexer_label_5111 = 3953;
	public static final int ART_L_OcamlLexer_label_5112 = 3954;
	public static final int ART_L_OcamlLexer_label_5115 = 3955;
	public static final int ART_L_OcamlLexer_label_5116 = 3956;
	public static final int ART_L_OcamlLexer_optlabel_5120 = 3957;
	public static final int ART_L_OcamlLexer_optlabel_5121 = 3958;
	public static final int ART_L_OcamlLexer_optlabel_5124 = 3959;
	public static final int ART_L_OcamlLexer_optlabel_5125 = 3960;
	public static final int ART_L_OcamlLexer_infix_symbol_5130 = 3961;
	public static final int ART_A_OcamlLexer_infix_symbol_5130 = 3962;
	public static final int ART_L_OcamlLexer_infix_symbol_5133 = 3963;
	public static final int ART_L_OcamlLexer_infix_symbol_5134 = 3964;
	public static final int ART_L_OcamlLexer_infix_symbol_5137 = 3965;
	public static final int ART_L_OcamlLexer_infix_symbol_5138 = 3966;
	public static final int ART_L_OcamlLexer_infix_symbol_5141 = 3967;
	public static final int ART_L_OcamlLexer_infix_symbol_5142 = 3968;
	public static final int ART_L_OcamlLexer_infix_symbol_5145 = 3969;
	public static final int ART_L_OcamlLexer_infix_symbol_5146 = 3970;
	public static final int ART_L_OcamlLexer_infix_symbol_5149 = 3971;
	public static final int ART_L_OcamlLexer_infix_symbol_5150 = 3972;
	public static final int ART_L_OcamlLexer_infix_symbol_5153 = 3973;
	public static final int ART_L_OcamlLexer_infix_symbol_5154 = 3974;
	public static final int ART_L_OcamlLexer_infix_symbol_5157 = 3975;
	public static final int ART_L_OcamlLexer_infix_symbol_5158 = 3976;
	public static final int ART_L_OcamlLexer_infix_symbol_5161 = 3977;
	public static final int ART_L_OcamlLexer_infix_symbol_5162 = 3978;
	public static final int ART_L_OcamlLexer_infix_symbol_5165 = 3979;
	public static final int ART_L_OcamlLexer_infix_symbol_5166 = 3980;
	public static final int ART_L_OcamlLexer_infix_symbol_5169 = 3981;
	public static final int ART_L_OcamlLexer_infix_symbol_5170 = 3982;
	public static final int ART_L_OcamlLexer_infix_symbol_5173 = 3983;
	public static final int ART_L_OcamlLexer_infix_symbol_5174 = 3984;
	public static final int ART_L_OcamlLexer_infix_symbol_5177 = 3985;
	public static final int ART_L_OcamlLexer_infix_symbol_5178 = 3986;
	public static final int ART_L_OcamlLexer_infix_symbol_5181 = 3987;
	public static final int ART_L_OcamlLexer_infix_symbol_5182 = 3988;
	public static final int ART_L_OcamlLexer_infix_symbol_5183 = 3989;
	public static final int ART_C_OcamlLexer_infix_symbol_5184 = 3990;
	public static final int ART_L_OcamlLexer_prefix_symbol_5193 = 3991;
	public static final int ART_L_OcamlLexer_prefix_symbol_5194 = 3992;
	public static final int ART_C_OcamlLexer_prefix_symbol_5195 = 3993;
	public static final int ART_L_OcamlLexer_prefix_symbol_5204 = 3994;
	public static final int ART_A_OcamlLexer_prefix_symbol_5204 = 3995;
	public static final int ART_L_OcamlLexer_prefix_symbol_5207 = 3996;
	public static final int ART_L_OcamlLexer_prefix_symbol_5208 = 3997;
	public static final int ART_L_OcamlLexer_prefix_symbol_5211 = 3998;
	public static final int ART_L_OcamlLexer_prefix_symbol_5212 = 3999;
	public static final int ART_L_OcamlLexer_prefix_symbol_5213 = 4000;
	public static final int ART_C_OcamlLexer_prefix_symbol_5214 = 4001;
	public static final int ART_L_OcamlLexer_operator_char_5223 = 4002;
	public static final int ART_L_OcamlLexer_operator_char_5224 = 4003;
	public static final int ART_L_OcamlLexer_operator_char_5227 = 4004;
	public static final int ART_L_OcamlLexer_operator_char_5228 = 4005;
	public static final int ART_L_OcamlLexer_operator_char_5231 = 4006;
	public static final int ART_L_OcamlLexer_operator_char_5232 = 4007;
	public static final int ART_L_OcamlLexer_operator_char_5235 = 4008;
	public static final int ART_L_OcamlLexer_operator_char_5236 = 4009;
	public static final int ART_L_OcamlLexer_operator_char_5239 = 4010;
	public static final int ART_L_OcamlLexer_operator_char_5240 = 4011;
	public static final int ART_L_OcamlLexer_operator_char_5243 = 4012;
	public static final int ART_L_OcamlLexer_operator_char_5244 = 4013;
	public static final int ART_L_OcamlLexer_operator_char_5247 = 4014;
	public static final int ART_L_OcamlLexer_operator_char_5248 = 4015;
	public static final int ART_L_OcamlLexer_operator_char_5251 = 4016;
	public static final int ART_L_OcamlLexer_operator_char_5252 = 4017;
	public static final int ART_L_OcamlLexer_operator_char_5255 = 4018;
	public static final int ART_L_OcamlLexer_operator_char_5256 = 4019;
	public static final int ART_L_OcamlLexer_operator_char_5259 = 4020;
	public static final int ART_L_OcamlLexer_operator_char_5260 = 4021;
	public static final int ART_L_OcamlLexer_operator_char_5263 = 4022;
	public static final int ART_L_OcamlLexer_operator_char_5264 = 4023;
	public static final int ART_L_OcamlLexer_operator_char_5267 = 4024;
	public static final int ART_L_OcamlLexer_operator_char_5268 = 4025;
	public static final int ART_L_OcamlLexer_operator_char_5271 = 4026;
	public static final int ART_L_OcamlLexer_operator_char_5272 = 4027;
	public static final int ART_L_OcamlLexer_operator_char_5275 = 4028;
	public static final int ART_L_OcamlLexer_operator_char_5276 = 4029;
	public static final int ART_L_OcamlLexer_operator_char_5279 = 4030;
	public static final int ART_L_OcamlLexer_operator_char_5280 = 4031;
	public static final int ART_L_OcamlLexer_operator_char_5283 = 4032;
	public static final int ART_L_OcamlLexer_operator_char_5284 = 4033;
	public static final int ART_L_OcamlLexer_operator_char_5287 = 4034;
	public static final int ART_L_OcamlLexer_operator_char_5288 = 4035;
	public static final int ART_L_OcamlLexer_operator_char_5291 = 4036;
	public static final int ART_L_OcamlLexer_operator_char_5292 = 4037;
	public static final int ART_L_OcamlLexer_linenum_directive_5296 = 4038;
	public static final int ART_L_OcamlLexer_linenum_directive_5297 = 4039;
	public static final int ART_C_OcamlLexer_linenum_directive_5298 = 4040;
	public static final int ART_L_OcamlLexer_linenum_directive_5306 = 4041;
	public static final int ART_L_OcamlLexer_linenum_directive_5307 = 4042;
	public static final int ART_C_OcamlLexer_linenum_directive_5308 = 4043;
	public static final int ART_L_OcamlLexer_linenum_directive_5314 = 4044;
	public static final int ART_L_OcamlLexer_linenum_directive_5315 = 4045;
	public static final int ART_C_OcamlLexer_linenum_directive_5316 = 4046;
	public static final int ART_L_OcamlLexer_linenum_directive_5322 = 4047;
	public static final int ART_L_OcamlLexer_linenum_directive_5323 = 4048;
	public static final int ART_X_DESPATCH = 4049;
	public static final int ART_X_DUMMY = 4050;
	public static final int ART_X_LABEL_EXTENT = 4051;
	/* End of artLabel enumeration */

	/* Start of artName enumeration */
	public static final int ART__NAME_NONE = 0;
	public static final int ART__NAME_EXTENT = 1;
	/* End of artName enumeration */
	public void lexBuiltinInstances() {
	}

	public void lexPreparseWhitespaceInstances() {
		characterStringInputIndex += artBuiltin_WHITESPACE(characterStringInputIndex);
	}

	public void ART_PF_input() {
		switch (currentRestartLabel) {
				/* Nonterminal input production descriptor loads*/
			case ART_L_OcamlLexer_input: 
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_input_5, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal input: match production*/
			case ART_L_OcamlLexer_input_5: 
				/* Cat/unary template start */
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_452, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet133[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_input_6: 
				if (!ARTSet1[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet137[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_9, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet156[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_13, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet130[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_17, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_21, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet95[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_25, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet142[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_29, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet142[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_33, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_37, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_41, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_45, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_49, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet134[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_53, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet111[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_57, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_61, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_65, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_69, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_73, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_77, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_81, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_85, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_89, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_93, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_97, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_101, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_105, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_109, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_113, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_117, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_121, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_125, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_129, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_133, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_137, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_141, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_145, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_149, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_153, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_157, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_161, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_165, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_169, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_173, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_177, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_181, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_185, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_189, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_193, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_197, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_201, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_205, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_209, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_213, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_217, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_221, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_225, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_229, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_233, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_237, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_241, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_245, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_249, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_253, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_257, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_261, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_265, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_269, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_273, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_277, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_281, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_285, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_289, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_293, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_297, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_301, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet104[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_305, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_309, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_313, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_317, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_321, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_325, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_329, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_333, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_337, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_341, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_345, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_349, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_353, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_357, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_361, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_365, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_369, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_373, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_377, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_381, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_385, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_389, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_393, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_397, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_401, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_405, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_409, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_413, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_417, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_421, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_425, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_429, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_433, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_437, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_441, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_445, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_input_449, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_input_9: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_11, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_ident; return; }
			case ART_L_OcamlLexer_input_11: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_13: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_15, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_capitalized_ident; return; }
			case ART_L_OcamlLexer_input_15: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_17: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_19, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lowercase_ident; return; }
			case ART_L_OcamlLexer_input_19: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_21: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_23, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_comment; return; }
			case ART_L_OcamlLexer_input_23: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_25: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_27, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_whitespace; return; }
			case ART_L_OcamlLexer_input_27: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_29: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_31, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_integer_literal; return; }
			case ART_L_OcamlLexer_input_31: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_33: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_35, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_float_literal; return; }
			case ART_L_OcamlLexer_input_35: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_37: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_39, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_char_literal; return; }
			case ART_L_OcamlLexer_input_39: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_41: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_43, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_string_literal; return; }
			case ART_L_OcamlLexer_input_43: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_45: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_47, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_label; return; }
			case ART_L_OcamlLexer_input_47: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_49: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_51, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_optlabel; return; }
			case ART_L_OcamlLexer_input_51: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_53: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_55, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_infix_symbol; return; }
			case ART_L_OcamlLexer_input_55: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_57: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_59, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_prefix_symbol; return; }
			case ART_L_OcamlLexer_input_59: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_61: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_63, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_and; return; }
			case ART_L_OcamlLexer_input_63: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_65: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_67, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_as; return; }
			case ART_L_OcamlLexer_input_67: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_69: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_71, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_assert; return; }
			case ART_L_OcamlLexer_input_71: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_73: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_75, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_asr; return; }
			case ART_L_OcamlLexer_input_75: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_77: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_79, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_begin; return; }
			case ART_L_OcamlLexer_input_79: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_81: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_83, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_class; return; }
			case ART_L_OcamlLexer_input_83: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_85: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_87, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_constraint; return; }
			case ART_L_OcamlLexer_input_87: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_89: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_91, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_do; return; }
			case ART_L_OcamlLexer_input_91: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_93: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_95, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_done; return; }
			case ART_L_OcamlLexer_input_95: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_97: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_99, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_downto; return; }
			case ART_L_OcamlLexer_input_99: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_101: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_103, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_else; return; }
			case ART_L_OcamlLexer_input_103: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_105: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_107, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_end; return; }
			case ART_L_OcamlLexer_input_107: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_109: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_111, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_exception; return; }
			case ART_L_OcamlLexer_input_111: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_113: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_115, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_external; return; }
			case ART_L_OcamlLexer_input_115: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_117: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_119, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_false; return; }
			case ART_L_OcamlLexer_input_119: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_121: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_123, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_for; return; }
			case ART_L_OcamlLexer_input_123: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_125: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_127, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_fun; return; }
			case ART_L_OcamlLexer_input_127: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_129: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_131, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_function; return; }
			case ART_L_OcamlLexer_input_131: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_133: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_135, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_functor; return; }
			case ART_L_OcamlLexer_input_135: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_137: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_139, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_if; return; }
			case ART_L_OcamlLexer_input_139: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_141: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_143, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_in; return; }
			case ART_L_OcamlLexer_input_143: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_145: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_147, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_include; return; }
			case ART_L_OcamlLexer_input_147: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_149: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_151, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_inherit; return; }
			case ART_L_OcamlLexer_input_151: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_153: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_155, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_initializer; return; }
			case ART_L_OcamlLexer_input_155: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_157: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_159, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_land; return; }
			case ART_L_OcamlLexer_input_159: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_161: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_163, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lazy; return; }
			case ART_L_OcamlLexer_input_163: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_165: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_167, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_let; return; }
			case ART_L_OcamlLexer_input_167: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_169: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_171, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lor; return; }
			case ART_L_OcamlLexer_input_171: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_173: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_175, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lsl; return; }
			case ART_L_OcamlLexer_input_175: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_177: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_179, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lsr; return; }
			case ART_L_OcamlLexer_input_179: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_181: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_183, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lxor; return; }
			case ART_L_OcamlLexer_input_183: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_185: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_187, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_match; return; }
			case ART_L_OcamlLexer_input_187: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_189: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_191, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_method; return; }
			case ART_L_OcamlLexer_input_191: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_193: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_195, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_mod; return; }
			case ART_L_OcamlLexer_input_195: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_197: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_199, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_module; return; }
			case ART_L_OcamlLexer_input_199: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_201: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_203, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_mutable; return; }
			case ART_L_OcamlLexer_input_203: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_205: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_207, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_new; return; }
			case ART_L_OcamlLexer_input_207: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_209: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_211, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_object; return; }
			case ART_L_OcamlLexer_input_211: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_213: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_215, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_of; return; }
			case ART_L_OcamlLexer_input_215: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_217: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_219, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_open; return; }
			case ART_L_OcamlLexer_input_219: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_221: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_223, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_or; return; }
			case ART_L_OcamlLexer_input_223: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_225: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_227, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_private; return; }
			case ART_L_OcamlLexer_input_227: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_229: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_231, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_rec; return; }
			case ART_L_OcamlLexer_input_231: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_233: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_235, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_sig; return; }
			case ART_L_OcamlLexer_input_235: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_237: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_239, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_struct; return; }
			case ART_L_OcamlLexer_input_239: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_241: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_243, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_then; return; }
			case ART_L_OcamlLexer_input_243: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_245: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_247, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_to; return; }
			case ART_L_OcamlLexer_input_247: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_249: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_251, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_true; return; }
			case ART_L_OcamlLexer_input_251: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_253: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_255, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_try; return; }
			case ART_L_OcamlLexer_input_255: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_257: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_259, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_type; return; }
			case ART_L_OcamlLexer_input_259: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_261: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_263, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_val; return; }
			case ART_L_OcamlLexer_input_263: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_265: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_267, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_virtual; return; }
			case ART_L_OcamlLexer_input_267: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_269: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_271, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_when; return; }
			case ART_L_OcamlLexer_input_271: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_273: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_275, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_while; return; }
			case ART_L_OcamlLexer_input_275: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_277: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_279, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_with; return; }
			case ART_L_OcamlLexer_input_279: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_281: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_283, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_bangequals; return; }
			case ART_L_OcamlLexer_input_283: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_285: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_287, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hash; return; }
			case ART_L_OcamlLexer_input_287: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_289: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_291, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_amper; return; }
			case ART_L_OcamlLexer_input_291: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_293: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_295, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_amperamper; return; }
			case ART_L_OcamlLexer_input_295: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_297: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_299, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_squote; return; }
			case ART_L_OcamlLexer_input_299: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_301: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_303, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lparen; return; }
			case ART_L_OcamlLexer_input_303: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_305: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_307, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_rparen; return; }
			case ART_L_OcamlLexer_input_307: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_309: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_311, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_star; return; }
			case ART_L_OcamlLexer_input_311: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_313: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_315, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_plus; return; }
			case ART_L_OcamlLexer_input_315: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_317: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_319, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_comma; return; }
			case ART_L_OcamlLexer_input_319: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_321: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_323, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hyphen; return; }
			case ART_L_OcamlLexer_input_323: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_325: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_327, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hyphendot; return; }
			case ART_L_OcamlLexer_input_327: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_329: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_331, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hyphengreater; return; }
			case ART_L_OcamlLexer_input_331: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_333: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_335, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dot; return; }
			case ART_L_OcamlLexer_input_335: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_337: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_339, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dotdot; return; }
			case ART_L_OcamlLexer_input_339: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_341: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_343, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_colon; return; }
			case ART_L_OcamlLexer_input_343: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_345: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_347, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_coloncolon; return; }
			case ART_L_OcamlLexer_input_347: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_349: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_351, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_colonequals; return; }
			case ART_L_OcamlLexer_input_351: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_353: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_355, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_colongreater; return; }
			case ART_L_OcamlLexer_input_355: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_357: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_359, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_semi; return; }
			case ART_L_OcamlLexer_input_359: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_361: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_363, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_semisemi; return; }
			case ART_L_OcamlLexer_input_363: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_365: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_367, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_less; return; }
			case ART_L_OcamlLexer_input_367: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_369: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_371, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lesshyphen; return; }
			case ART_L_OcamlLexer_input_371: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_373: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_375, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_equal; return; }
			case ART_L_OcamlLexer_input_375: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_377: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_379, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_greater; return; }
			case ART_L_OcamlLexer_input_379: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_381: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_383, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_greaterrbracket; return; }
			case ART_L_OcamlLexer_input_383: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_385: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_387, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_greaterrbrace; return; }
			case ART_L_OcamlLexer_input_387: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_389: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_391, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_question; return; }
			case ART_L_OcamlLexer_input_391: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_393: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_395, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lbracket; return; }
			case ART_L_OcamlLexer_input_395: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_397: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_399, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lbracketless; return; }
			case ART_L_OcamlLexer_input_399: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_401: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_403, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lbracketgreater; return; }
			case ART_L_OcamlLexer_input_403: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_405: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_407, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lbracketbar; return; }
			case ART_L_OcamlLexer_input_407: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_409: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_411, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_rbracket; return; }
			case ART_L_OcamlLexer_input_411: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_413: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_415, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_underscore; return; }
			case ART_L_OcamlLexer_input_415: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_417: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_419, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_backquote; return; }
			case ART_L_OcamlLexer_input_419: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_421: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_423, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lbrace; return; }
			case ART_L_OcamlLexer_input_423: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_425: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_427, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lbraceless; return; }
			case ART_L_OcamlLexer_input_427: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_429: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_431, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_bar; return; }
			case ART_L_OcamlLexer_input_431: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_433: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_435, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_barrbracket; return; }
			case ART_L_OcamlLexer_input_435: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_437: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_439, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_barbar; return; }
			case ART_L_OcamlLexer_input_439: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_441: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_443, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_rbrace; return; }
			case ART_L_OcamlLexer_input_443: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_445: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_447, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_tilde; return; }
			case ART_L_OcamlLexer_input_447: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_L_OcamlLexer_input_449: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_input_451, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_linenum_directive; return; }
			case ART_L_OcamlLexer_input_451: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_input_7; return; }
			case ART_A_OcamlLexer_input_7: 
				if (testRepeat(ART_L_OcamlLexer_input_7, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet133[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_input_6; return; }
			case ART_L_OcamlLexer_input_452: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet133[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_and() {
		switch (currentRestartLabel) {
				/* Nonterminal and production descriptor loads*/
			case ART_L_OcamlLexer_and: 
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_and_455, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal and: match production*/
			case ART_L_OcamlLexer_and_455: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_and_457, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_and_459, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet148[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_and_461, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_as() {
		switch (currentRestartLabel) {
				/* Nonterminal as production descriptor loads*/
			case ART_L_OcamlLexer_as: 
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_as_464, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal as: match production*/
			case ART_L_OcamlLexer_as_464: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_as_466, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_as_468, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_assert() {
		switch (currentRestartLabel) {
				/* Nonterminal assert production descriptor loads*/
			case ART_L_OcamlLexer_assert: 
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_assert_471, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal assert: match production*/
			case ART_L_OcamlLexer_assert_471: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_assert_473, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_assert_475, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_assert_477, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_assert_479, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_assert_481, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_assert_483, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_asr() {
		switch (currentRestartLabel) {
				/* Nonterminal asr production descriptor loads*/
			case ART_L_OcamlLexer_asr: 
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_asr_486, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal asr: match production*/
			case ART_L_OcamlLexer_asr_486: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_asr_488, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_asr_490, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_asr_492, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_begin() {
		switch (currentRestartLabel) {
				/* Nonterminal begin production descriptor loads*/
			case ART_L_OcamlLexer_begin: 
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_begin_495, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal begin: match production*/
			case ART_L_OcamlLexer_begin_495: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_begin_497, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_begin_499, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet73[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_begin_501, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_begin_503, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_begin_505, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_class() {
		switch (currentRestartLabel) {
				/* Nonterminal class production descriptor loads*/
			case ART_L_OcamlLexer_class: 
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_class_508, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal class: match production*/
			case ART_L_OcamlLexer_class_508: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_class_510, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_class_512, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_class_514, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_class_516, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_class_518, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_constraint() {
		switch (currentRestartLabel) {
				/* Nonterminal constraint production descriptor loads*/
			case ART_L_OcamlLexer_constraint: 
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_constraint_521, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal constraint: match production*/
			case ART_L_OcamlLexer_constraint_521: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_523, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_525, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_527, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_529, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_531, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_533, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_535, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_537, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_539, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_constraint_541, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_do() {
		switch (currentRestartLabel) {
				/* Nonterminal do production descriptor loads*/
			case ART_L_OcamlLexer_do: 
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_do_544, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal do: match production*/
			case ART_L_OcamlLexer_do_544: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_do_546, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_do_548, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_done() {
		switch (currentRestartLabel) {
				/* Nonterminal done production descriptor loads*/
			case ART_L_OcamlLexer_done: 
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_done_551, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal done: match production*/
			case ART_L_OcamlLexer_done_551: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_done_553, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_done_555, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_done_557, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_done_559, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_downto() {
		switch (currentRestartLabel) {
				/* Nonterminal downto production descriptor loads*/
			case ART_L_OcamlLexer_downto: 
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_downto_562, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal downto: match production*/
			case ART_L_OcamlLexer_downto_562: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_downto_564, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_downto_566, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet96[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_downto_568, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_downto_570, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_downto_572, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_downto_574, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_else() {
		switch (currentRestartLabel) {
				/* Nonterminal else production descriptor loads*/
			case ART_L_OcamlLexer_else: 
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_else_577, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal else: match production*/
			case ART_L_OcamlLexer_else_577: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_else_579, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_else_581, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_else_583, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_else_585, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_end() {
		switch (currentRestartLabel) {
				/* Nonterminal end production descriptor loads*/
			case ART_L_OcamlLexer_end: 
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_end_588, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal end: match production*/
			case ART_L_OcamlLexer_end_588: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_end_590, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_end_592, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet148[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_end_594, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_exception() {
		switch (currentRestartLabel) {
				/* Nonterminal exception production descriptor loads*/
			case ART_L_OcamlLexer_exception: 
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_exception_597, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal exception: match production*/
			case ART_L_OcamlLexer_exception_597: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_599, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet79[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_601, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_603, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_605, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet110[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_607, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_609, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_611, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_613, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_exception_615, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_external() {
		switch (currentRestartLabel) {
				/* Nonterminal external production descriptor loads*/
			case ART_L_OcamlLexer_external: 
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_external_618, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal external: match production*/
			case ART_L_OcamlLexer_external_618: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_620, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet79[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_622, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_624, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_626, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_628, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_630, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_632, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_external_634, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_false() {
		switch (currentRestartLabel) {
				/* Nonterminal false production descriptor loads*/
			case ART_L_OcamlLexer_false: 
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_false_637, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal false: match production*/
			case ART_L_OcamlLexer_false_637: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_false_639, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_false_641, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_false_643, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_false_645, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_false_647, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_for() {
		switch (currentRestartLabel) {
				/* Nonterminal for production descriptor loads*/
			case ART_L_OcamlLexer_for: 
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_for_650, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal for: match production*/
			case ART_L_OcamlLexer_for_650: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_for_652, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_for_654, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_for_656, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_fun() {
		switch (currentRestartLabel) {
				/* Nonterminal fun production descriptor loads*/
			case ART_L_OcamlLexer_fun: 
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_fun_659, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal fun: match production*/
			case ART_L_OcamlLexer_fun_659: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_fun_661, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_fun_663, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_fun_665, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_function() {
		switch (currentRestartLabel) {
				/* Nonterminal function production descriptor loads*/
			case ART_L_OcamlLexer_function: 
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_function_668, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal function: match production*/
			case ART_L_OcamlLexer_function_668: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_670, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_672, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_674, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_676, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_678, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_680, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_682, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_function_684, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_functor() {
		switch (currentRestartLabel) {
				/* Nonterminal functor production descriptor loads*/
			case ART_L_OcamlLexer_functor: 
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_functor_687, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal functor: match production*/
			case ART_L_OcamlLexer_functor_687: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_functor_689, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_functor_691, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_functor_693, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_functor_695, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_functor_697, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_functor_699, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_functor_701, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_if() {
		switch (currentRestartLabel) {
				/* Nonterminal if production descriptor loads*/
			case ART_L_OcamlLexer_if: 
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_if_704, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal if: match production*/
			case ART_L_OcamlLexer_if_704: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_if_706, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet143[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_if_708, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_in() {
		switch (currentRestartLabel) {
				/* Nonterminal in production descriptor loads*/
			case ART_L_OcamlLexer_in: 
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_in_711, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal in: match production*/
			case ART_L_OcamlLexer_in_711: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_in_713, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_in_715, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_include() {
		switch (currentRestartLabel) {
				/* Nonterminal include production descriptor loads*/
			case ART_L_OcamlLexer_include: 
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_include_718, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal include: match production*/
			case ART_L_OcamlLexer_include_718: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_include_720, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_include_722, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_include_724, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_include_726, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_include_728, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet148[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_include_730, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_include_732, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_inherit() {
		switch (currentRestartLabel) {
				/* Nonterminal inherit production descriptor loads*/
			case ART_L_OcamlLexer_inherit: 
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_inherit_735, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal inherit: match production*/
			case ART_L_OcamlLexer_inherit_735: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_inherit_737, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_inherit_739, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet74[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_inherit_741, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_inherit_743, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_inherit_745, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_inherit_747, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_inherit_749, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_initializer() {
		switch (currentRestartLabel) {
				/* Nonterminal initializer production descriptor loads*/
			case ART_L_OcamlLexer_initializer: 
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_initializer_752, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal initializer: match production*/
			case ART_L_OcamlLexer_initializer_752: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_754, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_756, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_758, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_760, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_762, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_764, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_766, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_768, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet81[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_770, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_772, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_initializer_774, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_land() {
		switch (currentRestartLabel) {
				/* Nonterminal land production descriptor loads*/
			case ART_L_OcamlLexer_land: 
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_land_777, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal land: match production*/
			case ART_L_OcamlLexer_land_777: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_land_779, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_land_781, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_land_783, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet148[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_land_785, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lazy() {
		switch (currentRestartLabel) {
				/* Nonterminal lazy production descriptor loads*/
			case ART_L_OcamlLexer_lazy: 
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lazy_788, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lazy: match production*/
			case ART_L_OcamlLexer_lazy_788: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lazy_790, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lazy_792, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet81[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lazy_794, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet80[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lazy_796, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_let() {
		switch (currentRestartLabel) {
				/* Nonterminal let production descriptor loads*/
			case ART_L_OcamlLexer_let: 
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_let_799, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal let: match production*/
			case ART_L_OcamlLexer_let_799: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_let_801, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_let_803, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_let_805, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lor() {
		switch (currentRestartLabel) {
				/* Nonterminal lor production descriptor loads*/
			case ART_L_OcamlLexer_lor: 
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lor_808, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lor: match production*/
			case ART_L_OcamlLexer_lor_808: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lor_810, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lor_812, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lor_814, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lsl() {
		switch (currentRestartLabel) {
				/* Nonterminal lsl production descriptor loads*/
			case ART_L_OcamlLexer_lsl: 
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lsl_817, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lsl: match production*/
			case ART_L_OcamlLexer_lsl_817: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lsl_819, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lsl_821, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lsl_823, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lsr() {
		switch (currentRestartLabel) {
				/* Nonterminal lsr production descriptor loads*/
			case ART_L_OcamlLexer_lsr: 
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lsr_826, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lsr: match production*/
			case ART_L_OcamlLexer_lsr_826: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lsr_828, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet102[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lsr_830, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lsr_832, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lxor() {
		switch (currentRestartLabel) {
				/* Nonterminal lxor production descriptor loads*/
			case ART_L_OcamlLexer_lxor: 
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lxor_835, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lxor: match production*/
			case ART_L_OcamlLexer_lxor_835: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lxor_837, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet79[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lxor_839, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lxor_841, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lxor_843, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_match() {
		switch (currentRestartLabel) {
				/* Nonterminal match production descriptor loads*/
			case ART_L_OcamlLexer_match: 
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_match_846, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal match: match production*/
			case ART_L_OcamlLexer_match_846: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_match_848, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_match_850, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_match_852, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_match_854, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet74[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_match_856, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_method() {
		switch (currentRestartLabel) {
				/* Nonterminal method production descriptor loads*/
			case ART_L_OcamlLexer_method: 
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_method_859, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal method: match production*/
			case ART_L_OcamlLexer_method_859: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_method_861, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_method_863, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_method_865, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet74[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_method_867, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_method_869, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet148[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_method_871, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_mod() {
		switch (currentRestartLabel) {
				/* Nonterminal mod production descriptor loads*/
			case ART_L_OcamlLexer_mod: 
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_mod_874, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal mod: match production*/
			case ART_L_OcamlLexer_mod_874: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mod_876, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mod_878, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet148[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mod_880, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_module() {
		switch (currentRestartLabel) {
				/* Nonterminal module production descriptor loads*/
			case ART_L_OcamlLexer_module: 
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_module_883, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal module: match production*/
			case ART_L_OcamlLexer_module_883: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_module_885, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_module_887, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet148[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_module_889, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_module_891, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_module_893, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_module_895, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_mutable() {
		switch (currentRestartLabel) {
				/* Nonterminal mutable production descriptor loads*/
			case ART_L_OcamlLexer_mutable: 
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_mutable_898, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal mutable: match production*/
			case ART_L_OcamlLexer_mutable_898: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mutable_900, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mutable_902, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mutable_904, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mutable_906, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet157[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mutable_908, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mutable_910, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_mutable_912, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_new() {
		switch (currentRestartLabel) {
				/* Nonterminal new production descriptor loads*/
			case ART_L_OcamlLexer_new: 
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_new_915, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal new: match production*/
			case ART_L_OcamlLexer_new_915: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_new_917, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_new_919, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet96[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_new_921, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_object() {
		switch (currentRestartLabel) {
				/* Nonterminal object production descriptor loads*/
			case ART_L_OcamlLexer_object: 
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_object_924, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal object: match production*/
			case ART_L_OcamlLexer_object_924: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_object_926, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet157[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_object_928, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet75[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_object_930, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_object_932, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_object_934, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_object_936, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_of() {
		switch (currentRestartLabel) {
				/* Nonterminal of production descriptor loads*/
			case ART_L_OcamlLexer_of: 
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_of_939, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal of: match production*/
			case ART_L_OcamlLexer_of_939: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_of_941, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet143[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_of_943, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_open() {
		switch (currentRestartLabel) {
				/* Nonterminal open production descriptor loads*/
			case ART_L_OcamlLexer_open: 
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_open_946, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal open: match production*/
			case ART_L_OcamlLexer_open_946: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_open_948, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet110[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_open_950, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_open_952, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_open_954, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_or() {
		switch (currentRestartLabel) {
				/* Nonterminal or production descriptor loads*/
			case ART_L_OcamlLexer_or: 
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_or_957, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal or: match production*/
			case ART_L_OcamlLexer_or_957: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_or_959, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_or_961, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_private() {
		switch (currentRestartLabel) {
				/* Nonterminal private production descriptor loads*/
			case ART_L_OcamlLexer_private: 
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_private_964, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal private: match production*/
			case ART_L_OcamlLexer_private_964: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_private_966, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_private_968, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_private_970, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet97[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_private_972, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_private_974, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_private_976, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_private_978, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_rec() {
		switch (currentRestartLabel) {
				/* Nonterminal rec production descriptor loads*/
			case ART_L_OcamlLexer_rec: 
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_rec_981, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal rec: match production*/
			case ART_L_OcamlLexer_rec_981: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_rec_983, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_rec_985, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_rec_987, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_sig() {
		switch (currentRestartLabel) {
				/* Nonterminal sig production descriptor loads*/
			case ART_L_OcamlLexer_sig: 
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_sig_990, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal sig: match production*/
			case ART_L_OcamlLexer_sig_990: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_sig_992, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_sig_994, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet73[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_sig_996, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_struct() {
		switch (currentRestartLabel) {
				/* Nonterminal struct production descriptor loads*/
			case ART_L_OcamlLexer_struct: 
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_struct_999, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal struct: match production*/
			case ART_L_OcamlLexer_struct_999: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_struct_1001, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_struct_1003, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_struct_1005, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_struct_1007, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet154[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_struct_1009, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_struct_1011, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_then() {
		switch (currentRestartLabel) {
				/* Nonterminal then production descriptor loads*/
			case ART_L_OcamlLexer_then: 
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_then_1014, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal then: match production*/
			case ART_L_OcamlLexer_then_1014: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_then_1016, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet74[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_then_1018, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_then_1020, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_then_1022, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_to() {
		switch (currentRestartLabel) {
				/* Nonterminal to production descriptor loads*/
			case ART_L_OcamlLexer_to: 
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_to_1025, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal to: match production*/
			case ART_L_OcamlLexer_to_1025: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_to_1027, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_to_1029, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_true() {
		switch (currentRestartLabel) {
				/* Nonterminal true production descriptor loads*/
			case ART_L_OcamlLexer_true: 
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_true_1032, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal true: match production*/
			case ART_L_OcamlLexer_true_1032: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_true_1034, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_true_1036, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_true_1038, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_true_1040, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_try() {
		switch (currentRestartLabel) {
				/* Nonterminal try production descriptor loads*/
			case ART_L_OcamlLexer_try: 
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_try_1043, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal try: match production*/
			case ART_L_OcamlLexer_try_1043: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_try_1045, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_try_1047, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet80[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_try_1049, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_type() {
		switch (currentRestartLabel) {
				/* Nonterminal type production descriptor loads*/
			case ART_L_OcamlLexer_type: 
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_type_1052, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal type: match production*/
			case ART_L_OcamlLexer_type_1052: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_type_1054, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet80[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_type_1056, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet110[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_type_1058, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_type_1060, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_val() {
		switch (currentRestartLabel) {
				/* Nonterminal val production descriptor loads*/
			case ART_L_OcamlLexer_val: 
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_val_1063, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal val: match production*/
			case ART_L_OcamlLexer_val_1063: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_val_1065, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_val_1067, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_val_1069, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_virtual() {
		switch (currentRestartLabel) {
				/* Nonterminal virtual production descriptor loads*/
			case ART_L_OcamlLexer_virtual: 
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_virtual_1072, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal virtual: match production*/
			case ART_L_OcamlLexer_virtual_1072: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_virtual_1074, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_virtual_1076, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet107[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_virtual_1078, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_virtual_1080, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet78[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_virtual_1082, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet161[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_virtual_1084, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_virtual_1086, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_when() {
		switch (currentRestartLabel) {
				/* Nonterminal when production descriptor loads*/
			case ART_L_OcamlLexer_when: 
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_when_1089, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal when: match production*/
			case ART_L_OcamlLexer_when_1089: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_when_1091, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet74[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_when_1093, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_when_1095, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet124[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_when_1097, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_while() {
		switch (currentRestartLabel) {
				/* Nonterminal while production descriptor loads*/
			case ART_L_OcamlLexer_while: 
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_while_1100, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal while: match production*/
			case ART_L_OcamlLexer_while_1100: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_while_1102, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet74[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_while_1104, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_while_1106, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet129[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_while_1108, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet146[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_while_1110, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_with() {
		switch (currentRestartLabel) {
				/* Nonterminal with production descriptor loads*/
			case ART_L_OcamlLexer_with: 
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_with_1113, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal with: match production*/
			case ART_L_OcamlLexer_with_1113: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_with_1115, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet135[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_with_1117, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet99[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_with_1119, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet74[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_with_1121, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_bangequals() {
		switch (currentRestartLabel) {
				/* Nonterminal bangequals production descriptor loads*/
			case ART_L_OcamlLexer_bangequals: 
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_bangequals_1124, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal bangequals: match production*/
			case ART_L_OcamlLexer_bangequals_1124: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_bangequals_1126, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet145[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_bangequals_1128, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_hash() {
		switch (currentRestartLabel) {
				/* Nonterminal hash production descriptor loads*/
			case ART_L_OcamlLexer_hash: 
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hash_1131, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal hash: match production*/
			case ART_L_OcamlLexer_hash_1131: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hash_1133, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_amper() {
		switch (currentRestartLabel) {
				/* Nonterminal amper production descriptor loads*/
			case ART_L_OcamlLexer_amper: 
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_amper_1136, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal amper: match production*/
			case ART_L_OcamlLexer_amper_1136: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_amper_1138, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_amperamper() {
		switch (currentRestartLabel) {
				/* Nonterminal amperamper production descriptor loads*/
			case ART_L_OcamlLexer_amperamper: 
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_amperamper_1141, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal amperamper: match production*/
			case ART_L_OcamlLexer_amperamper_1141: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_amperamper_1143, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet162[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_amperamper_1145, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_squote() {
		switch (currentRestartLabel) {
				/* Nonterminal squote production descriptor loads*/
			case ART_L_OcamlLexer_squote: 
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_squote_1148, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal squote: match production*/
			case ART_L_OcamlLexer_squote_1148: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_squote_1150, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lparen() {
		switch (currentRestartLabel) {
				/* Nonterminal lparen production descriptor loads*/
			case ART_L_OcamlLexer_lparen: 
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lparen_1153, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lparen: match production*/
			case ART_L_OcamlLexer_lparen_1153: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lparen_1155, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_rparen() {
		switch (currentRestartLabel) {
				/* Nonterminal rparen production descriptor loads*/
			case ART_L_OcamlLexer_rparen: 
				if (ARTSet104[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_rparen_1158, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal rparen: match production*/
			case ART_L_OcamlLexer_rparen_1158: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_rparen_1160, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_star() {
		switch (currentRestartLabel) {
				/* Nonterminal star production descriptor loads*/
			case ART_L_OcamlLexer_star: 
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_star_1163, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal star: match production*/
			case ART_L_OcamlLexer_star_1163: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_star_1165, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_plus() {
		switch (currentRestartLabel) {
				/* Nonterminal plus production descriptor loads*/
			case ART_L_OcamlLexer_plus: 
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_plus_1168, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal plus: match production*/
			case ART_L_OcamlLexer_plus_1168: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_plus_1170, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_comma() {
		switch (currentRestartLabel) {
				/* Nonterminal comma production descriptor loads*/
			case ART_L_OcamlLexer_comma: 
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_comma_1173, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal comma: match production*/
			case ART_L_OcamlLexer_comma_1173: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COMMA, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_comma_1175, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_hyphen() {
		switch (currentRestartLabel) {
				/* Nonterminal hyphen production descriptor loads*/
			case ART_L_OcamlLexer_hyphen: 
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hyphen_1178, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal hyphen: match production*/
			case ART_L_OcamlLexer_hyphen_1178: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hyphen_1180, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_hyphendot() {
		switch (currentRestartLabel) {
				/* Nonterminal hyphendot production descriptor loads*/
			case ART_L_OcamlLexer_hyphendot: 
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hyphendot_1183, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal hyphendot: match production*/
			case ART_L_OcamlLexer_hyphendot_1183: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hyphendot_1185, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet147[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hyphendot_1187, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_hyphengreater() {
		switch (currentRestartLabel) {
				/* Nonterminal hyphengreater production descriptor loads*/
			case ART_L_OcamlLexer_hyphengreater: 
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hyphengreater_1190, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal hyphengreater: match production*/
			case ART_L_OcamlLexer_hyphengreater_1190: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hyphengreater_1192, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet141[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hyphengreater_1194, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_dot() {
		switch (currentRestartLabel) {
				/* Nonterminal dot production descriptor loads*/
			case ART_L_OcamlLexer_dot: 
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dot_1197, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal dot: match production*/
			case ART_L_OcamlLexer_dot_1197: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dot_1199, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_dotdot() {
		switch (currentRestartLabel) {
				/* Nonterminal dotdot production descriptor loads*/
			case ART_L_OcamlLexer_dotdot: 
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dotdot_1202, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal dotdot: match production*/
			case ART_L_OcamlLexer_dotdot_1202: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dotdot_1204, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet147[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dotdot_1206, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_colon() {
		switch (currentRestartLabel) {
				/* Nonterminal colon production descriptor loads*/
			case ART_L_OcamlLexer_colon: 
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_colon_1209, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal colon: match production*/
			case ART_L_OcamlLexer_colon_1209: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_colon_1211, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_coloncolon() {
		switch (currentRestartLabel) {
				/* Nonterminal coloncolon production descriptor loads*/
			case ART_L_OcamlLexer_coloncolon: 
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_coloncolon_1214, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal coloncolon: match production*/
			case ART_L_OcamlLexer_coloncolon_1214: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_coloncolon_1216, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet153[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_coloncolon_1218, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_colonequals() {
		switch (currentRestartLabel) {
				/* Nonterminal colonequals production descriptor loads*/
			case ART_L_OcamlLexer_colonequals: 
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_colonequals_1221, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal colonequals: match production*/
			case ART_L_OcamlLexer_colonequals_1221: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_colonequals_1223, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet145[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_colonequals_1225, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_colongreater() {
		switch (currentRestartLabel) {
				/* Nonterminal colongreater production descriptor loads*/
			case ART_L_OcamlLexer_colongreater: 
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_colongreater_1228, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal colongreater: match production*/
			case ART_L_OcamlLexer_colongreater_1228: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_colongreater_1230, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet141[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_colongreater_1232, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_semi() {
		switch (currentRestartLabel) {
				/* Nonterminal semi production descriptor loads*/
			case ART_L_OcamlLexer_semi: 
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_semi_1235, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal semi: match production*/
			case ART_L_OcamlLexer_semi_1235: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_semi_1237, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_semisemi() {
		switch (currentRestartLabel) {
				/* Nonterminal semisemi production descriptor loads*/
			case ART_L_OcamlLexer_semisemi: 
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_semisemi_1240, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal semisemi: match production*/
			case ART_L_OcamlLexer_semisemi_1240: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_semisemi_1242, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet103[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_semisemi_1244, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_less() {
		switch (currentRestartLabel) {
				/* Nonterminal less production descriptor loads*/
			case ART_L_OcamlLexer_less: 
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_less_1247, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal less: match production*/
			case ART_L_OcamlLexer_less_1247: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_less_1249, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lesshyphen() {
		switch (currentRestartLabel) {
				/* Nonterminal lesshyphen production descriptor loads*/
			case ART_L_OcamlLexer_lesshyphen: 
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lesshyphen_1252, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lesshyphen: match production*/
			case ART_L_OcamlLexer_lesshyphen_1252: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lesshyphen_1254, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet138[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lesshyphen_1256, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_equal() {
		switch (currentRestartLabel) {
				/* Nonterminal equal production descriptor loads*/
			case ART_L_OcamlLexer_equal: 
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_equal_1259, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal equal: match production*/
			case ART_L_OcamlLexer_equal_1259: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_equal_1261, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_greater() {
		switch (currentRestartLabel) {
				/* Nonterminal greater production descriptor loads*/
			case ART_L_OcamlLexer_greater: 
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_greater_1264, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal greater: match production*/
			case ART_L_OcamlLexer_greater_1264: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_greater_1266, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_greaterrbracket() {
		switch (currentRestartLabel) {
				/* Nonterminal greaterrbracket production descriptor loads*/
			case ART_L_OcamlLexer_greaterrbracket: 
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_greaterrbracket_1269, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal greaterrbracket: match production*/
			case ART_L_OcamlLexer_greaterrbracket_1269: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_greaterrbracket_1271, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet108[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_greaterrbracket_1273, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_greaterrbrace() {
		switch (currentRestartLabel) {
				/* Nonterminal greaterrbrace production descriptor loads*/
			case ART_L_OcamlLexer_greaterrbrace: 
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_greaterrbrace_1276, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal greaterrbrace: match production*/
			case ART_L_OcamlLexer_greaterrbrace_1276: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_greaterrbrace_1278, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet109[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_greaterrbrace_1280, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_question() {
		switch (currentRestartLabel) {
				/* Nonterminal question production descriptor loads*/
			case ART_L_OcamlLexer_question: 
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_question_1283, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal question: match production*/
			case ART_L_OcamlLexer_question_1283: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_question_1285, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lbracket() {
		switch (currentRestartLabel) {
				/* Nonterminal lbracket production descriptor loads*/
			case ART_L_OcamlLexer_lbracket: 
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lbracket_1288, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lbracket: match production*/
			case ART_L_OcamlLexer_lbracket_1288: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbracket_1290, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lbracketless() {
		switch (currentRestartLabel) {
				/* Nonterminal lbracketless production descriptor loads*/
			case ART_L_OcamlLexer_lbracketless: 
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lbracketless_1293, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lbracketless: match production*/
			case ART_L_OcamlLexer_lbracketless_1293: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbracketless_1295, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet126[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbracketless_1297, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lbracketgreater() {
		switch (currentRestartLabel) {
				/* Nonterminal lbracketgreater production descriptor loads*/
			case ART_L_OcamlLexer_lbracketgreater: 
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lbracketgreater_1300, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lbracketgreater: match production*/
			case ART_L_OcamlLexer_lbracketgreater_1300: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbracketgreater_1302, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet141[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbracketgreater_1304, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lbracketbar() {
		switch (currentRestartLabel) {
				/* Nonterminal lbracketbar production descriptor loads*/
			case ART_L_OcamlLexer_lbracketbar: 
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lbracketbar_1307, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lbracketbar: match production*/
			case ART_L_OcamlLexer_lbracketbar_1307: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbracketbar_1309, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet158[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbracketbar_1311, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_rbracket() {
		switch (currentRestartLabel) {
				/* Nonterminal rbracket production descriptor loads*/
			case ART_L_OcamlLexer_rbracket: 
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_rbracket_1314, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal rbracket: match production*/
			case ART_L_OcamlLexer_rbracket_1314: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_rbracket_1316, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_underscore() {
		switch (currentRestartLabel) {
				/* Nonterminal underscore production descriptor loads*/
			case ART_L_OcamlLexer_underscore: 
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_underscore_1319, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal underscore: match production*/
			case ART_L_OcamlLexer_underscore_1319: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_underscore_1321, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_backquote() {
		switch (currentRestartLabel) {
				/* Nonterminal backquote production descriptor loads*/
			case ART_L_OcamlLexer_backquote: 
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_backquote_1324, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal backquote: match production*/
			case ART_L_OcamlLexer_backquote_1324: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_backquote_1326, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lbrace() {
		switch (currentRestartLabel) {
				/* Nonterminal lbrace production descriptor loads*/
			case ART_L_OcamlLexer_lbrace: 
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lbrace_1329, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lbrace: match production*/
			case ART_L_OcamlLexer_lbrace_1329: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbrace_1331, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lbraceless() {
		switch (currentRestartLabel) {
				/* Nonterminal lbraceless production descriptor loads*/
			case ART_L_OcamlLexer_lbraceless: 
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lbraceless_1334, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lbraceless: match production*/
			case ART_L_OcamlLexer_lbraceless_1334: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbraceless_1336, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet126[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lbraceless_1338, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_bar() {
		switch (currentRestartLabel) {
				/* Nonterminal bar production descriptor loads*/
			case ART_L_OcamlLexer_bar: 
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_bar_1341, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal bar: match production*/
			case ART_L_OcamlLexer_bar_1341: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_bar_1343, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_barrbracket() {
		switch (currentRestartLabel) {
				/* Nonterminal barrbracket production descriptor loads*/
			case ART_L_OcamlLexer_barrbracket: 
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_barrbracket_1346, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal barrbracket: match production*/
			case ART_L_OcamlLexer_barrbracket_1346: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_barrbracket_1348, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet108[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_barrbracket_1350, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_barbar() {
		switch (currentRestartLabel) {
				/* Nonterminal barbar production descriptor loads*/
			case ART_L_OcamlLexer_barbar: 
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_barbar_1353, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal barbar: match production*/
			case ART_L_OcamlLexer_barbar_1353: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_barbar_1355, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet158[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_barbar_1357, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_rbrace() {
		switch (currentRestartLabel) {
				/* Nonterminal rbrace production descriptor loads*/
			case ART_L_OcamlLexer_rbrace: 
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_rbrace_1360, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal rbrace: match production*/
			case ART_L_OcamlLexer_rbrace_1360: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_rbrace_1362, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_tilde() {
		switch (currentRestartLabel) {
				/* Nonterminal tilde production descriptor loads*/
			case ART_L_OcamlLexer_tilde: 
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_tilde_1365, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal tilde: match production*/
			case ART_L_OcamlLexer_tilde_1365: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_tilde_1367, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_ident() {
		switch (currentRestartLabel) {
				/* Nonterminal ident production descriptor loads*/
			case ART_L_OcamlLexer_ident: 
				if (ARTSet137[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_ident_1370, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal ident: match production*/
			case ART_L_OcamlLexer_ident_1370: 
				/* Cat/unary template start */
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet137[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_ident_1374, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_ident_1378, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_ident_1374: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_ident_1376, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_letter; return; }
			case ART_L_OcamlLexer_ident_1376: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_ident_1372; return; }
			case ART_L_OcamlLexer_ident_1378: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_ident_1380, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_ident_1372; return; }
			case ART_A_OcamlLexer_ident_1372: 
				if (testRepeat(ART_L_OcamlLexer_ident_1372, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_ident_1387, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_ident_1382: 
				if (!ARTSet136[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_ident_1386, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_identifier_part_character; return; }
			case ART_L_OcamlLexer_ident_1386: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_ident_1382; return; }
			case ART_L_OcamlLexer_ident_1387: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_letter() {
		switch (currentRestartLabel) {
				/* Nonterminal letter production descriptor loads*/
			case ART_L_OcamlLexer_letter: 
				if (ARTSet156[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_letter_1390, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet130[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_letter_1394, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal letter: match production*/
			case ART_L_OcamlLexer_letter_1390: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_letter_1392, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_capital_letter; return; }
			case ART_L_OcamlLexer_letter_1392: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal letter: match production*/
			case ART_L_OcamlLexer_letter_1394: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_letter_1396, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lowercase_letter; return; }
			case ART_L_OcamlLexer_letter_1396: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_identifier_part_character() {
		switch (currentRestartLabel) {
				/* Nonterminal identifier_part_character production descriptor loads*/
			case ART_L_OcamlLexer_identifier_part_character: 
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1399, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1403, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1407, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1411, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1415, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1419, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1423, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1427, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1431, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1435, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1439, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1443, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1447, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1451, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1455, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1459, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1463, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1467, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1471, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1475, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1479, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1483, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1487, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1491, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1495, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1499, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1503, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1507, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1511, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1515, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1519, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1523, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1527, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1531, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1535, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1539, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1543, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1547, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1551, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1555, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1559, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1563, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1567, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1571, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1575, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1579, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1583, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1587, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1591, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1595, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1599, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1603, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1607, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1611, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1615, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1619, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1623, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1627, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1631, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1635, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1639, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1643, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1647, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_identifier_part_character_1651, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1399: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1401, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1403: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1405, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1407: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1409, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1411: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1413, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1415: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1417, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1419: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1421, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1423: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1425, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1427: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1429, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1431: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1433, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1435: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1437, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1439: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1441, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1443: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1445, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1447: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1449, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1451: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1453, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1455: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1457, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1459: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1461, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1463: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1465, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1467: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1469, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1471: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1473, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1475: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1477, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1479: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1481, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1483: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1485, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1487: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1489, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1491: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1493, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1495: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1497, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1499: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1501, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1503: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1505, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1507: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1509, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1511: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1513, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1515: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1517, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1519: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1521, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1523: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1525, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1527: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1529, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1531: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1533, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1535: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1537, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1539: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1541, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1543: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1545, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1547: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1549, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1551: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1553, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1555: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1557, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1559: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1561, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1563: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1565, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1567: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1569, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1571: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1573, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1575: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1577, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1579: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1581, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1583: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1585, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1587: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1589, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1591: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1593, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1595: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1597, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1599: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1601, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1603: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1605, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1607: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1609, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1611: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1613, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1615: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1617, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1619: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1621, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1623: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1625, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1627: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1629, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1631: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1633, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1635: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1637, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1639: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1641, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1643: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1645, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1647: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1649, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal identifier_part_character: match production*/
			case ART_L_OcamlLexer_identifier_part_character_1651: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_identifier_part_character_1653, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_capitalized_ident() {
		switch (currentRestartLabel) {
				/* Nonterminal capitalized_ident production descriptor loads*/
			case ART_L_OcamlLexer_capitalized_ident: 
				if (ARTSet156[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capitalized_ident_1656, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal capitalized_ident: match production*/
			case ART_L_OcamlLexer_capitalized_ident_1656: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_capitalized_ident_1658, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_capital_letter; return; }
			case ART_L_OcamlLexer_capitalized_ident_1658: 
				/* Nonterminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_capitalized_ident_1664, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_capitalized_ident_1659: 
				if (!ARTSet136[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_capitalized_ident_1663, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_identifier_part_character; return; }
			case ART_L_OcamlLexer_capitalized_ident_1663: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_capitalized_ident_1659; return; }
			case ART_L_OcamlLexer_capitalized_ident_1664: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_capital_letter() {
		switch (currentRestartLabel) {
				/* Nonterminal capital_letter production descriptor loads*/
			case ART_L_OcamlLexer_capital_letter: 
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1667, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1671, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1675, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1679, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1683, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1687, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1691, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1695, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1699, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1703, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1707, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1711, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1715, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1719, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1723, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1727, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1731, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1735, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1739, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1743, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1747, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1751, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1755, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1759, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1763, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_capital_letter_1767, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1667: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1669, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1671: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1673, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1675: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1677, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1679: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1681, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1683: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1685, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1687: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1689, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1691: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1693, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1695: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1697, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1699: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1701, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1703: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1705, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1707: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1709, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1711: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1713, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1715: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1717, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1719: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1721, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1723: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1725, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1727: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1729, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1731: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1733, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1735: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1737, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1739: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1741, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1743: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1745, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1747: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1749, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1751: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1753, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1755: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1757, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1759: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1761, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1763: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1765, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal capital_letter: match production*/
			case ART_L_OcamlLexer_capital_letter_1767: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_capital_letter_1769, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lowercase_ident() {
		switch (currentRestartLabel) {
				/* Nonterminal lowercase_ident production descriptor loads*/
			case ART_L_OcamlLexer_lowercase_ident: 
				if (ARTSet130[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_ident_1772, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lowercase_ident: match production*/
			case ART_L_OcamlLexer_lowercase_ident_1772: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_lowercase_ident_1774, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lowercase_letter; return; }
			case ART_L_OcamlLexer_lowercase_ident_1774: 
				/* Nonterminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_lowercase_ident_1780, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_lowercase_ident_1775: 
				if (!ARTSet136[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_lowercase_ident_1779, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_identifier_part_character; return; }
			case ART_L_OcamlLexer_lowercase_ident_1779: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_lowercase_ident_1775; return; }
			case ART_L_OcamlLexer_lowercase_ident_1780: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_lowercase_letter() {
		switch (currentRestartLabel) {
				/* Nonterminal lowercase_letter production descriptor loads*/
			case ART_L_OcamlLexer_lowercase_letter: 
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1783, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1787, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1791, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1795, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1799, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1803, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1807, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1811, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1815, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1819, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1823, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1827, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1831, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1835, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1839, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1843, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1847, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1851, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1855, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1859, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1863, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1867, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1871, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1875, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1879, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1883, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_lowercase_letter_1887, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1783: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1785, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1787: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1789, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1791: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1793, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1795: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1797, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1799: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1801, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1803: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1805, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1807: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1809, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1811: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1813, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1815: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1817, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1819: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1821, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1823: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1825, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1827: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1829, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1831: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1833, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1835: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1837, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1839: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1841, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1843: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1845, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1847: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1849, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1851: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1853, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1855: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1857, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1859: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1861, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1863: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1865, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1867: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1869, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1871: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1873, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1875: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1877, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1879: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1881, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1883: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1885, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal lowercase_letter: match production*/
			case ART_L_OcamlLexer_lowercase_letter_1887: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_lowercase_letter_1889, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_whitespace() {
		switch (currentRestartLabel) {
				/* Nonterminal whitespace production descriptor loads*/
			case ART_L_OcamlLexer_whitespace: 
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_whitespace_1892, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_whitespace_1896, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet34[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_whitespace_1900, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet35[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_whitespace_1904, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet27[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_whitespace_1908, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet5[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_whitespace_1912, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal whitespace: match production*/
			case ART_L_OcamlLexer_whitespace_1892: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_whitespace_1894, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal whitespace: match production*/
			case ART_L_OcamlLexer_whitespace_1896: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_whitespace_1898, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal whitespace: match production*/
			case ART_L_OcamlLexer_whitespace_1900: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__VT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_whitespace_1902, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal whitespace: match production*/
			case ART_L_OcamlLexer_whitespace_1904: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__FF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_whitespace_1906, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal whitespace: match production*/
			case ART_L_OcamlLexer_whitespace_1908: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__CR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_whitespace_1910, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal whitespace: match production*/
			case ART_L_OcamlLexer_whitespace_1912: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_whitespace_1914, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_comment() {
		switch (currentRestartLabel) {
				/* Nonterminal comment production descriptor loads*/
			case ART_L_OcamlLexer_comment: 
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_comment_1917, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal comment: match production*/
			case ART_L_OcamlLexer_comment_1917: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_comment_1919, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_comment_1921, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_comment_1925, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet123[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_comment_1929, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_comment_1925: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_comment_1927, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_comment; return; }
			case ART_L_OcamlLexer_comment_1927: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_comment_1923; return; }
			case ART_L_OcamlLexer_comment_1929: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_comment_1931, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_comment_1931: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_comment_1923; return; }
			case ART_A_OcamlLexer_comment_1923: 
				if (testRepeat(ART_L_OcamlLexer_comment_1923, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_comment_1934, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet104[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_comment_1936, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_not_comment() {
		switch (currentRestartLabel) {
				/* Nonterminal not_comment production descriptor loads*/
			case ART_L_OcamlLexer_not_comment: 
				if (ARTSet30[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1939, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet31[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1945, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet32[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1951, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1957, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet34[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1963, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet35[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1969, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1975, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1981, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1987, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1993, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_1999, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2005, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2011, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2017, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2023, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2029, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet104[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2046, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2052, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet27[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2069, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet5[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2075, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2081, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2087, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2093, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2099, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2105, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2111, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2117, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2123, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2129, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2135, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2141, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2147, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2153, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2159, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2165, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2171, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2177, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2183, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2189, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2195, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2201, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2207, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2213, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2219, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2225, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2231, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2237, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2243, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2249, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2255, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2261, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2267, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2273, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2279, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2285, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2291, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2297, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2303, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2309, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2315, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2321, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2327, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2333, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2339, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2345, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2351, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2357, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2363, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2369, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2375, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2381, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2387, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2393, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2399, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2405, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2411, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2417, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2423, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2429, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2435, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2441, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2447, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2453, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2459, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2465, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2471, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2477, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2483, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2489, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2495, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2501, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2507, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2513, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2519, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2525, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2531, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2537, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2543, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2549, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2555, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2561, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2567, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2573, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_comment_2579, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1939: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1941, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1943, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1943: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1945: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BEL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1947, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1949, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1949: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1951: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1953, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1955, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1955: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1957: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1959, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1961, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1961: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1963: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__VT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1965, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1967, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1967: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1969: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__FF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1971, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1973, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1973: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1975: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1977, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1979, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1979: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1981: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1983, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1985, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1985: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1987: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1989, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1991, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1991: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1993: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_1995, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_1997, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_1997: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_1999: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2001, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2003, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2003: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2005: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2007, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2009, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2009: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2011: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2013, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2015, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2015: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2017: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2019, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2021, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2021: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2023: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2025, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2027, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2027: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2029: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2031, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet122[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_not_comment_2035, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_not_comment_2041, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_not_comment_2035: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2037, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_asterisk; return; }
			case ART_L_OcamlLexer_not_comment_2037: 
				/* Nonterminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2039, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2039: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_not_comment_2033; return; }
			case ART_L_OcamlLexer_not_comment_2041: 
				/* Cat/unary template start */
				/* Epsilon template start */
				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2043, currentSPPFNode, currentSPPFRightChildNode);
				/* Epsilon template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_not_comment_2033; return; }
			case ART_A_OcamlLexer_not_comment_2033: 
				if (testRepeat(ART_L_OcamlLexer_not_comment_2033, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2046: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2048, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2050, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2050: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2052: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2054, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet117[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet117[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_not_comment_2058, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_not_comment_2064, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_not_comment_2058: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2060, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_rparen; return; }
			case ART_L_OcamlLexer_not_comment_2060: 
				/* Nonterminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2062, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2062: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_not_comment_2056; return; }
			case ART_L_OcamlLexer_not_comment_2064: 
				/* Cat/unary template start */
				/* Epsilon template start */
				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2066, currentSPPFNode, currentSPPFRightChildNode);
				/* Epsilon template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_not_comment_2056; return; }
			case ART_A_OcamlLexer_not_comment_2056: 
				if (testRepeat(ART_L_OcamlLexer_not_comment_2056, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2069: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__CR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2071, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2073, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2073: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2075: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2077, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2079, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2079: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2081: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2083, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2085, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2085: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2087: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COMMA, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2089, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2091, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2091: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2093: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2095, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2097, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2097: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2099: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2101, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2103, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2103: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2105: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2107, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2109, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2109: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2111: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2113, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2115, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2115: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2117: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2119, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2121, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2121: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2123: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2125, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2127, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2127: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2129: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2131, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2133, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2133: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2135: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2137, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2139, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2139: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2141: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2143, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2145, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2145: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2147: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2149, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2151, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2151: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2153: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2155, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2157, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2157: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2159: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2161, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2163, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2163: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2165: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2167, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2169, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2169: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2171: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2173, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2175, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2175: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2177: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2179, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2181, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2181: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2183: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2185, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2187, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2187: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2189: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2191, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2193, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2193: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2195: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2197, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2199, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2199: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2201: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2203, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2205, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2205: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2207: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2209, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2211, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2211: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2213: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2215, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2217, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2217: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2219: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2221, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2223, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2223: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2225: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2227, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2229, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2229: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2231: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2233, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2235, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2235: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2237: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2239, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2241, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2241: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2243: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2245, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2247, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2247: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2249: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2251, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2253, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2253: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2255: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2257, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2259, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2259: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2261: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2263, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2265, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2265: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2267: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2269, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2271, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2271: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2273: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2275, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2277, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2277: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2279: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2281, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2283, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2283: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2285: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2287, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2289, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2289: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2291: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2293, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2295, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2295: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2297: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2299, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2301, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2301: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2303: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2305, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2307, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2307: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2309: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2311, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2313, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2313: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2315: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2317, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2319, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2319: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2321: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2323, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2325, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2325: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2327: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2329, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2331, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2331: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2333: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2335, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2337, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2337: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2339: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2341, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2343, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2343: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2345: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2347, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2349, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2349: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2351: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2353, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2355, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2355: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2357: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2359, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2361, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2361: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2363: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2365, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2367, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2367: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2369: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2371, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2373, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2373: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2375: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2377, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2379, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2379: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2381: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2383, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2385, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2385: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2387: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2389, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2391, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2391: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2393: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2395, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2397, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2397: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2399: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2401, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2403, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2403: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2405: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2407, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2409, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2409: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2411: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2413, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2415, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2415: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2417: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2419, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2421, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2421: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2423: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2425, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2427, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2427: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2429: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2431, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2433, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2433: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2435: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2437, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2439, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2439: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2441: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2443, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2445, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2445: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2447: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2449, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2451, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2451: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2453: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2455, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2457, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2457: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2459: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2461, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2463, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2463: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2465: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2467, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2469, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2469: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2471: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2473, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2475, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2475: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2477: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2479, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2481, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2481: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2483: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2485, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2487, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2487: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2489: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2491, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2493, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2493: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2495: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2497, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2499, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2499: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2501: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2503, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2505, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2505: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2507: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2509, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2511, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2511: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2513: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2515, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2517, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2517: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2519: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2521, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2523, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2523: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2525: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2527, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2529, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2529: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2531: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2533, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2535, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2535: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2537: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2539, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2541, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2541: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2543: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2545, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2547, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2547: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2549: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2551, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2553, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2553: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2555: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2557, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2559, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2559: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2561: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2563, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2565, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2565: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2567: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2569, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2571, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2571: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2573: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2575, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_not_comment_2577, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_not_comment; return; }
			case ART_L_OcamlLexer_not_comment_2577: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_comment: match production*/
			case ART_L_OcamlLexer_not_comment_2579: 
				/* Cat/unary template start */
				/* Epsilon template start */
				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_comment_2581, currentSPPFNode, currentSPPFRightChildNode);
				/* Epsilon template end */
				/* Cat/unary template end */
				if (!ARTSet121[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_not_asterisk() {
		switch (currentRestartLabel) {
				/* Nonterminal not_asterisk production descriptor loads*/
			case ART_L_OcamlLexer_not_asterisk: 
				if (ARTSet30[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2584, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet31[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2588, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet32[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2592, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2596, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet34[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2600, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet35[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2604, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2608, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2612, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2616, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2620, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2624, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2628, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2632, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2636, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2640, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2644, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet104[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2648, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet27[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2652, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet5[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2656, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2660, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2664, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2668, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2672, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2676, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2680, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2684, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2688, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2692, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2696, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2700, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2704, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2708, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2712, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2716, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2720, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2724, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2728, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2732, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2736, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2740, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2744, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2748, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2752, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2756, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2760, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2764, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2768, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2772, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2776, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2780, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2784, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2788, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2792, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2796, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2800, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2804, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2808, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2812, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2816, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2820, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2824, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2828, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2832, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2836, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2840, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2844, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2848, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2852, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2856, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2860, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2864, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2868, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2872, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2876, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2880, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2884, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2888, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2892, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2896, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2900, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2904, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2908, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2912, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2916, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2920, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2924, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2928, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2932, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2936, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2940, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2944, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2948, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2952, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2956, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2960, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2964, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2968, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2972, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2976, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2980, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2984, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_asterisk_2988, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2584: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2586, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2588: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BEL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2590, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2592: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2594, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2596: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2598, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2600: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__VT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2602, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2604: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__FF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2606, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2608: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2610, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2612: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2614, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2616: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2618, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2620: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2622, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2624: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2626, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2628: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2630, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2632: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2634, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2636: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2638, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2640: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2642, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2644: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2646, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2648: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2650, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2652: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__CR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2654, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2656: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2658, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2660: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2662, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2664: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COMMA, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2666, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2668: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2670, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2672: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2674, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2676: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2678, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2680: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2682, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2684: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2686, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2688: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2690, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2692: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2694, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2696: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2698, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2700: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2702, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2704: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2706, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2708: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2710, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2712: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2714, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2716: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2718, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2720: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2722, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2724: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2726, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2728: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2730, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2732: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2734, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2736: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2738, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2740: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2742, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2744: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2746, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2748: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2750, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2752: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2754, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2756: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2758, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2760: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2762, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2764: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2766, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2768: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2770, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2772: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2774, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2776: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2778, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2780: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2782, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2784: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2786, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2788: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2790, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2792: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2794, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2796: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2798, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2800: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2802, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2804: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2806, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2808: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2810, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2812: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2814, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2816: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2818, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2820: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2822, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2824: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2826, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2828: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2830, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2832: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2834, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2836: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2838, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2840: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2842, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2844: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2846, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2848: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2850, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2852: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2854, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2856: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2858, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2860: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2862, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2864: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2866, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2868: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2870, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2872: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2874, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2876: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2878, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2880: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2882, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2884: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2886, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2888: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2890, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2892: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2894, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2896: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2898, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2900: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2902, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2904: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2906, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2908: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2910, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2912: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2914, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2916: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2918, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2920: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2922, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2924: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2926, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2928: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2930, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2932: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2934, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2936: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2938, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2940: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2942, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2944: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2946, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2948: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2950, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2952: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2954, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2956: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2958, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2960: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2962, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2964: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2966, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2968: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2970, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2972: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2974, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2976: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2978, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2980: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2982, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2984: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2986, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_asterisk: match production*/
			case ART_L_OcamlLexer_not_asterisk_2988: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_asterisk_2990, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_not_lparen() {
		switch (currentRestartLabel) {
				/* Nonterminal not_lparen production descriptor loads*/
			case ART_L_OcamlLexer_not_lparen: 
				if (ARTSet30[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_2993, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet31[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_2997, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet32[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3001, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3005, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet34[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3009, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet35[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3013, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3017, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3021, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3025, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3029, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3033, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3037, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3041, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3045, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3049, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3053, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet104[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3057, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet27[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3061, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet5[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3065, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3069, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3073, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3077, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3081, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3085, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3089, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3093, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3097, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3101, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3105, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3109, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3113, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3117, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3121, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3125, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3129, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3133, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3137, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3141, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3145, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3149, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3153, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3157, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3161, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3165, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3169, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3173, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3177, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3181, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3185, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3189, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3193, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3197, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3201, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3205, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3209, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3213, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3217, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3221, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3225, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3229, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3233, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3237, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3241, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3245, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3249, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3253, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3257, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3261, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3265, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3269, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3273, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3277, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3281, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3285, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3289, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3293, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3297, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3301, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3305, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3309, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3313, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3317, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3321, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3325, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3329, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3333, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3337, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3341, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3345, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3349, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3353, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3357, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3361, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3365, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3369, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3373, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3377, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3381, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3385, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3389, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3393, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_lparen_3397, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_2993: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_2995, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_2997: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BEL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_2999, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3001: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3003, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3005: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3007, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3009: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__VT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3011, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3013: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__FF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3015, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3017: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3019, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3021: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3023, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3025: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3027, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3029: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3031, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3033: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3035, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3037: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3039, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3041: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3043, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3045: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3047, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3049: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3051, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3053: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3055, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3057: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3059, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3061: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__CR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3063, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3065: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3067, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3069: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3071, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3073: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COMMA, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3075, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3077: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3079, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3081: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3083, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3085: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3087, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3089: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3091, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3093: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3095, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3097: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3099, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3101: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3103, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3105: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3107, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3109: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3111, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3113: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3115, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3117: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3119, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3121: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3123, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3125: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3127, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3129: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3131, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3133: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3135, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3137: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3139, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3141: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3143, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3145: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3147, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3149: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3151, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3153: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3155, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3157: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3159, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3161: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3163, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3165: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3167, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3169: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3171, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3173: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3175, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3177: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3179, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3181: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3183, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3185: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3187, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3189: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3191, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3193: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3195, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3197: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3199, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3201: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3203, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3205: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3207, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3209: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3211, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3213: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3215, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3217: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3219, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3221: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3223, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3225: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3227, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3229: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3231, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3233: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3235, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3237: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3239, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3241: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3243, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3245: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3247, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3249: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3251, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3253: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3255, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3257: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3259, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3261: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3263, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3265: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3267, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3269: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3271, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3273: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3275, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3277: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3279, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3281: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3283, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3285: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3287, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3289: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3291, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3293: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3295, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3297: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3299, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3301: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3303, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3305: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3307, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3309: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3311, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3313: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3315, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3317: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3319, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3321: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3323, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3325: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3327, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3329: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3331, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3333: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3335, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3337: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3339, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3341: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3343, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3345: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3347, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3349: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3351, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3353: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3355, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3357: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3359, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3361: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3363, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3365: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3367, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3369: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3371, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3373: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3375, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3377: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3379, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3381: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3383, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3385: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3387, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3389: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3391, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3393: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3395, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_lparen: match production*/
			case ART_L_OcamlLexer_not_lparen_3397: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_lparen_3399, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet119[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_not_rparen() {
		switch (currentRestartLabel) {
				/* Nonterminal not_rparen production descriptor loads*/
			case ART_L_OcamlLexer_not_rparen: 
				if (ARTSet30[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3402, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet31[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3406, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet32[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3410, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3414, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet34[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3418, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet35[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3422, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3426, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3430, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3434, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3438, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3442, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3446, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3450, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3454, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3458, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3462, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3466, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet27[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3470, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet5[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3474, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3478, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3482, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3486, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3490, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3494, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3498, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3502, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3506, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3510, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3514, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3518, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3522, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3526, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3530, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3534, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3538, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3542, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3546, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3550, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3554, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3558, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3562, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3566, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3570, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3574, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3578, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3582, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3586, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3590, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3594, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3598, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3602, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3606, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3610, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3614, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3618, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3622, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3626, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3630, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3634, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3638, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3642, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3646, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3650, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3654, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3658, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3662, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3666, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3670, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3674, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3678, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3682, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3686, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3690, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3694, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3698, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3702, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3706, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3710, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3714, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3718, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3722, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3726, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3730, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3734, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3738, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3742, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3746, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3750, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3754, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3758, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3762, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3766, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3770, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3774, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3778, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3782, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3786, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3790, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3794, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3798, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3802, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_not_rparen_3806, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3402: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3404, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3406: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BEL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3408, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3410: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3412, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3414: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3416, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3418: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__VT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3420, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3422: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__FF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3424, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3426: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3428, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3430: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3432, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3434: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3436, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3438: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3440, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3442: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3444, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3446: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3448, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3450: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3452, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3454: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3456, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3458: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3460, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3462: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3464, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3466: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3468, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3470: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__CR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3472, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3474: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3476, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3478: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3480, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3482: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COMMA, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3484, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3486: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3488, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3490: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3492, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3494: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3496, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3498: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3500, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3502: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3504, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3506: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3508, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3510: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3512, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3514: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3516, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3518: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3520, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3522: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3524, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3526: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3528, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3530: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3532, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3534: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3536, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3538: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3540, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3542: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3544, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3546: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3548, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3550: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3552, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3554: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3556, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3558: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3560, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3562: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3564, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3566: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3568, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3570: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3572, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3574: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3576, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3578: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3580, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3582: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3584, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3586: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3588, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3590: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3592, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3594: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3596, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3598: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3600, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3602: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3604, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3606: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3608, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3610: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3612, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3614: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3616, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3618: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3620, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3622: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3624, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3626: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3628, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3630: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3632, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3634: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3636, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3638: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3640, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3642: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3644, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3646: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3648, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3650: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3652, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3654: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3656, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3658: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3660, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3662: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3664, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3666: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3668, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3670: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3672, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3674: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3676, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3678: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3680, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3682: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3684, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3686: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3688, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3690: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3692, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3694: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3696, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3698: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3700, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3702: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3704, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3706: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3708, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3710: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3712, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3714: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3716, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3718: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3720, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3722: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3724, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3726: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3728, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3730: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3732, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3734: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3736, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3738: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3740, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3742: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3744, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3746: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3748, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3750: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3752, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3754: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3756, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3758: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3760, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3762: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3764, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3766: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3768, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3770: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3772, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3774: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3776, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3778: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3780, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3782: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3784, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3786: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3788, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3790: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3792, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3794: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3796, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3798: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3800, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3802: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3804, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal not_rparen: match production*/
			case ART_L_OcamlLexer_not_rparen_3806: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_not_rparen_3808, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet123[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_integer_literal() {
		switch (currentRestartLabel) {
				/* Nonterminal integer_literal production descriptor loads*/
			case ART_L_OcamlLexer_integer_literal: 
				if (ARTSet142[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_integer_literal_3811, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet13[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_integer_literal_3832, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet13[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_integer_literal_3868, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet13[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_integer_literal_3904, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal integer_literal: match production*/
			case ART_L_OcamlLexer_integer_literal_3811: 
				/* Cat/unary template start */
				/* Optional, non-nullable body template start */
				if (ARTSet149[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3817, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_integer_literal_3817, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet138[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3816, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
			case ART_L_OcamlLexer_integer_literal_3817: 
				/* Optional, non-nullable body template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3819, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_integer_literal_3819: 
				/* Nonterminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3830, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_integer_literal_3820: 
				if (!ARTSet22[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet149[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3823, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3827, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3823: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3825, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_integer_literal_3825: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3821; return; }
			case ART_L_OcamlLexer_integer_literal_3827: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3829, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3821; return; }
			case ART_A_OcamlLexer_integer_literal_3821: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3821, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_integer_literal_3820; return; }
			case ART_L_OcamlLexer_integer_literal_3830: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal integer_literal: match production*/
			case ART_L_OcamlLexer_integer_literal_3832: 
				/* Cat/unary template start */
				/* Optional, non-nullable body template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3838, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_integer_literal_3838, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet138[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3837, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
			case ART_L_OcamlLexer_integer_literal_3838: 
				/* Optional, non-nullable body template end */
				if (!ARTSet37[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3842, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3848, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3842: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3844, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet79[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3846, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3840; return; }
			case ART_L_OcamlLexer_integer_literal_3848: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3850, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet70[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3852, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3840; return; }
			case ART_A_OcamlLexer_integer_literal_3840: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3840, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet139[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3855, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hex_digit; return; }
			case ART_L_OcamlLexer_integer_literal_3855: 
				/* Nonterminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3866, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_integer_literal_3856: 
				if (!ARTSet6[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet139[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3859, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3863, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3859: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3861, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hex_digit; return; }
			case ART_L_OcamlLexer_integer_literal_3861: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3857; return; }
			case ART_L_OcamlLexer_integer_literal_3863: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3865, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3857; return; }
			case ART_A_OcamlLexer_integer_literal_3857: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3857, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_integer_literal_3856; return; }
			case ART_L_OcamlLexer_integer_literal_3866: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal integer_literal: match production*/
			case ART_L_OcamlLexer_integer_literal_3868: 
				/* Cat/unary template start */
				/* Optional, non-nullable body template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3874, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_integer_literal_3874, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet138[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3873, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
			case ART_L_OcamlLexer_integer_literal_3874: 
				/* Optional, non-nullable body template end */
				if (!ARTSet37[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3878, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3884, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3878: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3880, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet116[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3882, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3876; return; }
			case ART_L_OcamlLexer_integer_literal_3884: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3886, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet61[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3888, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3876; return; }
			case ART_A_OcamlLexer_integer_literal_3876: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3876, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet115[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3891, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_oct_digit; return; }
			case ART_L_OcamlLexer_integer_literal_3891: 
				/* Nonterminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3902, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_integer_literal_3892: 
				if (!ARTSet8[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet115[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3895, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3899, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3895: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3897, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_oct_digit; return; }
			case ART_L_OcamlLexer_integer_literal_3897: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3893; return; }
			case ART_L_OcamlLexer_integer_literal_3899: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3901, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3893; return; }
			case ART_A_OcamlLexer_integer_literal_3893: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3893, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_integer_literal_3892; return; }
			case ART_L_OcamlLexer_integer_literal_3902: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal integer_literal: match production*/
			case ART_L_OcamlLexer_integer_literal_3904: 
				/* Cat/unary template start */
				/* Optional, non-nullable body template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3910, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_integer_literal_3910, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet138[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3909, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
			case ART_L_OcamlLexer_integer_literal_3910: 
				/* Optional, non-nullable body template end */
				if (!ARTSet37[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3914, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3920, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3914: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3916, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet157[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3918, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3912; return; }
			case ART_L_OcamlLexer_integer_literal_3920: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3922, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet48[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3924, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3912; return; }
			case ART_A_OcamlLexer_integer_literal_3912: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3912, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet10[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3929, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3933, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3929: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3931, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3927; return; }
			case ART_L_OcamlLexer_integer_literal_3933: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3935, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3927; return; }
			case ART_A_OcamlLexer_integer_literal_3927: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3927, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_integer_literal_3951, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_integer_literal_3937: 
				if (!ARTSet11[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3940, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3944, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_integer_literal_3948, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_integer_literal_3940: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3942, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3938; return; }
			case ART_L_OcamlLexer_integer_literal_3944: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3946, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3938; return; }
			case ART_L_OcamlLexer_integer_literal_3948: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_integer_literal_3950, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_integer_literal_3938; return; }
			case ART_A_OcamlLexer_integer_literal_3938: 
				if (testRepeat(ART_L_OcamlLexer_integer_literal_3938, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_integer_literal_3937; return; }
			case ART_L_OcamlLexer_integer_literal_3951: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_dec_digit() {
		switch (currentRestartLabel) {
				/* Nonterminal dec_digit production descriptor loads*/
			case ART_L_OcamlLexer_dec_digit: 
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3954, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3958, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3962, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3966, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3970, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3974, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3978, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3982, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3986, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_dec_digit_3990, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3954: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3956, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3958: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3960, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3962: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3964, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3966: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3968, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3970: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3972, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3974: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3976, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3978: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3980, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3982: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3984, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3986: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3988, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal dec_digit: match production*/
			case ART_L_OcamlLexer_dec_digit_3990: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_dec_digit_3992, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_oct_digit() {
		switch (currentRestartLabel) {
				/* Nonterminal oct_digit production descriptor loads*/
			case ART_L_OcamlLexer_oct_digit: 
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_3995, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_3999, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_4003, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_4007, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_4011, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_4015, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_4019, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_oct_digit_4023, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_3995: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_3997, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_3999: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_4001, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_4003: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_4005, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_4007: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_4009, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_4011: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_4013, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_4015: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_4017, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_4019: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_4021, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal oct_digit: match production*/
			case ART_L_OcamlLexer_oct_digit_4023: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_oct_digit_4025, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_hex_digit() {
		switch (currentRestartLabel) {
				/* Nonterminal hex_digit production descriptor loads*/
			case ART_L_OcamlLexer_hex_digit: 
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4028, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4032, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4036, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4040, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4044, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4048, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4052, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4056, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4060, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4064, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4068, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4072, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4076, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4080, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4084, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4088, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4092, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4096, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4100, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4104, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4108, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_hex_digit_4112, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4028: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4030, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4032: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4034, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4036: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4038, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4040: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4042, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4044: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4046, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4048: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4050, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4052: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4054, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4056: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4058, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4060: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4062, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4064: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4066, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4068: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4070, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4072: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4074, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4076: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4078, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4080: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4082, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4084: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4086, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4088: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4090, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4092: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4094, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4096: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4098, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4100: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4102, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4104: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4106, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4108: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4110, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal hex_digit: match production*/
			case ART_L_OcamlLexer_hex_digit_4112: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_hex_digit_4114, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_float_literal() {
		switch (currentRestartLabel) {
				/* Nonterminal float_literal production descriptor loads*/
			case ART_L_OcamlLexer_float_literal: 
				if (ARTSet142[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_float_literal_4117, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal float_literal: match production*/
			case ART_L_OcamlLexer_float_literal_4117: 
				/* Cat/unary template start */
				/* Optional, non-nullable body template start */
				if (ARTSet149[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4123, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_float_literal_4123, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet138[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4122, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
			case ART_L_OcamlLexer_float_literal_4123: 
				/* Optional, non-nullable body template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4125, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_float_literal_4125: 
				/* Nonterminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4136, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_float_literal_4126: 
				if (!ARTSet22[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet149[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4129, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4133, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_float_literal_4129: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4131, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_float_literal_4131: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4127; return; }
			case ART_L_OcamlLexer_float_literal_4133: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4135, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4127; return; }
			case ART_A_OcamlLexer_float_literal_4127: 
				if (testRepeat(ART_L_OcamlLexer_float_literal_4127, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_float_literal_4126; return; }
			case ART_L_OcamlLexer_float_literal_4136: 
				/* Kleene closure, non-nullable body template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Optional, non-nullable body template start */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4153, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_float_literal_4153, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet147[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4141, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4152, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_float_literal_4142: 
				if (!ARTSet22[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet149[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4145, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4149, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_float_literal_4145: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4147, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_float_literal_4147: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4143; return; }
			case ART_L_OcamlLexer_float_literal_4149: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4151, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4143; return; }
			case ART_A_OcamlLexer_float_literal_4143: 
				if (testRepeat(ART_L_OcamlLexer_float_literal_4143, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_float_literal_4142; return; }
			case ART_L_OcamlLexer_float_literal_4152: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
			case ART_L_OcamlLexer_float_literal_4153: 
				/* Optional, non-nullable body template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Optional, non-nullable body template start */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4192, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_float_literal_4192, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet24[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4160, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4164, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_float_literal_4160: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4162, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4158; return; }
			case ART_L_OcamlLexer_float_literal_4164: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4166, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4158; return; }
			case ART_A_OcamlLexer_float_literal_4158: 
				if (testRepeat(ART_L_OcamlLexer_float_literal_4158, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet19[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Optional, non-nullable body template start */
				if (ARTSet149[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFRightChildNode = findSPPFEpsilon(currentInputIndex);
				temporarySPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4178, currentSPPFNode, currentSPPFRightChildNode);
				findDescriptor(ART_L_OcamlLexer_float_literal_4178, currentGSSNode, currentInputIndex, temporarySPPFNode);
 }
				if (!ARTSet20[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4171, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4175, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_float_literal_4171: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4173, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4169; return; }
			case ART_L_OcamlLexer_float_literal_4175: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4177, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4169; return; }
			case ART_A_OcamlLexer_float_literal_4169: 
				if (testRepeat(ART_L_OcamlLexer_float_literal_4169, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
			case ART_L_OcamlLexer_float_literal_4178: 
				/* Optional, non-nullable body template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4180, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_float_literal_4180: 
				/* Nonterminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4191, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_float_literal_4181: 
				if (!ARTSet22[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet149[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4184, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_float_literal_4188, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_float_literal_4184: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_float_literal_4186, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_float_literal_4186: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4182; return; }
			case ART_L_OcamlLexer_float_literal_4188: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_float_literal_4190, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_float_literal_4182; return; }
			case ART_A_OcamlLexer_float_literal_4182: 
				if (testRepeat(ART_L_OcamlLexer_float_literal_4182, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_float_literal_4181; return; }
			case ART_L_OcamlLexer_float_literal_4191: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
			case ART_L_OcamlLexer_float_literal_4192: 
				/* Optional, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_char_literal() {
		switch (currentRestartLabel) {
				/* Nonterminal char_literal production descriptor loads*/
			case ART_L_OcamlLexer_char_literal: 
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_char_literal_4195, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_char_literal_4203, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal char_literal: match production*/
			case ART_L_OcamlLexer_char_literal_4195: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_char_literal_4197, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet106[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_char_literal_4199, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_regular_char; return; }
			case ART_L_OcamlLexer_char_literal_4199: 
				/* Nonterminal template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_char_literal_4201, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal char_literal: match production*/
			case ART_L_OcamlLexer_char_literal_4203: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_char_literal_4205, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet144[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_char_literal_4207, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_escape_sequence; return; }
			case ART_L_OcamlLexer_char_literal_4207: 
				/* Nonterminal template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_char_literal_4209, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_regular_char() {
		switch (currentRestartLabel) {
				/* Nonterminal regular_char production descriptor loads*/
			case ART_L_OcamlLexer_regular_char: 
				if (ARTSet30[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4212, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet31[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4216, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet32[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4220, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4224, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet34[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4228, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet35[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4232, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4236, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4240, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4244, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4248, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4252, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4256, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4260, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4264, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4268, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet104[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4272, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4276, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4280, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4284, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4288, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4292, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4296, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4300, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4304, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4308, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4312, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4316, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4320, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4324, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4328, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4332, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4336, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4340, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4344, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4348, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4352, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4356, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4360, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4364, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4368, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4372, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4376, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4380, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4384, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4388, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4392, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4396, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4400, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4404, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4408, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4412, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4416, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4420, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4424, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4428, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4432, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4436, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4440, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4444, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4448, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4452, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4456, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4460, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4464, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4468, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4472, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4476, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4480, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4484, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4488, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4492, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4496, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4500, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4504, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4508, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4512, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4516, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4520, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4524, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4528, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4532, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4536, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4540, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4544, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4548, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4552, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4556, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4560, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4564, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4568, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4572, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4576, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4580, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4584, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4588, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4592, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4596, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4600, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_char_4604, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4212: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4214, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4216: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BEL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4218, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4220: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4222, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4224: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4226, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4228: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__VT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4230, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4232: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__FF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4234, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4236: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4238, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4240: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4242, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4244: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4246, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4248: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4250, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4252: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4254, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4256: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4258, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4260: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4262, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4264: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4266, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4268: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4270, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4272: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4274, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4276: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4278, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4280: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4282, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4284: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COMMA, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4286, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4288: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4290, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4292: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4294, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4296: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4298, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4300: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4302, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4304: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4306, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4308: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4310, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4312: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4314, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4316: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4318, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4320: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4322, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4324: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4326, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4328: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4330, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4332: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4334, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4336: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4338, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4340: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4342, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4344: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4346, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4348: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4350, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4352: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4354, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4356: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4358, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4360: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4362, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4364: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4366, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4368: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4370, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4372: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4374, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4376: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4378, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4380: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4382, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4384: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4386, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4388: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4390, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4392: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4394, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4396: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4398, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4400: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4402, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4404: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4406, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4408: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4410, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4412: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4414, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4416: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4418, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4420: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4422, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4424: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4426, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4428: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4430, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4432: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4434, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4436: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4438, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4440: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4442, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4444: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4446, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4448: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4450, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4452: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4454, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4456: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4458, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4460: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4462, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4464: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4466, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4468: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4470, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4472: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4474, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4476: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4478, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4480: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4482, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4484: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4486, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4488: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4490, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4492: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4494, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4496: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4498, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4500: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4502, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4504: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4506, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4508: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4510, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4512: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4514, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4516: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4518, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4520: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4522, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4524: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4526, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4528: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4530, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4532: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4534, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4536: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4538, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4540: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4542, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4544: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4546, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4548: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4550, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4552: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4554, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4556: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4558, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4560: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4562, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4564: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4566, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4568: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4570, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4572: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4574, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4576: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4578, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4580: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4582, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4584: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4586, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4588: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4590, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4592: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4594, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4596: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4598, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4600: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4602, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_char: match production*/
			case ART_L_OcamlLexer_regular_char_4604: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_char_4606, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet155[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_escape_sequence() {
		switch (currentRestartLabel) {
				/* Nonterminal escape_sequence production descriptor loads*/
			case ART_L_OcamlLexer_escape_sequence: 
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_escape_sequence_4609, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_escape_sequence_4648, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_escape_sequence_4658, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal escape_sequence: match production*/
			case ART_L_OcamlLexer_escape_sequence_4609: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4611, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet26[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4615, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4619, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4623, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4627, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4631, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4635, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4639, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_escape_sequence_4643, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_escape_sequence_4615: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4617, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_L_OcamlLexer_escape_sequence_4619: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4621, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_L_OcamlLexer_escape_sequence_4623: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4625, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_L_OcamlLexer_escape_sequence_4627: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4629, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_L_OcamlLexer_escape_sequence_4631: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4633, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_L_OcamlLexer_escape_sequence_4635: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4637, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_L_OcamlLexer_escape_sequence_4639: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4641, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_L_OcamlLexer_escape_sequence_4643: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4645, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_escape_sequence_4613; return; }
			case ART_A_OcamlLexer_escape_sequence_4613: 
				if (testRepeat(ART_L_OcamlLexer_escape_sequence_4613, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal escape_sequence: match production*/
			case ART_L_OcamlLexer_escape_sequence_4648: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4650, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_escape_sequence_4652, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_escape_sequence_4652: 
				/* Nonterminal template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_escape_sequence_4654, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_escape_sequence_4654: 
				/* Nonterminal template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_escape_sequence_4656, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_escape_sequence_4656: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal escape_sequence: match production*/
			case ART_L_OcamlLexer_escape_sequence_4658: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4660, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet79[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_escape_sequence_4662, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet139[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_escape_sequence_4664, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hex_digit; return; }
			case ART_L_OcamlLexer_escape_sequence_4664: 
				/* Nonterminal template end */
				if (!ARTSet139[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_escape_sequence_4666, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_hex_digit; return; }
			case ART_L_OcamlLexer_escape_sequence_4666: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_string_literal() {
		switch (currentRestartLabel) {
				/* Nonterminal string_literal production descriptor loads*/
			case ART_L_OcamlLexer_string_literal: 
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_string_literal_4669, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal string_literal: match production*/
			case ART_L_OcamlLexer_string_literal_4669: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_string_literal_4671, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet92[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_string_literal_4677, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_string_literal_4672: 
				if (!ARTSet101[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_string_literal_4676, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_string_character; return; }
			case ART_L_OcamlLexer_string_literal_4676: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_string_literal_4672; return; }
			case ART_L_OcamlLexer_string_literal_4677: 
				/* Kleene closure, non-nullable body template end */
				if (!ARTSet100[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_string_literal_4679, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_string_character() {
		switch (currentRestartLabel) {
				/* Nonterminal string_character production descriptor loads*/
			case ART_L_OcamlLexer_string_character: 
				if (ARTSet105[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_string_character_4682, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_string_character_4686, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet144[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_string_character_4690, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal string_character: match production*/
			case ART_L_OcamlLexer_string_character_4682: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_string_character_4684, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_regular_string_char; return; }
			case ART_L_OcamlLexer_string_character_4684: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal string_character: match production*/
			case ART_L_OcamlLexer_string_character_4686: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_string_character_4688, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_escape_sequence; return; }
			case ART_L_OcamlLexer_string_character_4688: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal string_character: match production*/
			case ART_L_OcamlLexer_string_character_4690: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKSLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_string_character_4692, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet27[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__CR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_string_character_4694, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_string_character_4705, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet150[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_string_character_4695: 
				if (!ARTSet28[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template start */
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_string_character_4698, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_string_character_4702, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_string_character_4698: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_string_character_4700, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_string_character_4696; return; }
			case ART_L_OcamlLexer_string_character_4702: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_string_character_4704, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_string_character_4696; return; }
			case ART_A_OcamlLexer_string_character_4696: 
				if (testRepeat(ART_L_OcamlLexer_string_character_4696, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				if (ARTSet150[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_string_character_4695; return; }
			case ART_L_OcamlLexer_string_character_4705: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_regular_string_char() {
		switch (currentRestartLabel) {
				/* Nonterminal regular_string_char production descriptor loads*/
			case ART_L_OcamlLexer_regular_string_char: 
				if (ARTSet30[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4708, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet31[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4712, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet32[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4716, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet33[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4720, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet34[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4724, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet35[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4728, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet146[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4732, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet36[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4736, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4740, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4744, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4748, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4752, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4756, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet155[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4760, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet151[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4764, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet104[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4768, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4772, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4776, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet152[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4780, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4784, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4788, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4792, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet37[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4796, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet38[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4800, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet39[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4804, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet40[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4808, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet41[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4812, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet42[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4816, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet43[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4820, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet44[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4824, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet45[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4828, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet46[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4832, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4836, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet103[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4840, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4844, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4848, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4852, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4856, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4860, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet47[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4864, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet48[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4868, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet49[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4872, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet50[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4876, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet51[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4880, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet52[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4884, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet53[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4888, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet54[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4892, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet55[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4896, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet56[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4900, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet57[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4904, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet58[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4908, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet59[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4912, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet60[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4916, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet61[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4920, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet62[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4924, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet63[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4928, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet64[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4932, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet65[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4936, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet66[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4940, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet67[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4944, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet68[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4948, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet69[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4952, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet70[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4956, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet71[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4960, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet72[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4964, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet127[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4968, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet108[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4972, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4976, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet98[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4980, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet160[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4984, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet161[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4988, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet157[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4992, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet154[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_4996, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet148[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5000, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet143[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5004, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet73[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5008, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet74[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5012, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet135[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5016, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet75[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5020, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet76[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5024, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet129[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5028, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet125[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5032, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet124[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5036, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet116[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5040, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet110[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5044, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet77[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5048, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet107[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5052, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet102[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5056, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet99[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5060, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet78[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5064, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet97[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5068, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet96[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5072, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet79[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5076, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet80[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5080, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet81[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5084, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet128[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5088, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5092, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet109[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5096, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_regular_string_char_5100, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4708: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4710, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4712: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BEL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4714, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4716: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4718, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4720: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4722, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4724: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__VT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4726, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4728: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__FF, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4730, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4732: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_e, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4734, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4736: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SPACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4738, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4740: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4742, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4744: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4746, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4748: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4750, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4752: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4754, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4756: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4758, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4760: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4762, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4764: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4766, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4768: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RPAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4770, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4772: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4774, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4776: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4778, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4780: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COMMA, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4782, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4784: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4786, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4788: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4790, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4792: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4794, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4796: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_0, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4798, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4800: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_1, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4802, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4804: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_2, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4806, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4808: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_3, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4810, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4812: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_4, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4814, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4816: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_5, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4818, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4820: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_6, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4822, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4824: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_7, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4826, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4828: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_8, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4830, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4832: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_9, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4834, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4836: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4838, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4840: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SEMICOLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4842, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4844: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4846, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4848: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4850, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4852: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4854, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4856: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4858, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4860: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4862, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4864: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_A, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4866, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4868: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_B, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4870, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4872: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_C, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4874, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4876: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_D, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4878, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4880: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_E, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4882, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4884: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_F, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4886, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4888: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_G, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4890, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4892: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_H, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4894, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4896: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_I, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4898, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4900: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_J, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4902, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4904: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_K, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4906, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4908: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_L, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4910, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4912: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_M, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4914, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4916: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_N, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4918, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4920: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_O, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4922, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4924: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_P, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4926, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4928: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4930, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4932: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_R, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4934, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4936: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_S, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4938, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4940: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_T, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4942, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4944: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_U, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4946, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4948: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_V, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4950, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4952: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_W, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4954, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4956: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_X, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4958, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4960: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4962, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4964: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_Z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4966, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4968: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4970, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4972: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4974, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4976: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4978, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4980: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4982, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4984: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BACKQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4986, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4988: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_a, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4990, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4992: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_b, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4994, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_4996: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_c, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_4998, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5000: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_d, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5002, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5004: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_f, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5006, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5008: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_g, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5010, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5012: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_h, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5014, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5016: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_i, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5018, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5020: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_j, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5022, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5024: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_k, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5026, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5028: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_l, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5030, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5032: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_m, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5034, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5036: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_n, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5038, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5040: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_o, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5042, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5044: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_p, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5046, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5048: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_q, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5050, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5052: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_r, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5054, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5056: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_s, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5058, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5060: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_t, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5062, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5064: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_u, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5066, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5068: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_v, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5070, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5072: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_w, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5074, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5076: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_x, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5078, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5080: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_y, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5082, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5084: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC_z, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5086, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5088: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5090, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5092: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5094, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5096: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__RBRACE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5098, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal regular_string_char: match production*/
			case ART_L_OcamlLexer_regular_string_char_5100: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_regular_string_char_5102, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet150[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_label_name() {
		switch (currentRestartLabel) {
				/* Nonterminal label_name production descriptor loads*/
			case ART_L_OcamlLexer_label_name: 
				if (ARTSet130[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_label_name_5105, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal label_name: match production*/
			case ART_L_OcamlLexer_label_name_5105: 
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_label_name_5107, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_lowercase_ident; return; }
			case ART_L_OcamlLexer_label_name_5107: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (!ARTSet153[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_label() {
		switch (currentRestartLabel) {
				/* Nonterminal label production descriptor loads*/
			case ART_L_OcamlLexer_label: 
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_label_5110, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal label: match production*/
			case ART_L_OcamlLexer_label_5110: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_label_5112, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet130[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_label_5114, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_label_name; return; }
			case ART_L_OcamlLexer_label_5114: 
				/* Nonterminal template end */
				if (!ARTSet153[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_label_5116, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_optlabel() {
		switch (currentRestartLabel) {
				/* Nonterminal optlabel production descriptor loads*/
			case ART_L_OcamlLexer_optlabel: 
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_optlabel_5119, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal optlabel: match production*/
			case ART_L_OcamlLexer_optlabel_5119: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_optlabel_5121, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet130[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_optlabel_5123, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_label_name; return; }
			case ART_L_OcamlLexer_optlabel_5123: 
				/* Nonterminal template end */
				if (!ARTSet153[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_optlabel_5125, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_infix_symbol() {
		switch (currentRestartLabel) {
				/* Nonterminal infix_symbol production descriptor loads*/
			case ART_L_OcamlLexer_infix_symbol: 
				if (ARTSet134[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_infix_symbol_5128, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal infix_symbol: match production*/
			case ART_L_OcamlLexer_infix_symbol_5128: 
				/* Cat/unary template start */
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5132, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5136, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5140, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5144, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5148, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5152, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5156, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5160, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5164, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5168, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5172, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5176, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_infix_symbol_5180, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_infix_symbol_5132: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5134, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5136: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5138, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5140: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5142, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5144: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5146, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5148: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5150, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5152: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5154, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5156: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5158, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5160: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5162, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5164: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5166, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5168: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5170, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5172: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5174, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5176: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5178, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_L_OcamlLexer_infix_symbol_5180: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_infix_symbol_5182, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_infix_symbol_5130; return; }
			case ART_A_OcamlLexer_infix_symbol_5130: 
				if (testRepeat(ART_L_OcamlLexer_infix_symbol_5130, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_infix_symbol_5189, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_infix_symbol_5184: 
				if (!ARTSet114[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_infix_symbol_5188, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_operator_char; return; }
			case ART_L_OcamlLexer_infix_symbol_5188: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_infix_symbol_5184; return; }
			case ART_L_OcamlLexer_infix_symbol_5189: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_prefix_symbol() {
		switch (currentRestartLabel) {
				/* Nonterminal prefix_symbol production descriptor loads*/
			case ART_L_OcamlLexer_prefix_symbol: 
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_prefix_symbol_5192, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet83[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_prefix_symbol_5202, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal prefix_symbol: match production*/
			case ART_L_OcamlLexer_prefix_symbol_5192: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_prefix_symbol_5194, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_prefix_symbol_5200, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_prefix_symbol_5195: 
				if (!ARTSet114[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_prefix_symbol_5199, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_operator_char; return; }
			case ART_L_OcamlLexer_prefix_symbol_5199: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_prefix_symbol_5195; return; }
			case ART_L_OcamlLexer_prefix_symbol_5200: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal prefix_symbol: match production*/
			case ART_L_OcamlLexer_prefix_symbol_5202: 
				/* Cat/unary template start */
				/* Do-first template start */
				/* Alternate template start */
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_prefix_symbol_5206, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 				findDescriptor(ART_L_OcamlLexer_prefix_symbol_5210, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
			case ART_L_OcamlLexer_prefix_symbol_5206: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_prefix_symbol_5208, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_prefix_symbol_5204; return; }
			case ART_L_OcamlLexer_prefix_symbol_5210: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_prefix_symbol_5212, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				{ currentRestartLabel = ART_A_OcamlLexer_prefix_symbol_5204; return; }
			case ART_A_OcamlLexer_prefix_symbol_5204: 
				if (testRepeat(ART_L_OcamlLexer_prefix_symbol_5204, currentGSSNode, currentInputIndex, currentSPPFNode)) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Alternate template end */
				/* Do-first template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_prefix_symbol_5219, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_prefix_symbol_5214: 
				if (!ARTSet114[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_prefix_symbol_5218, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_operator_char; return; }
			case ART_L_OcamlLexer_prefix_symbol_5218: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_prefix_symbol_5214; return; }
			case ART_L_OcamlLexer_prefix_symbol_5219: 
				/* Kleene closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_operator_char() {
		switch (currentRestartLabel) {
				/* Nonterminal operator_char production descriptor loads*/
			case ART_L_OcamlLexer_operator_char: 
				if (ARTSet159[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5222, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet84[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5226, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet85[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5230, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet162[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5234, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet121[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5238, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet112[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5242, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet138[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5246, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet147[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5250, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet86[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5254, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet153[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5258, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet126[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5262, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet145[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5266, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet141[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5270, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet113[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5274, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet87[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5278, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet88[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5282, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet158[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5286, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet131[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_operator_char_5290, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5222: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SHREIK, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5224, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5226: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DOLLAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5228, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5230: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERCENT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5232, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5234: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AMPERSAND, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5236, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5238: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__STAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5240, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5242: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PLUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5244, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5246: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__MINUS, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5248, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5250: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__PERIOD, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5252, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5254: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__SLASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5256, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5258: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__COLON, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5260, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5262: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__LT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5264, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5266: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__EQUAL, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5268, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5270: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__GT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5272, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5274: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__QUERY, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5276, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5278: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__AT, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5280, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5282: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__UPARROW, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5284, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5286: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__BAR, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5288, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal operator_char: match production*/
			case ART_L_OcamlLexer_operator_char_5290: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__TILDE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_operator_char_5292, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void ART_PF_linenum_directive() {
		switch (currentRestartLabel) {
				/* Nonterminal linenum_directive production descriptor loads*/
			case ART_L_OcamlLexer_linenum_directive: 
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_linenum_directive_5295, currentGSSNode, currentInputIndex, dummySPPFNode);
				if (ARTSet140[inputPairBuffer[currentInputPairReference]]) 
					findDescriptor(ART_L_OcamlLexer_linenum_directive_5305, currentGSSNode, currentInputIndex, dummySPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH; return; }
				/* Nonterminal linenum_directive: match production*/
			case ART_L_OcamlLexer_linenum_directive_5295: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_linenum_directive_5297, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Positive closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_linenum_directive_5303, currentGSSNode, currentInputIndex, currentSPPFNode);
				currentSPPFNode = dummySPPFNode;
			case ART_C_OcamlLexer_linenum_directive_5298: 
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_linenum_directive_5302, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_linenum_directive_5302: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet163[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_linenum_directive_5298; return; }
			case ART_L_OcamlLexer_linenum_directive_5303: 
				/* Positive closure, non-nullable body template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
				/* Nonterminal linenum_directive: match production*/
			case ART_L_OcamlLexer_linenum_directive_5305: 
				/* Cat/unary template start */
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__HASH, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_linenum_directive_5307, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Positive closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_linenum_directive_5313, currentGSSNode, currentInputIndex, currentSPPFNode);
				currentSPPFNode = dummySPPFNode;
			case ART_C_OcamlLexer_linenum_directive_5308: 
				if (!ARTSet149[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_linenum_directive_5312, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_dec_digit; return; }
			case ART_L_OcamlLexer_linenum_directive_5312: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_linenum_directive_5308; return; }
			case ART_L_OcamlLexer_linenum_directive_5313: 
				/* Positive closure, non-nullable body template end */
				if (!ARTSet100[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_linenum_directive_5315, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				if (!ARTSet92[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Kleene closure, non-nullable body template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_linenum_directive_5321, currentGSSNode, currentInputIndex, currentSPPFNode);
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) { 				currentSPPFNode = findSPPFEpsilon(currentInputIndex);
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
 }
				currentSPPFNode = dummySPPFNode;
				/*L*/
			case ART_C_OcamlLexer_linenum_directive_5316: 
				if (!ARTSet101[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Cat/unary template start */
				/* Nonterminal template start */
				currentGSSNode = findGSS(ART_L_OcamlLexer_linenum_directive_5320, currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_L_OcamlLexer_string_character; return; }
			case ART_L_OcamlLexer_linenum_directive_5320: 
				/* Nonterminal template end */
				/* Cat/unary template end */
				if (ARTSet100[inputPairBuffer[currentInputPairReference]]) 				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_C_OcamlLexer_linenum_directive_5316; return; }
			case ART_L_OcamlLexer_linenum_directive_5321: 
				/* Kleene closure, non-nullable body template end */
				if (!ARTSet100[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				/* Terminal template start */
				currentInputPairReference = inputSuccessorIndex[inputPairBuffer[currentInputPairReference + 1]][inputPairBuffer[currentInputPairReference]];
				currentSPPFRightChildNode = findSPPFTerminal(ART_TC__DBLQUOTE, currentInputIndex, inputPairBuffer[currentInputPairReference + 1]);
				currentInputIndex = inputPairBuffer[currentInputPairReference + 1];
				currentSPPFNode = findSPPF(ART_L_OcamlLexer_linenum_directive_5323, currentSPPFNode, currentSPPFRightChildNode);
				/* Terminal template end */
				/* Cat/unary template end */
				if (!ARTSet163[inputPairBuffer[currentInputPairReference]]) { currentRestartLabel = ART_X_DESPATCH; return; }
				pop(currentGSSNode, currentInputIndex, currentSPPFNode);
				{ currentRestartLabel = ART_X_DESPATCH /* Top level pop */; return; }
		}
	}

	public void parseGenerated(String characterString, int startLabel) {
		characterStringInput = characterString + "\0";
		startSymbolLabel = startLabel;
		inLanguage = false;
		if (!lexLongestMatch()) 		return;
		dummySPPFNode = findSPPFInitial(ART_L_DUMMY, 0, 0);
		currentSPPFNode = dummySPPFNode;
		rootGSSNode = findGSS(ART_L_EOS, 0, 0, 0);
		currentGSSNode = rootGSSNode;
		startClock();
		currentRestartLabel = startSymbolLabel;
		currentInputIndex = 0;
		currentInputPairReference = 0;
		while (true)
			switch (lhsL[currentRestartLabel]) {
				case ART_L_OcamlLexer_amper: 
					ART_PF_amper();
					break;
				case ART_L_OcamlLexer_amperamper: 
					ART_PF_amperamper();
					break;
				case ART_L_OcamlLexer_and: 
					ART_PF_and();
					break;
				case ART_L_OcamlLexer_as: 
					ART_PF_as();
					break;
				case ART_L_OcamlLexer_asr: 
					ART_PF_asr();
					break;
				case ART_L_OcamlLexer_assert: 
					ART_PF_assert();
					break;
				case ART_L_OcamlLexer_backquote: 
					ART_PF_backquote();
					break;
				case ART_L_OcamlLexer_bangequals: 
					ART_PF_bangequals();
					break;
				case ART_L_OcamlLexer_bar: 
					ART_PF_bar();
					break;
				case ART_L_OcamlLexer_barbar: 
					ART_PF_barbar();
					break;
				case ART_L_OcamlLexer_barrbracket: 
					ART_PF_barrbracket();
					break;
				case ART_L_OcamlLexer_begin: 
					ART_PF_begin();
					break;
				case ART_L_OcamlLexer_capital_letter: 
					ART_PF_capital_letter();
					break;
				case ART_L_OcamlLexer_capitalized_ident: 
					ART_PF_capitalized_ident();
					break;
				case ART_L_OcamlLexer_char_literal: 
					ART_PF_char_literal();
					break;
				case ART_L_OcamlLexer_class: 
					ART_PF_class();
					break;
				case ART_L_OcamlLexer_colon: 
					ART_PF_colon();
					break;
				case ART_L_OcamlLexer_coloncolon: 
					ART_PF_coloncolon();
					break;
				case ART_L_OcamlLexer_colonequals: 
					ART_PF_colonequals();
					break;
				case ART_L_OcamlLexer_colongreater: 
					ART_PF_colongreater();
					break;
				case ART_L_OcamlLexer_comma: 
					ART_PF_comma();
					break;
				case ART_L_OcamlLexer_comment: 
					ART_PF_comment();
					break;
				case ART_L_OcamlLexer_constraint: 
					ART_PF_constraint();
					break;
				case ART_L_OcamlLexer_dec_digit: 
					ART_PF_dec_digit();
					break;
				case ART_L_OcamlLexer_do: 
					ART_PF_do();
					break;
				case ART_L_OcamlLexer_done: 
					ART_PF_done();
					break;
				case ART_L_OcamlLexer_dot: 
					ART_PF_dot();
					break;
				case ART_L_OcamlLexer_dotdot: 
					ART_PF_dotdot();
					break;
				case ART_L_OcamlLexer_downto: 
					ART_PF_downto();
					break;
				case ART_L_OcamlLexer_else: 
					ART_PF_else();
					break;
				case ART_L_OcamlLexer_end: 
					ART_PF_end();
					break;
				case ART_L_OcamlLexer_equal: 
					ART_PF_equal();
					break;
				case ART_L_OcamlLexer_escape_sequence: 
					ART_PF_escape_sequence();
					break;
				case ART_L_OcamlLexer_exception: 
					ART_PF_exception();
					break;
				case ART_L_OcamlLexer_external: 
					ART_PF_external();
					break;
				case ART_L_OcamlLexer_false: 
					ART_PF_false();
					break;
				case ART_L_OcamlLexer_float_literal: 
					ART_PF_float_literal();
					break;
				case ART_L_OcamlLexer_for: 
					ART_PF_for();
					break;
				case ART_L_OcamlLexer_fun: 
					ART_PF_fun();
					break;
				case ART_L_OcamlLexer_function: 
					ART_PF_function();
					break;
				case ART_L_OcamlLexer_functor: 
					ART_PF_functor();
					break;
				case ART_L_OcamlLexer_greater: 
					ART_PF_greater();
					break;
				case ART_L_OcamlLexer_greaterrbrace: 
					ART_PF_greaterrbrace();
					break;
				case ART_L_OcamlLexer_greaterrbracket: 
					ART_PF_greaterrbracket();
					break;
				case ART_L_OcamlLexer_hash: 
					ART_PF_hash();
					break;
				case ART_L_OcamlLexer_hex_digit: 
					ART_PF_hex_digit();
					break;
				case ART_L_OcamlLexer_hyphen: 
					ART_PF_hyphen();
					break;
				case ART_L_OcamlLexer_hyphendot: 
					ART_PF_hyphendot();
					break;
				case ART_L_OcamlLexer_hyphengreater: 
					ART_PF_hyphengreater();
					break;
				case ART_L_OcamlLexer_ident: 
					ART_PF_ident();
					break;
				case ART_L_OcamlLexer_identifier_part_character: 
					ART_PF_identifier_part_character();
					break;
				case ART_L_OcamlLexer_if: 
					ART_PF_if();
					break;
				case ART_L_OcamlLexer_in: 
					ART_PF_in();
					break;
				case ART_L_OcamlLexer_include: 
					ART_PF_include();
					break;
				case ART_L_OcamlLexer_infix_symbol: 
					ART_PF_infix_symbol();
					break;
				case ART_L_OcamlLexer_inherit: 
					ART_PF_inherit();
					break;
				case ART_L_OcamlLexer_initializer: 
					ART_PF_initializer();
					break;
				case ART_L_OcamlLexer_input: 
					ART_PF_input();
					break;
				case ART_L_OcamlLexer_integer_literal: 
					ART_PF_integer_literal();
					break;
				case ART_L_OcamlLexer_label: 
					ART_PF_label();
					break;
				case ART_L_OcamlLexer_label_name: 
					ART_PF_label_name();
					break;
				case ART_L_OcamlLexer_land: 
					ART_PF_land();
					break;
				case ART_L_OcamlLexer_lazy: 
					ART_PF_lazy();
					break;
				case ART_L_OcamlLexer_lbrace: 
					ART_PF_lbrace();
					break;
				case ART_L_OcamlLexer_lbraceless: 
					ART_PF_lbraceless();
					break;
				case ART_L_OcamlLexer_lbracket: 
					ART_PF_lbracket();
					break;
				case ART_L_OcamlLexer_lbracketbar: 
					ART_PF_lbracketbar();
					break;
				case ART_L_OcamlLexer_lbracketgreater: 
					ART_PF_lbracketgreater();
					break;
				case ART_L_OcamlLexer_lbracketless: 
					ART_PF_lbracketless();
					break;
				case ART_L_OcamlLexer_less: 
					ART_PF_less();
					break;
				case ART_L_OcamlLexer_lesshyphen: 
					ART_PF_lesshyphen();
					break;
				case ART_L_OcamlLexer_let: 
					ART_PF_let();
					break;
				case ART_L_OcamlLexer_letter: 
					ART_PF_letter();
					break;
				case ART_L_OcamlLexer_linenum_directive: 
					ART_PF_linenum_directive();
					break;
				case ART_L_OcamlLexer_lor: 
					ART_PF_lor();
					break;
				case ART_L_OcamlLexer_lowercase_ident: 
					ART_PF_lowercase_ident();
					break;
				case ART_L_OcamlLexer_lowercase_letter: 
					ART_PF_lowercase_letter();
					break;
				case ART_L_OcamlLexer_lparen: 
					ART_PF_lparen();
					break;
				case ART_L_OcamlLexer_lsl: 
					ART_PF_lsl();
					break;
				case ART_L_OcamlLexer_lsr: 
					ART_PF_lsr();
					break;
				case ART_L_OcamlLexer_lxor: 
					ART_PF_lxor();
					break;
				case ART_L_OcamlLexer_match: 
					ART_PF_match();
					break;
				case ART_L_OcamlLexer_method: 
					ART_PF_method();
					break;
				case ART_L_OcamlLexer_mod: 
					ART_PF_mod();
					break;
				case ART_L_OcamlLexer_module: 
					ART_PF_module();
					break;
				case ART_L_OcamlLexer_mutable: 
					ART_PF_mutable();
					break;
				case ART_L_OcamlLexer_new: 
					ART_PF_new();
					break;
				case ART_L_OcamlLexer_not_asterisk: 
					ART_PF_not_asterisk();
					break;
				case ART_L_OcamlLexer_not_comment: 
					ART_PF_not_comment();
					break;
				case ART_L_OcamlLexer_not_lparen: 
					ART_PF_not_lparen();
					break;
				case ART_L_OcamlLexer_not_rparen: 
					ART_PF_not_rparen();
					break;
				case ART_L_OcamlLexer_object: 
					ART_PF_object();
					break;
				case ART_L_OcamlLexer_oct_digit: 
					ART_PF_oct_digit();
					break;
				case ART_L_OcamlLexer_of: 
					ART_PF_of();
					break;
				case ART_L_OcamlLexer_open: 
					ART_PF_open();
					break;
				case ART_L_OcamlLexer_operator_char: 
					ART_PF_operator_char();
					break;
				case ART_L_OcamlLexer_optlabel: 
					ART_PF_optlabel();
					break;
				case ART_L_OcamlLexer_or: 
					ART_PF_or();
					break;
				case ART_L_OcamlLexer_plus: 
					ART_PF_plus();
					break;
				case ART_L_OcamlLexer_prefix_symbol: 
					ART_PF_prefix_symbol();
					break;
				case ART_L_OcamlLexer_private: 
					ART_PF_private();
					break;
				case ART_L_OcamlLexer_question: 
					ART_PF_question();
					break;
				case ART_L_OcamlLexer_rbrace: 
					ART_PF_rbrace();
					break;
				case ART_L_OcamlLexer_rbracket: 
					ART_PF_rbracket();
					break;
				case ART_L_OcamlLexer_rec: 
					ART_PF_rec();
					break;
				case ART_L_OcamlLexer_regular_char: 
					ART_PF_regular_char();
					break;
				case ART_L_OcamlLexer_regular_string_char: 
					ART_PF_regular_string_char();
					break;
				case ART_L_OcamlLexer_rparen: 
					ART_PF_rparen();
					break;
				case ART_L_OcamlLexer_semi: 
					ART_PF_semi();
					break;
				case ART_L_OcamlLexer_semisemi: 
					ART_PF_semisemi();
					break;
				case ART_L_OcamlLexer_sig: 
					ART_PF_sig();
					break;
				case ART_L_OcamlLexer_squote: 
					ART_PF_squote();
					break;
				case ART_L_OcamlLexer_star: 
					ART_PF_star();
					break;
				case ART_L_OcamlLexer_string_character: 
					ART_PF_string_character();
					break;
				case ART_L_OcamlLexer_string_literal: 
					ART_PF_string_literal();
					break;
				case ART_L_OcamlLexer_struct: 
					ART_PF_struct();
					break;
				case ART_L_OcamlLexer_then: 
					ART_PF_then();
					break;
				case ART_L_OcamlLexer_tilde: 
					ART_PF_tilde();
					break;
				case ART_L_OcamlLexer_to: 
					ART_PF_to();
					break;
				case ART_L_OcamlLexer_true: 
					ART_PF_true();
					break;
				case ART_L_OcamlLexer_try: 
					ART_PF_try();
					break;
				case ART_L_OcamlLexer_type: 
					ART_PF_type();
					break;
				case ART_L_OcamlLexer_underscore: 
					ART_PF_underscore();
					break;
				case ART_L_OcamlLexer_val: 
					ART_PF_val();
					break;
				case ART_L_OcamlLexer_virtual: 
					ART_PF_virtual();
					break;
				case ART_L_OcamlLexer_when: 
					ART_PF_when();
					break;
				case ART_L_OcamlLexer_while: 
					ART_PF_while();
					break;
				case ART_L_OcamlLexer_whitespace: 
					ART_PF_whitespace();
					break;
				case ART_L_OcamlLexer_with: 
					ART_PF_with();
					break;
				case ART_X_DESPATCH: 
					if (noDescriptors()) { 
						checkAcceptance();
						stopClock();
						return;
					 }
					unloadDescriptor();
			}
	}

	public void artSet1initialise() {
		ARTSet1 = new boolean[artSetExtent];
		setBoolArray(ARTSet1, 0, artSetExtent, false);
		ARTSet1[4] = true;
		ARTSet1[5] = true;
		ARTSet1[6] = true;
		ARTSet1[7] = true;
		ARTSet1[8] = true;
		ARTSet1[9] = true;
		ARTSet1[10] = true;
		ARTSet1[11] = true;
		ARTSet1[12] = true;
		ARTSet1[13] = true;
		ARTSet1[14] = true;
		ARTSet1[15] = true;
		ARTSet1[16] = true;
		ARTSet1[17] = true;
		ARTSet1[18] = true;
		ARTSet1[19] = true;
		ARTSet1[20] = true;
		ARTSet1[21] = true;
		ARTSet1[22] = true;
		ARTSet1[23] = true;
		ARTSet1[24] = true;
		ARTSet1[25] = true;
		ARTSet1[26] = true;
		ARTSet1[27] = true;
		ARTSet1[28] = true;
		ARTSet1[29] = true;
		ARTSet1[30] = true;
		ARTSet1[31] = true;
		ARTSet1[32] = true;
		ARTSet1[33] = true;
		ARTSet1[34] = true;
		ARTSet1[35] = true;
		ARTSet1[36] = true;
		ARTSet1[37] = true;
		ARTSet1[38] = true;
		ARTSet1[39] = true;
		ARTSet1[40] = true;
		ARTSet1[41] = true;
		ARTSet1[42] = true;
		ARTSet1[43] = true;
		ARTSet1[44] = true;
		ARTSet1[45] = true;
		ARTSet1[46] = true;
		ARTSet1[47] = true;
		ARTSet1[48] = true;
		ARTSet1[49] = true;
		ARTSet1[50] = true;
		ARTSet1[51] = true;
		ARTSet1[52] = true;
		ARTSet1[53] = true;
		ARTSet1[54] = true;
		ARTSet1[55] = true;
		ARTSet1[56] = true;
		ARTSet1[57] = true;
		ARTSet1[58] = true;
		ARTSet1[59] = true;
		ARTSet1[60] = true;
		ARTSet1[61] = true;
		ARTSet1[62] = true;
		ARTSet1[63] = true;
		ARTSet1[64] = true;
		ARTSet1[65] = true;
		ARTSet1[66] = true;
		ARTSet1[67] = true;
		ARTSet1[68] = true;
		ARTSet1[70] = true;
		ARTSet1[71] = true;
		ARTSet1[72] = true;
		ARTSet1[73] = true;
		ARTSet1[74] = true;
		ARTSet1[75] = true;
		ARTSet1[76] = true;
		ARTSet1[77] = true;
		ARTSet1[78] = true;
		ARTSet1[79] = true;
		ARTSet1[80] = true;
		ARTSet1[81] = true;
		ARTSet1[82] = true;
		ARTSet1[83] = true;
		ARTSet1[84] = true;
		ARTSet1[85] = true;
		ARTSet1[86] = true;
		ARTSet1[87] = true;
		ARTSet1[88] = true;
		ARTSet1[89] = true;
		ARTSet1[90] = true;
		ARTSet1[91] = true;
		ARTSet1[92] = true;
		ARTSet1[93] = true;
		ARTSet1[94] = true;
		ARTSet1[95] = true;
		ARTSet1[96] = true;
		ARTSet1[97] = true;
		ARTSet1[98] = true;
		ARTSet1[99] = true;
		ARTSet1[100] = true;
		ARTSet1[101] = true;
		ARTSet1[102] = true;
		ARTSet1[103] = true;
	}

	public void artSet5initialise() {
		ARTSet5 = new boolean[artSetExtent];
		setBoolArray(ARTSet5, 0, artSetExtent, false);
		ARTSet5[5] = true;
	}

	public void artSet6initialise() {
		ARTSet6 = new boolean[artSetExtent];
		setBoolArray(ARTSet6, 0, artSetExtent, false);
		ARTSet6[25] = true;
		ARTSet6[26] = true;
		ARTSet6[27] = true;
		ARTSet6[28] = true;
		ARTSet6[29] = true;
		ARTSet6[30] = true;
		ARTSet6[31] = true;
		ARTSet6[32] = true;
		ARTSet6[33] = true;
		ARTSet6[34] = true;
		ARTSet6[42] = true;
		ARTSet6[43] = true;
		ARTSet6[44] = true;
		ARTSet6[45] = true;
		ARTSet6[46] = true;
		ARTSet6[47] = true;
		ARTSet6[72] = true;
		ARTSet6[74] = true;
		ARTSet6[75] = true;
		ARTSet6[76] = true;
		ARTSet6[77] = true;
		ARTSet6[78] = true;
		ARTSet6[79] = true;
	}

	public void artSet8initialise() {
		ARTSet8 = new boolean[artSetExtent];
		setBoolArray(ARTSet8, 0, artSetExtent, false);
		ARTSet8[25] = true;
		ARTSet8[26] = true;
		ARTSet8[27] = true;
		ARTSet8[28] = true;
		ARTSet8[29] = true;
		ARTSet8[30] = true;
		ARTSet8[31] = true;
		ARTSet8[32] = true;
		ARTSet8[72] = true;
	}

	public void artSet10initialise() {
		ARTSet10 = new boolean[artSetExtent];
		setBoolArray(ARTSet10, 0, artSetExtent, false);
		ARTSet10[25] = true;
		ARTSet10[26] = true;
	}

	public void artSet11initialise() {
		ARTSet11 = new boolean[artSetExtent];
		setBoolArray(ARTSet11, 0, artSetExtent, false);
		ARTSet11[25] = true;
		ARTSet11[26] = true;
		ARTSet11[72] = true;
	}

	public void artSet13initialise() {
		ARTSet13 = new boolean[artSetExtent];
		setBoolArray(ARTSet13, 0, artSetExtent, false);
		ARTSet13[22] = true;
		ARTSet13[25] = true;
	}

	public void artSet19initialise() {
		ARTSet19 = new boolean[artSetExtent];
		setBoolArray(ARTSet19, 0, artSetExtent, false);
		ARTSet19[20] = true;
		ARTSet19[22] = true;
		ARTSet19[25] = true;
		ARTSet19[26] = true;
		ARTSet19[27] = true;
		ARTSet19[28] = true;
		ARTSet19[29] = true;
		ARTSet19[30] = true;
		ARTSet19[31] = true;
		ARTSet19[32] = true;
		ARTSet19[33] = true;
		ARTSet19[34] = true;
	}

	public void artSet20initialise() {
		ARTSet20 = new boolean[artSetExtent];
		setBoolArray(ARTSet20, 0, artSetExtent, false);
		ARTSet20[20] = true;
		ARTSet20[22] = true;
	}

	public void artSet22initialise() {
		ARTSet22 = new boolean[artSetExtent];
		setBoolArray(ARTSet22, 0, artSetExtent, false);
		ARTSet22[25] = true;
		ARTSet22[26] = true;
		ARTSet22[27] = true;
		ARTSet22[28] = true;
		ARTSet22[29] = true;
		ARTSet22[30] = true;
		ARTSet22[31] = true;
		ARTSet22[32] = true;
		ARTSet22[33] = true;
		ARTSet22[34] = true;
		ARTSet22[72] = true;
	}

	public void artSet24initialise() {
		ARTSet24 = new boolean[artSetExtent];
		setBoolArray(ARTSet24, 0, artSetExtent, false);
		ARTSet24[46] = true;
		ARTSet24[78] = true;
	}

	public void artSet26initialise() {
		ARTSet26 = new boolean[artSetExtent];
		setBoolArray(ARTSet26, 0, artSetExtent, false);
		ARTSet26[9] = true;
		ARTSet26[11] = true;
		ARTSet26[16] = true;
		ARTSet26[69] = true;
		ARTSet26[75] = true;
		ARTSet26[87] = true;
		ARTSet26[91] = true;
		ARTSet26[93] = true;
	}

	public void artSet27initialise() {
		ARTSet27 = new boolean[artSetExtent];
		setBoolArray(ARTSet27, 0, artSetExtent, false);
		ARTSet27[8] = true;
	}

	public void artSet28initialise() {
		ARTSet28 = new boolean[artSetExtent];
		setBoolArray(ARTSet28, 0, artSetExtent, false);
		ARTSet28[4] = true;
		ARTSet28[9] = true;
	}

	public void artSet30initialise() {
		ARTSet30 = new boolean[artSetExtent];
		setBoolArray(ARTSet30, 0, artSetExtent, false);
		ARTSet30[1] = true;
	}

	public void artSet31initialise() {
		ARTSet31 = new boolean[artSetExtent];
		setBoolArray(ARTSet31, 0, artSetExtent, false);
		ARTSet31[2] = true;
	}

	public void artSet32initialise() {
		ARTSet32 = new boolean[artSetExtent];
		setBoolArray(ARTSet32, 0, artSetExtent, false);
		ARTSet32[3] = true;
	}

	public void artSet33initialise() {
		ARTSet33 = new boolean[artSetExtent];
		setBoolArray(ARTSet33, 0, artSetExtent, false);
		ARTSet33[4] = true;
	}

	public void artSet34initialise() {
		ARTSet34 = new boolean[artSetExtent];
		setBoolArray(ARTSet34, 0, artSetExtent, false);
		ARTSet34[6] = true;
	}

	public void artSet35initialise() {
		ARTSet35 = new boolean[artSetExtent];
		setBoolArray(ARTSet35, 0, artSetExtent, false);
		ARTSet35[7] = true;
	}

	public void artSet36initialise() {
		ARTSet36 = new boolean[artSetExtent];
		setBoolArray(ARTSet36, 0, artSetExtent, false);
		ARTSet36[9] = true;
	}

	public void artSet37initialise() {
		ARTSet37 = new boolean[artSetExtent];
		setBoolArray(ARTSet37, 0, artSetExtent, false);
		ARTSet37[25] = true;
	}

	public void artSet38initialise() {
		ARTSet38 = new boolean[artSetExtent];
		setBoolArray(ARTSet38, 0, artSetExtent, false);
		ARTSet38[26] = true;
	}

	public void artSet39initialise() {
		ARTSet39 = new boolean[artSetExtent];
		setBoolArray(ARTSet39, 0, artSetExtent, false);
		ARTSet39[27] = true;
	}

	public void artSet40initialise() {
		ARTSet40 = new boolean[artSetExtent];
		setBoolArray(ARTSet40, 0, artSetExtent, false);
		ARTSet40[28] = true;
	}

	public void artSet41initialise() {
		ARTSet41 = new boolean[artSetExtent];
		setBoolArray(ARTSet41, 0, artSetExtent, false);
		ARTSet41[29] = true;
	}

	public void artSet42initialise() {
		ARTSet42 = new boolean[artSetExtent];
		setBoolArray(ARTSet42, 0, artSetExtent, false);
		ARTSet42[30] = true;
	}

	public void artSet43initialise() {
		ARTSet43 = new boolean[artSetExtent];
		setBoolArray(ARTSet43, 0, artSetExtent, false);
		ARTSet43[31] = true;
	}

	public void artSet44initialise() {
		ARTSet44 = new boolean[artSetExtent];
		setBoolArray(ARTSet44, 0, artSetExtent, false);
		ARTSet44[32] = true;
	}

	public void artSet45initialise() {
		ARTSet45 = new boolean[artSetExtent];
		setBoolArray(ARTSet45, 0, artSetExtent, false);
		ARTSet45[33] = true;
	}

	public void artSet46initialise() {
		ARTSet46 = new boolean[artSetExtent];
		setBoolArray(ARTSet46, 0, artSetExtent, false);
		ARTSet46[34] = true;
	}

	public void artSet47initialise() {
		ARTSet47 = new boolean[artSetExtent];
		setBoolArray(ARTSet47, 0, artSetExtent, false);
		ARTSet47[42] = true;
	}

	public void artSet48initialise() {
		ARTSet48 = new boolean[artSetExtent];
		setBoolArray(ARTSet48, 0, artSetExtent, false);
		ARTSet48[43] = true;
	}

	public void artSet49initialise() {
		ARTSet49 = new boolean[artSetExtent];
		setBoolArray(ARTSet49, 0, artSetExtent, false);
		ARTSet49[44] = true;
	}

	public void artSet50initialise() {
		ARTSet50 = new boolean[artSetExtent];
		setBoolArray(ARTSet50, 0, artSetExtent, false);
		ARTSet50[45] = true;
	}

	public void artSet51initialise() {
		ARTSet51 = new boolean[artSetExtent];
		setBoolArray(ARTSet51, 0, artSetExtent, false);
		ARTSet51[46] = true;
	}

	public void artSet52initialise() {
		ARTSet52 = new boolean[artSetExtent];
		setBoolArray(ARTSet52, 0, artSetExtent, false);
		ARTSet52[47] = true;
	}

	public void artSet53initialise() {
		ARTSet53 = new boolean[artSetExtent];
		setBoolArray(ARTSet53, 0, artSetExtent, false);
		ARTSet53[48] = true;
	}

	public void artSet54initialise() {
		ARTSet54 = new boolean[artSetExtent];
		setBoolArray(ARTSet54, 0, artSetExtent, false);
		ARTSet54[49] = true;
	}

	public void artSet55initialise() {
		ARTSet55 = new boolean[artSetExtent];
		setBoolArray(ARTSet55, 0, artSetExtent, false);
		ARTSet55[50] = true;
	}

	public void artSet56initialise() {
		ARTSet56 = new boolean[artSetExtent];
		setBoolArray(ARTSet56, 0, artSetExtent, false);
		ARTSet56[51] = true;
	}

	public void artSet57initialise() {
		ARTSet57 = new boolean[artSetExtent];
		setBoolArray(ARTSet57, 0, artSetExtent, false);
		ARTSet57[52] = true;
	}

	public void artSet58initialise() {
		ARTSet58 = new boolean[artSetExtent];
		setBoolArray(ARTSet58, 0, artSetExtent, false);
		ARTSet58[53] = true;
	}

	public void artSet59initialise() {
		ARTSet59 = new boolean[artSetExtent];
		setBoolArray(ARTSet59, 0, artSetExtent, false);
		ARTSet59[54] = true;
	}

	public void artSet60initialise() {
		ARTSet60 = new boolean[artSetExtent];
		setBoolArray(ARTSet60, 0, artSetExtent, false);
		ARTSet60[55] = true;
	}

	public void artSet61initialise() {
		ARTSet61 = new boolean[artSetExtent];
		setBoolArray(ARTSet61, 0, artSetExtent, false);
		ARTSet61[56] = true;
	}

	public void artSet62initialise() {
		ARTSet62 = new boolean[artSetExtent];
		setBoolArray(ARTSet62, 0, artSetExtent, false);
		ARTSet62[57] = true;
	}

	public void artSet63initialise() {
		ARTSet63 = new boolean[artSetExtent];
		setBoolArray(ARTSet63, 0, artSetExtent, false);
		ARTSet63[58] = true;
	}

	public void artSet64initialise() {
		ARTSet64 = new boolean[artSetExtent];
		setBoolArray(ARTSet64, 0, artSetExtent, false);
		ARTSet64[59] = true;
	}

	public void artSet65initialise() {
		ARTSet65 = new boolean[artSetExtent];
		setBoolArray(ARTSet65, 0, artSetExtent, false);
		ARTSet65[60] = true;
	}

	public void artSet66initialise() {
		ARTSet66 = new boolean[artSetExtent];
		setBoolArray(ARTSet66, 0, artSetExtent, false);
		ARTSet66[61] = true;
	}

	public void artSet67initialise() {
		ARTSet67 = new boolean[artSetExtent];
		setBoolArray(ARTSet67, 0, artSetExtent, false);
		ARTSet67[62] = true;
	}

	public void artSet68initialise() {
		ARTSet68 = new boolean[artSetExtent];
		setBoolArray(ARTSet68, 0, artSetExtent, false);
		ARTSet68[63] = true;
	}

	public void artSet69initialise() {
		ARTSet69 = new boolean[artSetExtent];
		setBoolArray(ARTSet69, 0, artSetExtent, false);
		ARTSet69[64] = true;
	}

	public void artSet70initialise() {
		ARTSet70 = new boolean[artSetExtent];
		setBoolArray(ARTSet70, 0, artSetExtent, false);
		ARTSet70[65] = true;
	}

	public void artSet71initialise() {
		ARTSet71 = new boolean[artSetExtent];
		setBoolArray(ARTSet71, 0, artSetExtent, false);
		ARTSet71[66] = true;
	}

	public void artSet72initialise() {
		ARTSet72 = new boolean[artSetExtent];
		setBoolArray(ARTSet72, 0, artSetExtent, false);
		ARTSet72[67] = true;
	}

	public void artSet73initialise() {
		ARTSet73 = new boolean[artSetExtent];
		setBoolArray(ARTSet73, 0, artSetExtent, false);
		ARTSet73[80] = true;
	}

	public void artSet74initialise() {
		ARTSet74 = new boolean[artSetExtent];
		setBoolArray(ARTSet74, 0, artSetExtent, false);
		ARTSet74[81] = true;
	}

	public void artSet75initialise() {
		ARTSet75 = new boolean[artSetExtent];
		setBoolArray(ARTSet75, 0, artSetExtent, false);
		ARTSet75[83] = true;
	}

	public void artSet76initialise() {
		ARTSet76 = new boolean[artSetExtent];
		setBoolArray(ARTSet76, 0, artSetExtent, false);
		ARTSet76[84] = true;
	}

	public void artSet77initialise() {
		ARTSet77 = new boolean[artSetExtent];
		setBoolArray(ARTSet77, 0, artSetExtent, false);
		ARTSet77[90] = true;
	}

	public void artSet78initialise() {
		ARTSet78 = new boolean[artSetExtent];
		setBoolArray(ARTSet78, 0, artSetExtent, false);
		ARTSet78[94] = true;
	}

	public void artSet79initialise() {
		ARTSet79 = new boolean[artSetExtent];
		setBoolArray(ARTSet79, 0, artSetExtent, false);
		ARTSet79[97] = true;
	}

	public void artSet80initialise() {
		ARTSet80 = new boolean[artSetExtent];
		setBoolArray(ARTSet80, 0, artSetExtent, false);
		ARTSet80[98] = true;
	}

	public void artSet81initialise() {
		ARTSet81 = new boolean[artSetExtent];
		setBoolArray(ARTSet81, 0, artSetExtent, false);
		ARTSet81[99] = true;
	}

	public void artSet83initialise() {
		ARTSet83 = new boolean[artSetExtent];
		setBoolArray(ARTSet83, 0, artSetExtent, false);
		ARTSet83[40] = true;
		ARTSet83[103] = true;
	}

	public void artSet84initialise() {
		ARTSet84 = new boolean[artSetExtent];
		setBoolArray(ARTSet84, 0, artSetExtent, false);
		ARTSet84[13] = true;
	}

	public void artSet85initialise() {
		ARTSet85 = new boolean[artSetExtent];
		setBoolArray(ARTSet85, 0, artSetExtent, false);
		ARTSet85[14] = true;
	}

	public void artSet86initialise() {
		ARTSet86 = new boolean[artSetExtent];
		setBoolArray(ARTSet86, 0, artSetExtent, false);
		ARTSet86[24] = true;
	}

	public void artSet87initialise() {
		ARTSet87 = new boolean[artSetExtent];
		setBoolArray(ARTSet87, 0, artSetExtent, false);
		ARTSet87[41] = true;
	}

	public void artSet88initialise() {
		ARTSet88 = new boolean[artSetExtent];
		setBoolArray(ARTSet88, 0, artSetExtent, false);
		ARTSet88[71] = true;
	}

	public void artSet90initialise() {
		ARTSet90 = new boolean[artSetExtent];
		setBoolArray(ARTSet90, 0, artSetExtent, false);
		ARTSet90[11] = true;
		ARTSet90[25] = true;
		ARTSet90[26] = true;
		ARTSet90[27] = true;
		ARTSet90[28] = true;
		ARTSet90[29] = true;
		ARTSet90[30] = true;
		ARTSet90[31] = true;
		ARTSet90[32] = true;
		ARTSet90[33] = true;
		ARTSet90[34] = true;
	}

	public void artSet92initialise() {
		ARTSet92 = new boolean[artSetExtent];
		setBoolArray(ARTSet92, 0, artSetExtent, false);
		ARTSet92[1] = true;
		ARTSet92[2] = true;
		ARTSet92[3] = true;
		ARTSet92[4] = true;
		ARTSet92[6] = true;
		ARTSet92[7] = true;
		ARTSet92[9] = true;
		ARTSet92[10] = true;
		ARTSet92[11] = true;
		ARTSet92[12] = true;
		ARTSet92[13] = true;
		ARTSet92[14] = true;
		ARTSet92[15] = true;
		ARTSet92[16] = true;
		ARTSet92[17] = true;
		ARTSet92[18] = true;
		ARTSet92[19] = true;
		ARTSet92[20] = true;
		ARTSet92[21] = true;
		ARTSet92[22] = true;
		ARTSet92[23] = true;
		ARTSet92[24] = true;
		ARTSet92[25] = true;
		ARTSet92[26] = true;
		ARTSet92[27] = true;
		ARTSet92[28] = true;
		ARTSet92[29] = true;
		ARTSet92[30] = true;
		ARTSet92[31] = true;
		ARTSet92[32] = true;
		ARTSet92[33] = true;
		ARTSet92[34] = true;
		ARTSet92[35] = true;
		ARTSet92[36] = true;
		ARTSet92[37] = true;
		ARTSet92[38] = true;
		ARTSet92[39] = true;
		ARTSet92[40] = true;
		ARTSet92[41] = true;
		ARTSet92[42] = true;
		ARTSet92[43] = true;
		ARTSet92[44] = true;
		ARTSet92[45] = true;
		ARTSet92[46] = true;
		ARTSet92[47] = true;
		ARTSet92[48] = true;
		ARTSet92[49] = true;
		ARTSet92[50] = true;
		ARTSet92[51] = true;
		ARTSet92[52] = true;
		ARTSet92[53] = true;
		ARTSet92[54] = true;
		ARTSet92[55] = true;
		ARTSet92[56] = true;
		ARTSet92[57] = true;
		ARTSet92[58] = true;
		ARTSet92[59] = true;
		ARTSet92[60] = true;
		ARTSet92[61] = true;
		ARTSet92[62] = true;
		ARTSet92[63] = true;
		ARTSet92[64] = true;
		ARTSet92[65] = true;
		ARTSet92[66] = true;
		ARTSet92[67] = true;
		ARTSet92[68] = true;
		ARTSet92[69] = true;
		ARTSet92[70] = true;
		ARTSet92[71] = true;
		ARTSet92[72] = true;
		ARTSet92[73] = true;
		ARTSet92[74] = true;
		ARTSet92[75] = true;
		ARTSet92[76] = true;
		ARTSet92[77] = true;
		ARTSet92[78] = true;
		ARTSet92[79] = true;
		ARTSet92[80] = true;
		ARTSet92[81] = true;
		ARTSet92[82] = true;
		ARTSet92[83] = true;
		ARTSet92[84] = true;
		ARTSet92[85] = true;
		ARTSet92[86] = true;
		ARTSet92[87] = true;
		ARTSet92[88] = true;
		ARTSet92[89] = true;
		ARTSet92[90] = true;
		ARTSet92[91] = true;
		ARTSet92[92] = true;
		ARTSet92[93] = true;
		ARTSet92[94] = true;
		ARTSet92[95] = true;
		ARTSet92[96] = true;
		ARTSet92[97] = true;
		ARTSet92[98] = true;
		ARTSet92[99] = true;
		ARTSet92[100] = true;
		ARTSet92[101] = true;
		ARTSet92[102] = true;
		ARTSet92[103] = true;
	}

	public void artSet95initialise() {
		ARTSet95 = new boolean[artSetExtent];
		setBoolArray(ARTSet95, 0, artSetExtent, false);
		ARTSet95[4] = true;
		ARTSet95[5] = true;
		ARTSet95[6] = true;
		ARTSet95[7] = true;
		ARTSet95[8] = true;
		ARTSet95[9] = true;
	}

	public void artSet96initialise() {
		ARTSet96 = new boolean[artSetExtent];
		setBoolArray(ARTSet96, 0, artSetExtent, false);
		ARTSet96[96] = true;
	}

	public void artSet97initialise() {
		ARTSet97 = new boolean[artSetExtent];
		setBoolArray(ARTSet97, 0, artSetExtent, false);
		ARTSet97[95] = true;
	}

	public void artSet98initialise() {
		ARTSet98 = new boolean[artSetExtent];
		setBoolArray(ARTSet98, 0, artSetExtent, false);
		ARTSet98[72] = true;
	}

	public void artSet99initialise() {
		ARTSet99 = new boolean[artSetExtent];
		setBoolArray(ARTSet99, 0, artSetExtent, false);
		ARTSet99[93] = true;
	}

	public void artSet100initialise() {
		ARTSet100 = new boolean[artSetExtent];
		setBoolArray(ARTSet100, 0, artSetExtent, false);
		ARTSet100[11] = true;
	}

	public void artSet101initialise() {
		ARTSet101 = new boolean[artSetExtent];
		setBoolArray(ARTSet101, 0, artSetExtent, false);
		ARTSet101[1] = true;
		ARTSet101[2] = true;
		ARTSet101[3] = true;
		ARTSet101[4] = true;
		ARTSet101[6] = true;
		ARTSet101[7] = true;
		ARTSet101[9] = true;
		ARTSet101[10] = true;
		ARTSet101[12] = true;
		ARTSet101[13] = true;
		ARTSet101[14] = true;
		ARTSet101[15] = true;
		ARTSet101[16] = true;
		ARTSet101[17] = true;
		ARTSet101[18] = true;
		ARTSet101[19] = true;
		ARTSet101[20] = true;
		ARTSet101[21] = true;
		ARTSet101[22] = true;
		ARTSet101[23] = true;
		ARTSet101[24] = true;
		ARTSet101[25] = true;
		ARTSet101[26] = true;
		ARTSet101[27] = true;
		ARTSet101[28] = true;
		ARTSet101[29] = true;
		ARTSet101[30] = true;
		ARTSet101[31] = true;
		ARTSet101[32] = true;
		ARTSet101[33] = true;
		ARTSet101[34] = true;
		ARTSet101[35] = true;
		ARTSet101[36] = true;
		ARTSet101[37] = true;
		ARTSet101[38] = true;
		ARTSet101[39] = true;
		ARTSet101[40] = true;
		ARTSet101[41] = true;
		ARTSet101[42] = true;
		ARTSet101[43] = true;
		ARTSet101[44] = true;
		ARTSet101[45] = true;
		ARTSet101[46] = true;
		ARTSet101[47] = true;
		ARTSet101[48] = true;
		ARTSet101[49] = true;
		ARTSet101[50] = true;
		ARTSet101[51] = true;
		ARTSet101[52] = true;
		ARTSet101[53] = true;
		ARTSet101[54] = true;
		ARTSet101[55] = true;
		ARTSet101[56] = true;
		ARTSet101[57] = true;
		ARTSet101[58] = true;
		ARTSet101[59] = true;
		ARTSet101[60] = true;
		ARTSet101[61] = true;
		ARTSet101[62] = true;
		ARTSet101[63] = true;
		ARTSet101[64] = true;
		ARTSet101[65] = true;
		ARTSet101[66] = true;
		ARTSet101[67] = true;
		ARTSet101[68] = true;
		ARTSet101[69] = true;
		ARTSet101[70] = true;
		ARTSet101[71] = true;
		ARTSet101[72] = true;
		ARTSet101[73] = true;
		ARTSet101[74] = true;
		ARTSet101[75] = true;
		ARTSet101[76] = true;
		ARTSet101[77] = true;
		ARTSet101[78] = true;
		ARTSet101[79] = true;
		ARTSet101[80] = true;
		ARTSet101[81] = true;
		ARTSet101[82] = true;
		ARTSet101[83] = true;
		ARTSet101[84] = true;
		ARTSet101[85] = true;
		ARTSet101[86] = true;
		ARTSet101[87] = true;
		ARTSet101[88] = true;
		ARTSet101[89] = true;
		ARTSet101[90] = true;
		ARTSet101[91] = true;
		ARTSet101[92] = true;
		ARTSet101[93] = true;
		ARTSet101[94] = true;
		ARTSet101[95] = true;
		ARTSet101[96] = true;
		ARTSet101[97] = true;
		ARTSet101[98] = true;
		ARTSet101[99] = true;
		ARTSet101[100] = true;
		ARTSet101[101] = true;
		ARTSet101[102] = true;
		ARTSet101[103] = true;
	}

	public void artSet102initialise() {
		ARTSet102 = new boolean[artSetExtent];
		setBoolArray(ARTSet102, 0, artSetExtent, false);
		ARTSet102[92] = true;
	}

	public void artSet103initialise() {
		ARTSet103 = new boolean[artSetExtent];
		setBoolArray(ARTSet103, 0, artSetExtent, false);
		ARTSet103[36] = true;
	}

	public void artSet104initialise() {
		ARTSet104 = new boolean[artSetExtent];
		setBoolArray(ARTSet104, 0, artSetExtent, false);
		ARTSet104[18] = true;
	}

	public void artSet105initialise() {
		ARTSet105 = new boolean[artSetExtent];
		setBoolArray(ARTSet105, 0, artSetExtent, false);
		ARTSet105[1] = true;
		ARTSet105[2] = true;
		ARTSet105[3] = true;
		ARTSet105[4] = true;
		ARTSet105[6] = true;
		ARTSet105[7] = true;
		ARTSet105[9] = true;
		ARTSet105[10] = true;
		ARTSet105[12] = true;
		ARTSet105[13] = true;
		ARTSet105[14] = true;
		ARTSet105[15] = true;
		ARTSet105[16] = true;
		ARTSet105[17] = true;
		ARTSet105[18] = true;
		ARTSet105[19] = true;
		ARTSet105[20] = true;
		ARTSet105[21] = true;
		ARTSet105[22] = true;
		ARTSet105[23] = true;
		ARTSet105[24] = true;
		ARTSet105[25] = true;
		ARTSet105[26] = true;
		ARTSet105[27] = true;
		ARTSet105[28] = true;
		ARTSet105[29] = true;
		ARTSet105[30] = true;
		ARTSet105[31] = true;
		ARTSet105[32] = true;
		ARTSet105[33] = true;
		ARTSet105[34] = true;
		ARTSet105[35] = true;
		ARTSet105[36] = true;
		ARTSet105[37] = true;
		ARTSet105[38] = true;
		ARTSet105[39] = true;
		ARTSet105[40] = true;
		ARTSet105[41] = true;
		ARTSet105[42] = true;
		ARTSet105[43] = true;
		ARTSet105[44] = true;
		ARTSet105[45] = true;
		ARTSet105[46] = true;
		ARTSet105[47] = true;
		ARTSet105[48] = true;
		ARTSet105[49] = true;
		ARTSet105[50] = true;
		ARTSet105[51] = true;
		ARTSet105[52] = true;
		ARTSet105[53] = true;
		ARTSet105[54] = true;
		ARTSet105[55] = true;
		ARTSet105[56] = true;
		ARTSet105[57] = true;
		ARTSet105[58] = true;
		ARTSet105[59] = true;
		ARTSet105[60] = true;
		ARTSet105[61] = true;
		ARTSet105[62] = true;
		ARTSet105[63] = true;
		ARTSet105[64] = true;
		ARTSet105[65] = true;
		ARTSet105[66] = true;
		ARTSet105[67] = true;
		ARTSet105[68] = true;
		ARTSet105[70] = true;
		ARTSet105[71] = true;
		ARTSet105[72] = true;
		ARTSet105[73] = true;
		ARTSet105[74] = true;
		ARTSet105[75] = true;
		ARTSet105[76] = true;
		ARTSet105[77] = true;
		ARTSet105[78] = true;
		ARTSet105[79] = true;
		ARTSet105[80] = true;
		ARTSet105[81] = true;
		ARTSet105[82] = true;
		ARTSet105[83] = true;
		ARTSet105[84] = true;
		ARTSet105[85] = true;
		ARTSet105[86] = true;
		ARTSet105[87] = true;
		ARTSet105[88] = true;
		ARTSet105[89] = true;
		ARTSet105[90] = true;
		ARTSet105[91] = true;
		ARTSet105[92] = true;
		ARTSet105[93] = true;
		ARTSet105[94] = true;
		ARTSet105[95] = true;
		ARTSet105[96] = true;
		ARTSet105[97] = true;
		ARTSet105[98] = true;
		ARTSet105[99] = true;
		ARTSet105[100] = true;
		ARTSet105[101] = true;
		ARTSet105[102] = true;
		ARTSet105[103] = true;
	}

	public void artSet106initialise() {
		ARTSet106 = new boolean[artSetExtent];
		setBoolArray(ARTSet106, 0, artSetExtent, false);
		ARTSet106[1] = true;
		ARTSet106[2] = true;
		ARTSet106[3] = true;
		ARTSet106[4] = true;
		ARTSet106[6] = true;
		ARTSet106[7] = true;
		ARTSet106[9] = true;
		ARTSet106[10] = true;
		ARTSet106[11] = true;
		ARTSet106[12] = true;
		ARTSet106[13] = true;
		ARTSet106[14] = true;
		ARTSet106[15] = true;
		ARTSet106[17] = true;
		ARTSet106[18] = true;
		ARTSet106[19] = true;
		ARTSet106[20] = true;
		ARTSet106[21] = true;
		ARTSet106[22] = true;
		ARTSet106[23] = true;
		ARTSet106[24] = true;
		ARTSet106[25] = true;
		ARTSet106[26] = true;
		ARTSet106[27] = true;
		ARTSet106[28] = true;
		ARTSet106[29] = true;
		ARTSet106[30] = true;
		ARTSet106[31] = true;
		ARTSet106[32] = true;
		ARTSet106[33] = true;
		ARTSet106[34] = true;
		ARTSet106[35] = true;
		ARTSet106[36] = true;
		ARTSet106[37] = true;
		ARTSet106[38] = true;
		ARTSet106[39] = true;
		ARTSet106[40] = true;
		ARTSet106[41] = true;
		ARTSet106[42] = true;
		ARTSet106[43] = true;
		ARTSet106[44] = true;
		ARTSet106[45] = true;
		ARTSet106[46] = true;
		ARTSet106[47] = true;
		ARTSet106[48] = true;
		ARTSet106[49] = true;
		ARTSet106[50] = true;
		ARTSet106[51] = true;
		ARTSet106[52] = true;
		ARTSet106[53] = true;
		ARTSet106[54] = true;
		ARTSet106[55] = true;
		ARTSet106[56] = true;
		ARTSet106[57] = true;
		ARTSet106[58] = true;
		ARTSet106[59] = true;
		ARTSet106[60] = true;
		ARTSet106[61] = true;
		ARTSet106[62] = true;
		ARTSet106[63] = true;
		ARTSet106[64] = true;
		ARTSet106[65] = true;
		ARTSet106[66] = true;
		ARTSet106[67] = true;
		ARTSet106[68] = true;
		ARTSet106[70] = true;
		ARTSet106[71] = true;
		ARTSet106[72] = true;
		ARTSet106[73] = true;
		ARTSet106[74] = true;
		ARTSet106[75] = true;
		ARTSet106[76] = true;
		ARTSet106[77] = true;
		ARTSet106[78] = true;
		ARTSet106[79] = true;
		ARTSet106[80] = true;
		ARTSet106[81] = true;
		ARTSet106[82] = true;
		ARTSet106[83] = true;
		ARTSet106[84] = true;
		ARTSet106[85] = true;
		ARTSet106[86] = true;
		ARTSet106[87] = true;
		ARTSet106[88] = true;
		ARTSet106[89] = true;
		ARTSet106[90] = true;
		ARTSet106[91] = true;
		ARTSet106[92] = true;
		ARTSet106[93] = true;
		ARTSet106[94] = true;
		ARTSet106[95] = true;
		ARTSet106[96] = true;
		ARTSet106[97] = true;
		ARTSet106[98] = true;
		ARTSet106[99] = true;
		ARTSet106[100] = true;
		ARTSet106[101] = true;
		ARTSet106[102] = true;
		ARTSet106[103] = true;
	}

	public void artSet107initialise() {
		ARTSet107 = new boolean[artSetExtent];
		setBoolArray(ARTSet107, 0, artSetExtent, false);
		ARTSet107[91] = true;
	}

	public void artSet108initialise() {
		ARTSet108 = new boolean[artSetExtent];
		setBoolArray(ARTSet108, 0, artSetExtent, false);
		ARTSet108[70] = true;
	}

	public void artSet109initialise() {
		ARTSet109 = new boolean[artSetExtent];
		setBoolArray(ARTSet109, 0, artSetExtent, false);
		ARTSet109[102] = true;
	}

	public void artSet110initialise() {
		ARTSet110 = new boolean[artSetExtent];
		setBoolArray(ARTSet110, 0, artSetExtent, false);
		ARTSet110[89] = true;
	}

	public void artSet111initialise() {
		ARTSet111 = new boolean[artSetExtent];
		setBoolArray(ARTSet111, 0, artSetExtent, false);
		ARTSet111[10] = true;
		ARTSet111[40] = true;
		ARTSet111[103] = true;
	}

	public void artSet112initialise() {
		ARTSet112 = new boolean[artSetExtent];
		setBoolArray(ARTSet112, 0, artSetExtent, false);
		ARTSet112[20] = true;
	}

	public void artSet113initialise() {
		ARTSet113 = new boolean[artSetExtent];
		setBoolArray(ARTSet113, 0, artSetExtent, false);
		ARTSet113[40] = true;
	}

	public void artSet114initialise() {
		ARTSet114 = new boolean[artSetExtent];
		setBoolArray(ARTSet114, 0, artSetExtent, false);
		ARTSet114[10] = true;
		ARTSet114[13] = true;
		ARTSet114[14] = true;
		ARTSet114[15] = true;
		ARTSet114[19] = true;
		ARTSet114[20] = true;
		ARTSet114[22] = true;
		ARTSet114[23] = true;
		ARTSet114[24] = true;
		ARTSet114[35] = true;
		ARTSet114[37] = true;
		ARTSet114[38] = true;
		ARTSet114[39] = true;
		ARTSet114[40] = true;
		ARTSet114[41] = true;
		ARTSet114[71] = true;
		ARTSet114[101] = true;
		ARTSet114[103] = true;
	}

	public void artSet115initialise() {
		ARTSet115 = new boolean[artSetExtent];
		setBoolArray(ARTSet115, 0, artSetExtent, false);
		ARTSet115[25] = true;
		ARTSet115[26] = true;
		ARTSet115[27] = true;
		ARTSet115[28] = true;
		ARTSet115[29] = true;
		ARTSet115[30] = true;
		ARTSet115[31] = true;
		ARTSet115[32] = true;
	}

	public void artSet116initialise() {
		ARTSet116 = new boolean[artSetExtent];
		setBoolArray(ARTSet116, 0, artSetExtent, false);
		ARTSet116[88] = true;
	}

	public void artSet117initialise() {
		ARTSet117 = new boolean[artSetExtent];
		setBoolArray(ARTSet117, 0, artSetExtent, false);
		ARTSet117[1] = true;
		ARTSet117[2] = true;
		ARTSet117[3] = true;
		ARTSet117[4] = true;
		ARTSet117[5] = true;
		ARTSet117[6] = true;
		ARTSet117[7] = true;
		ARTSet117[8] = true;
		ARTSet117[9] = true;
		ARTSet117[10] = true;
		ARTSet117[11] = true;
		ARTSet117[12] = true;
		ARTSet117[13] = true;
		ARTSet117[14] = true;
		ARTSet117[15] = true;
		ARTSet117[16] = true;
		ARTSet117[17] = true;
		ARTSet117[19] = true;
		ARTSet117[20] = true;
		ARTSet117[21] = true;
		ARTSet117[22] = true;
		ARTSet117[23] = true;
		ARTSet117[24] = true;
		ARTSet117[25] = true;
		ARTSet117[26] = true;
		ARTSet117[27] = true;
		ARTSet117[28] = true;
		ARTSet117[29] = true;
		ARTSet117[30] = true;
		ARTSet117[31] = true;
		ARTSet117[32] = true;
		ARTSet117[33] = true;
		ARTSet117[34] = true;
		ARTSet117[35] = true;
		ARTSet117[36] = true;
		ARTSet117[37] = true;
		ARTSet117[38] = true;
		ARTSet117[39] = true;
		ARTSet117[40] = true;
		ARTSet117[41] = true;
		ARTSet117[42] = true;
		ARTSet117[43] = true;
		ARTSet117[44] = true;
		ARTSet117[45] = true;
		ARTSet117[46] = true;
		ARTSet117[47] = true;
		ARTSet117[48] = true;
		ARTSet117[49] = true;
		ARTSet117[50] = true;
		ARTSet117[51] = true;
		ARTSet117[52] = true;
		ARTSet117[53] = true;
		ARTSet117[54] = true;
		ARTSet117[55] = true;
		ARTSet117[56] = true;
		ARTSet117[57] = true;
		ARTSet117[58] = true;
		ARTSet117[59] = true;
		ARTSet117[60] = true;
		ARTSet117[61] = true;
		ARTSet117[62] = true;
		ARTSet117[63] = true;
		ARTSet117[64] = true;
		ARTSet117[65] = true;
		ARTSet117[66] = true;
		ARTSet117[67] = true;
		ARTSet117[68] = true;
		ARTSet117[69] = true;
		ARTSet117[70] = true;
		ARTSet117[71] = true;
		ARTSet117[72] = true;
		ARTSet117[73] = true;
		ARTSet117[74] = true;
		ARTSet117[75] = true;
		ARTSet117[76] = true;
		ARTSet117[77] = true;
		ARTSet117[78] = true;
		ARTSet117[79] = true;
		ARTSet117[80] = true;
		ARTSet117[81] = true;
		ARTSet117[82] = true;
		ARTSet117[83] = true;
		ARTSet117[84] = true;
		ARTSet117[85] = true;
		ARTSet117[86] = true;
		ARTSet117[87] = true;
		ARTSet117[88] = true;
		ARTSet117[89] = true;
		ARTSet117[90] = true;
		ARTSet117[91] = true;
		ARTSet117[92] = true;
		ARTSet117[93] = true;
		ARTSet117[94] = true;
		ARTSet117[95] = true;
		ARTSet117[96] = true;
		ARTSet117[97] = true;
		ARTSet117[98] = true;
		ARTSet117[99] = true;
		ARTSet117[100] = true;
		ARTSet117[101] = true;
		ARTSet117[102] = true;
		ARTSet117[103] = true;
	}

	public void artSet119initialise() {
		ARTSet119 = new boolean[artSetExtent];
		setBoolArray(ARTSet119, 0, artSetExtent, false);
	}

	public void artSet121initialise() {
		ARTSet121 = new boolean[artSetExtent];
		setBoolArray(ARTSet121, 0, artSetExtent, false);
		ARTSet121[19] = true;
	}

	public void artSet122initialise() {
		ARTSet122 = new boolean[artSetExtent];
		setBoolArray(ARTSet122, 0, artSetExtent, false);
		ARTSet122[1] = true;
		ARTSet122[2] = true;
		ARTSet122[3] = true;
		ARTSet122[4] = true;
		ARTSet122[5] = true;
		ARTSet122[6] = true;
		ARTSet122[7] = true;
		ARTSet122[8] = true;
		ARTSet122[9] = true;
		ARTSet122[10] = true;
		ARTSet122[11] = true;
		ARTSet122[12] = true;
		ARTSet122[13] = true;
		ARTSet122[14] = true;
		ARTSet122[15] = true;
		ARTSet122[16] = true;
		ARTSet122[17] = true;
		ARTSet122[18] = true;
		ARTSet122[20] = true;
		ARTSet122[21] = true;
		ARTSet122[22] = true;
		ARTSet122[23] = true;
		ARTSet122[24] = true;
		ARTSet122[25] = true;
		ARTSet122[26] = true;
		ARTSet122[27] = true;
		ARTSet122[28] = true;
		ARTSet122[29] = true;
		ARTSet122[30] = true;
		ARTSet122[31] = true;
		ARTSet122[32] = true;
		ARTSet122[33] = true;
		ARTSet122[34] = true;
		ARTSet122[35] = true;
		ARTSet122[36] = true;
		ARTSet122[37] = true;
		ARTSet122[38] = true;
		ARTSet122[39] = true;
		ARTSet122[40] = true;
		ARTSet122[41] = true;
		ARTSet122[42] = true;
		ARTSet122[43] = true;
		ARTSet122[44] = true;
		ARTSet122[45] = true;
		ARTSet122[46] = true;
		ARTSet122[47] = true;
		ARTSet122[48] = true;
		ARTSet122[49] = true;
		ARTSet122[50] = true;
		ARTSet122[51] = true;
		ARTSet122[52] = true;
		ARTSet122[53] = true;
		ARTSet122[54] = true;
		ARTSet122[55] = true;
		ARTSet122[56] = true;
		ARTSet122[57] = true;
		ARTSet122[58] = true;
		ARTSet122[59] = true;
		ARTSet122[60] = true;
		ARTSet122[61] = true;
		ARTSet122[62] = true;
		ARTSet122[63] = true;
		ARTSet122[64] = true;
		ARTSet122[65] = true;
		ARTSet122[66] = true;
		ARTSet122[67] = true;
		ARTSet122[68] = true;
		ARTSet122[69] = true;
		ARTSet122[70] = true;
		ARTSet122[71] = true;
		ARTSet122[72] = true;
		ARTSet122[73] = true;
		ARTSet122[74] = true;
		ARTSet122[75] = true;
		ARTSet122[76] = true;
		ARTSet122[77] = true;
		ARTSet122[78] = true;
		ARTSet122[79] = true;
		ARTSet122[80] = true;
		ARTSet122[81] = true;
		ARTSet122[82] = true;
		ARTSet122[83] = true;
		ARTSet122[84] = true;
		ARTSet122[85] = true;
		ARTSet122[86] = true;
		ARTSet122[87] = true;
		ARTSet122[88] = true;
		ARTSet122[89] = true;
		ARTSet122[90] = true;
		ARTSet122[91] = true;
		ARTSet122[92] = true;
		ARTSet122[93] = true;
		ARTSet122[94] = true;
		ARTSet122[95] = true;
		ARTSet122[96] = true;
		ARTSet122[97] = true;
		ARTSet122[98] = true;
		ARTSet122[99] = true;
		ARTSet122[100] = true;
		ARTSet122[101] = true;
		ARTSet122[102] = true;
		ARTSet122[103] = true;
	}

	public void artSet123initialise() {
		ARTSet123 = new boolean[artSetExtent];
		setBoolArray(ARTSet123, 0, artSetExtent, false);
		ARTSet123[1] = true;
		ARTSet123[2] = true;
		ARTSet123[3] = true;
		ARTSet123[4] = true;
		ARTSet123[5] = true;
		ARTSet123[6] = true;
		ARTSet123[7] = true;
		ARTSet123[8] = true;
		ARTSet123[9] = true;
		ARTSet123[10] = true;
		ARTSet123[11] = true;
		ARTSet123[12] = true;
		ARTSet123[13] = true;
		ARTSet123[14] = true;
		ARTSet123[15] = true;
		ARTSet123[16] = true;
		ARTSet123[17] = true;
		ARTSet123[18] = true;
		ARTSet123[19] = true;
		ARTSet123[20] = true;
		ARTSet123[21] = true;
		ARTSet123[22] = true;
		ARTSet123[23] = true;
		ARTSet123[24] = true;
		ARTSet123[25] = true;
		ARTSet123[26] = true;
		ARTSet123[27] = true;
		ARTSet123[28] = true;
		ARTSet123[29] = true;
		ARTSet123[30] = true;
		ARTSet123[31] = true;
		ARTSet123[32] = true;
		ARTSet123[33] = true;
		ARTSet123[34] = true;
		ARTSet123[35] = true;
		ARTSet123[36] = true;
		ARTSet123[37] = true;
		ARTSet123[38] = true;
		ARTSet123[39] = true;
		ARTSet123[40] = true;
		ARTSet123[41] = true;
		ARTSet123[42] = true;
		ARTSet123[43] = true;
		ARTSet123[44] = true;
		ARTSet123[45] = true;
		ARTSet123[46] = true;
		ARTSet123[47] = true;
		ARTSet123[48] = true;
		ARTSet123[49] = true;
		ARTSet123[50] = true;
		ARTSet123[51] = true;
		ARTSet123[52] = true;
		ARTSet123[53] = true;
		ARTSet123[54] = true;
		ARTSet123[55] = true;
		ARTSet123[56] = true;
		ARTSet123[57] = true;
		ARTSet123[58] = true;
		ARTSet123[59] = true;
		ARTSet123[60] = true;
		ARTSet123[61] = true;
		ARTSet123[62] = true;
		ARTSet123[63] = true;
		ARTSet123[64] = true;
		ARTSet123[65] = true;
		ARTSet123[66] = true;
		ARTSet123[67] = true;
		ARTSet123[68] = true;
		ARTSet123[69] = true;
		ARTSet123[70] = true;
		ARTSet123[71] = true;
		ARTSet123[72] = true;
		ARTSet123[73] = true;
		ARTSet123[74] = true;
		ARTSet123[75] = true;
		ARTSet123[76] = true;
		ARTSet123[77] = true;
		ARTSet123[78] = true;
		ARTSet123[79] = true;
		ARTSet123[80] = true;
		ARTSet123[81] = true;
		ARTSet123[82] = true;
		ARTSet123[83] = true;
		ARTSet123[84] = true;
		ARTSet123[85] = true;
		ARTSet123[86] = true;
		ARTSet123[87] = true;
		ARTSet123[88] = true;
		ARTSet123[89] = true;
		ARTSet123[90] = true;
		ARTSet123[91] = true;
		ARTSet123[92] = true;
		ARTSet123[93] = true;
		ARTSet123[94] = true;
		ARTSet123[95] = true;
		ARTSet123[96] = true;
		ARTSet123[97] = true;
		ARTSet123[98] = true;
		ARTSet123[99] = true;
		ARTSet123[100] = true;
		ARTSet123[101] = true;
		ARTSet123[102] = true;
		ARTSet123[103] = true;
	}

	public void artSet124initialise() {
		ARTSet124 = new boolean[artSetExtent];
		setBoolArray(ARTSet124, 0, artSetExtent, false);
		ARTSet124[87] = true;
	}

	public void artSet125initialise() {
		ARTSet125 = new boolean[artSetExtent];
		setBoolArray(ARTSet125, 0, artSetExtent, false);
		ARTSet125[86] = true;
	}

	public void artSet126initialise() {
		ARTSet126 = new boolean[artSetExtent];
		setBoolArray(ARTSet126, 0, artSetExtent, false);
		ARTSet126[37] = true;
	}

	public void artSet127initialise() {
		ARTSet127 = new boolean[artSetExtent];
		setBoolArray(ARTSet127, 0, artSetExtent, false);
		ARTSet127[68] = true;
	}

	public void artSet128initialise() {
		ARTSet128 = new boolean[artSetExtent];
		setBoolArray(ARTSet128, 0, artSetExtent, false);
		ARTSet128[100] = true;
	}

	public void artSet129initialise() {
		ARTSet129 = new boolean[artSetExtent];
		setBoolArray(ARTSet129, 0, artSetExtent, false);
		ARTSet129[85] = true;
	}

	public void artSet130initialise() {
		ARTSet130 = new boolean[artSetExtent];
		setBoolArray(ARTSet130, 0, artSetExtent, false);
		ARTSet130[72] = true;
		ARTSet130[74] = true;
		ARTSet130[75] = true;
		ARTSet130[76] = true;
		ARTSet130[77] = true;
		ARTSet130[78] = true;
		ARTSet130[79] = true;
		ARTSet130[80] = true;
		ARTSet130[81] = true;
		ARTSet130[82] = true;
		ARTSet130[83] = true;
		ARTSet130[84] = true;
		ARTSet130[85] = true;
		ARTSet130[86] = true;
		ARTSet130[87] = true;
		ARTSet130[88] = true;
		ARTSet130[89] = true;
		ARTSet130[90] = true;
		ARTSet130[91] = true;
		ARTSet130[92] = true;
		ARTSet130[93] = true;
		ARTSet130[94] = true;
		ARTSet130[95] = true;
		ARTSet130[96] = true;
		ARTSet130[97] = true;
		ARTSet130[98] = true;
		ARTSet130[99] = true;
	}

	public void artSet131initialise() {
		ARTSet131 = new boolean[artSetExtent];
		setBoolArray(ARTSet131, 0, artSetExtent, false);
		ARTSet131[103] = true;
	}

	public void artSet133initialise() {
		ARTSet133 = new boolean[artSetExtent];
		setBoolArray(ARTSet133, 0, artSetExtent, false);
		ARTSet133[0] = true;
	}

	public void artSet134initialise() {
		ARTSet134 = new boolean[artSetExtent];
		setBoolArray(ARTSet134, 0, artSetExtent, false);
		ARTSet134[13] = true;
		ARTSet134[14] = true;
		ARTSet134[15] = true;
		ARTSet134[19] = true;
		ARTSet134[20] = true;
		ARTSet134[22] = true;
		ARTSet134[24] = true;
		ARTSet134[37] = true;
		ARTSet134[38] = true;
		ARTSet134[39] = true;
		ARTSet134[41] = true;
		ARTSet134[71] = true;
		ARTSet134[101] = true;
	}

	public void artSet135initialise() {
		ARTSet135 = new boolean[artSetExtent];
		setBoolArray(ARTSet135, 0, artSetExtent, false);
		ARTSet135[82] = true;
	}

	public void artSet136initialise() {
		ARTSet136 = new boolean[artSetExtent];
		setBoolArray(ARTSet136, 0, artSetExtent, false);
		ARTSet136[16] = true;
		ARTSet136[25] = true;
		ARTSet136[26] = true;
		ARTSet136[27] = true;
		ARTSet136[28] = true;
		ARTSet136[29] = true;
		ARTSet136[30] = true;
		ARTSet136[31] = true;
		ARTSet136[32] = true;
		ARTSet136[33] = true;
		ARTSet136[34] = true;
		ARTSet136[42] = true;
		ARTSet136[43] = true;
		ARTSet136[44] = true;
		ARTSet136[45] = true;
		ARTSet136[46] = true;
		ARTSet136[47] = true;
		ARTSet136[48] = true;
		ARTSet136[49] = true;
		ARTSet136[50] = true;
		ARTSet136[51] = true;
		ARTSet136[52] = true;
		ARTSet136[53] = true;
		ARTSet136[54] = true;
		ARTSet136[55] = true;
		ARTSet136[56] = true;
		ARTSet136[57] = true;
		ARTSet136[58] = true;
		ARTSet136[59] = true;
		ARTSet136[60] = true;
		ARTSet136[61] = true;
		ARTSet136[62] = true;
		ARTSet136[63] = true;
		ARTSet136[64] = true;
		ARTSet136[65] = true;
		ARTSet136[66] = true;
		ARTSet136[67] = true;
		ARTSet136[72] = true;
		ARTSet136[74] = true;
		ARTSet136[75] = true;
		ARTSet136[76] = true;
		ARTSet136[77] = true;
		ARTSet136[78] = true;
		ARTSet136[79] = true;
		ARTSet136[80] = true;
		ARTSet136[81] = true;
		ARTSet136[82] = true;
		ARTSet136[83] = true;
		ARTSet136[84] = true;
		ARTSet136[85] = true;
		ARTSet136[86] = true;
		ARTSet136[87] = true;
		ARTSet136[88] = true;
		ARTSet136[89] = true;
		ARTSet136[90] = true;
		ARTSet136[91] = true;
		ARTSet136[92] = true;
		ARTSet136[93] = true;
		ARTSet136[94] = true;
		ARTSet136[95] = true;
		ARTSet136[96] = true;
		ARTSet136[97] = true;
		ARTSet136[98] = true;
		ARTSet136[99] = true;
	}

	public void artSet137initialise() {
		ARTSet137 = new boolean[artSetExtent];
		setBoolArray(ARTSet137, 0, artSetExtent, false);
		ARTSet137[42] = true;
		ARTSet137[43] = true;
		ARTSet137[44] = true;
		ARTSet137[45] = true;
		ARTSet137[46] = true;
		ARTSet137[47] = true;
		ARTSet137[48] = true;
		ARTSet137[49] = true;
		ARTSet137[50] = true;
		ARTSet137[51] = true;
		ARTSet137[52] = true;
		ARTSet137[53] = true;
		ARTSet137[54] = true;
		ARTSet137[55] = true;
		ARTSet137[56] = true;
		ARTSet137[57] = true;
		ARTSet137[58] = true;
		ARTSet137[59] = true;
		ARTSet137[60] = true;
		ARTSet137[61] = true;
		ARTSet137[62] = true;
		ARTSet137[63] = true;
		ARTSet137[64] = true;
		ARTSet137[65] = true;
		ARTSet137[66] = true;
		ARTSet137[67] = true;
		ARTSet137[72] = true;
		ARTSet137[74] = true;
		ARTSet137[75] = true;
		ARTSet137[76] = true;
		ARTSet137[77] = true;
		ARTSet137[78] = true;
		ARTSet137[79] = true;
		ARTSet137[80] = true;
		ARTSet137[81] = true;
		ARTSet137[82] = true;
		ARTSet137[83] = true;
		ARTSet137[84] = true;
		ARTSet137[85] = true;
		ARTSet137[86] = true;
		ARTSet137[87] = true;
		ARTSet137[88] = true;
		ARTSet137[89] = true;
		ARTSet137[90] = true;
		ARTSet137[91] = true;
		ARTSet137[92] = true;
		ARTSet137[93] = true;
		ARTSet137[94] = true;
		ARTSet137[95] = true;
		ARTSet137[96] = true;
		ARTSet137[97] = true;
		ARTSet137[98] = true;
		ARTSet137[99] = true;
	}

	public void artSet138initialise() {
		ARTSet138 = new boolean[artSetExtent];
		setBoolArray(ARTSet138, 0, artSetExtent, false);
		ARTSet138[22] = true;
	}

	public void artSet139initialise() {
		ARTSet139 = new boolean[artSetExtent];
		setBoolArray(ARTSet139, 0, artSetExtent, false);
		ARTSet139[25] = true;
		ARTSet139[26] = true;
		ARTSet139[27] = true;
		ARTSet139[28] = true;
		ARTSet139[29] = true;
		ARTSet139[30] = true;
		ARTSet139[31] = true;
		ARTSet139[32] = true;
		ARTSet139[33] = true;
		ARTSet139[34] = true;
		ARTSet139[42] = true;
		ARTSet139[43] = true;
		ARTSet139[44] = true;
		ARTSet139[45] = true;
		ARTSet139[46] = true;
		ARTSet139[47] = true;
		ARTSet139[74] = true;
		ARTSet139[75] = true;
		ARTSet139[76] = true;
		ARTSet139[77] = true;
		ARTSet139[78] = true;
		ARTSet139[79] = true;
	}

	public void artSet140initialise() {
		ARTSet140 = new boolean[artSetExtent];
		setBoolArray(ARTSet140, 0, artSetExtent, false);
		ARTSet140[12] = true;
	}

	public void artSet141initialise() {
		ARTSet141 = new boolean[artSetExtent];
		setBoolArray(ARTSet141, 0, artSetExtent, false);
		ARTSet141[39] = true;
	}

	public void artSet142initialise() {
		ARTSet142 = new boolean[artSetExtent];
		setBoolArray(ARTSet142, 0, artSetExtent, false);
		ARTSet142[22] = true;
		ARTSet142[25] = true;
		ARTSet142[26] = true;
		ARTSet142[27] = true;
		ARTSet142[28] = true;
		ARTSet142[29] = true;
		ARTSet142[30] = true;
		ARTSet142[31] = true;
		ARTSet142[32] = true;
		ARTSet142[33] = true;
		ARTSet142[34] = true;
	}

	public void artSet143initialise() {
		ARTSet143 = new boolean[artSetExtent];
		setBoolArray(ARTSet143, 0, artSetExtent, false);
		ARTSet143[79] = true;
	}

	public void artSet144initialise() {
		ARTSet144 = new boolean[artSetExtent];
		setBoolArray(ARTSet144, 0, artSetExtent, false);
		ARTSet144[69] = true;
	}

	public void artSet145initialise() {
		ARTSet145 = new boolean[artSetExtent];
		setBoolArray(ARTSet145, 0, artSetExtent, false);
		ARTSet145[38] = true;
	}

	public void artSet146initialise() {
		ARTSet146 = new boolean[artSetExtent];
		setBoolArray(ARTSet146, 0, artSetExtent, false);
		ARTSet146[78] = true;
	}

	public void artSet147initialise() {
		ARTSet147 = new boolean[artSetExtent];
		setBoolArray(ARTSet147, 0, artSetExtent, false);
		ARTSet147[23] = true;
	}

	public void artSet148initialise() {
		ARTSet148 = new boolean[artSetExtent];
		setBoolArray(ARTSet148, 0, artSetExtent, false);
		ARTSet148[77] = true;
	}

	public void artSet149initialise() {
		ARTSet149 = new boolean[artSetExtent];
		setBoolArray(ARTSet149, 0, artSetExtent, false);
		ARTSet149[25] = true;
		ARTSet149[26] = true;
		ARTSet149[27] = true;
		ARTSet149[28] = true;
		ARTSet149[29] = true;
		ARTSet149[30] = true;
		ARTSet149[31] = true;
		ARTSet149[32] = true;
		ARTSet149[33] = true;
		ARTSet149[34] = true;
	}

	public void artSet150initialise() {
		ARTSet150 = new boolean[artSetExtent];
		setBoolArray(ARTSet150, 0, artSetExtent, false);
		ARTSet150[0] = true;
		ARTSet150[1] = true;
		ARTSet150[2] = true;
		ARTSet150[3] = true;
		ARTSet150[4] = true;
		ARTSet150[5] = true;
		ARTSet150[6] = true;
		ARTSet150[7] = true;
		ARTSet150[8] = true;
		ARTSet150[9] = true;
		ARTSet150[10] = true;
		ARTSet150[11] = true;
		ARTSet150[12] = true;
		ARTSet150[13] = true;
		ARTSet150[14] = true;
		ARTSet150[15] = true;
		ARTSet150[16] = true;
		ARTSet150[17] = true;
		ARTSet150[18] = true;
		ARTSet150[19] = true;
		ARTSet150[20] = true;
		ARTSet150[21] = true;
		ARTSet150[22] = true;
		ARTSet150[23] = true;
		ARTSet150[24] = true;
		ARTSet150[25] = true;
		ARTSet150[26] = true;
		ARTSet150[27] = true;
		ARTSet150[28] = true;
		ARTSet150[29] = true;
		ARTSet150[30] = true;
		ARTSet150[31] = true;
		ARTSet150[32] = true;
		ARTSet150[33] = true;
		ARTSet150[34] = true;
		ARTSet150[35] = true;
		ARTSet150[36] = true;
		ARTSet150[37] = true;
		ARTSet150[38] = true;
		ARTSet150[39] = true;
		ARTSet150[40] = true;
		ARTSet150[41] = true;
		ARTSet150[42] = true;
		ARTSet150[43] = true;
		ARTSet150[44] = true;
		ARTSet150[45] = true;
		ARTSet150[46] = true;
		ARTSet150[47] = true;
		ARTSet150[48] = true;
		ARTSet150[49] = true;
		ARTSet150[50] = true;
		ARTSet150[51] = true;
		ARTSet150[52] = true;
		ARTSet150[53] = true;
		ARTSet150[54] = true;
		ARTSet150[55] = true;
		ARTSet150[56] = true;
		ARTSet150[57] = true;
		ARTSet150[58] = true;
		ARTSet150[59] = true;
		ARTSet150[60] = true;
		ARTSet150[61] = true;
		ARTSet150[62] = true;
		ARTSet150[63] = true;
		ARTSet150[64] = true;
		ARTSet150[65] = true;
		ARTSet150[66] = true;
		ARTSet150[67] = true;
		ARTSet150[68] = true;
		ARTSet150[69] = true;
		ARTSet150[70] = true;
		ARTSet150[71] = true;
		ARTSet150[72] = true;
		ARTSet150[73] = true;
		ARTSet150[74] = true;
		ARTSet150[75] = true;
		ARTSet150[76] = true;
		ARTSet150[77] = true;
		ARTSet150[78] = true;
		ARTSet150[79] = true;
		ARTSet150[80] = true;
		ARTSet150[81] = true;
		ARTSet150[82] = true;
		ARTSet150[83] = true;
		ARTSet150[84] = true;
		ARTSet150[85] = true;
		ARTSet150[86] = true;
		ARTSet150[87] = true;
		ARTSet150[88] = true;
		ARTSet150[89] = true;
		ARTSet150[90] = true;
		ARTSet150[91] = true;
		ARTSet150[92] = true;
		ARTSet150[93] = true;
		ARTSet150[94] = true;
		ARTSet150[95] = true;
		ARTSet150[96] = true;
		ARTSet150[97] = true;
		ARTSet150[98] = true;
		ARTSet150[99] = true;
		ARTSet150[100] = true;
		ARTSet150[101] = true;
		ARTSet150[102] = true;
		ARTSet150[103] = true;
	}

	public void artSet151initialise() {
		ARTSet151 = new boolean[artSetExtent];
		setBoolArray(ARTSet151, 0, artSetExtent, false);
		ARTSet151[17] = true;
	}

	public void artSet152initialise() {
		ARTSet152 = new boolean[artSetExtent];
		setBoolArray(ARTSet152, 0, artSetExtent, false);
		ARTSet152[21] = true;
	}

	public void artSet153initialise() {
		ARTSet153 = new boolean[artSetExtent];
		setBoolArray(ARTSet153, 0, artSetExtent, false);
		ARTSet153[35] = true;
	}

	public void artSet154initialise() {
		ARTSet154 = new boolean[artSetExtent];
		setBoolArray(ARTSet154, 0, artSetExtent, false);
		ARTSet154[76] = true;
	}

	public void artSet155initialise() {
		ARTSet155 = new boolean[artSetExtent];
		setBoolArray(ARTSet155, 0, artSetExtent, false);
		ARTSet155[16] = true;
	}

	public void artSet156initialise() {
		ARTSet156 = new boolean[artSetExtent];
		setBoolArray(ARTSet156, 0, artSetExtent, false);
		ARTSet156[42] = true;
		ARTSet156[43] = true;
		ARTSet156[44] = true;
		ARTSet156[45] = true;
		ARTSet156[46] = true;
		ARTSet156[47] = true;
		ARTSet156[48] = true;
		ARTSet156[49] = true;
		ARTSet156[50] = true;
		ARTSet156[51] = true;
		ARTSet156[52] = true;
		ARTSet156[53] = true;
		ARTSet156[54] = true;
		ARTSet156[55] = true;
		ARTSet156[56] = true;
		ARTSet156[57] = true;
		ARTSet156[58] = true;
		ARTSet156[59] = true;
		ARTSet156[60] = true;
		ARTSet156[61] = true;
		ARTSet156[62] = true;
		ARTSet156[63] = true;
		ARTSet156[64] = true;
		ARTSet156[65] = true;
		ARTSet156[66] = true;
		ARTSet156[67] = true;
	}

	public void artSet157initialise() {
		ARTSet157 = new boolean[artSetExtent];
		setBoolArray(ARTSet157, 0, artSetExtent, false);
		ARTSet157[75] = true;
	}

	public void artSet158initialise() {
		ARTSet158 = new boolean[artSetExtent];
		setBoolArray(ARTSet158, 0, artSetExtent, false);
		ARTSet158[101] = true;
	}

	public void artSet159initialise() {
		ARTSet159 = new boolean[artSetExtent];
		setBoolArray(ARTSet159, 0, artSetExtent, false);
		ARTSet159[10] = true;
	}

	public void artSet160initialise() {
		ARTSet160 = new boolean[artSetExtent];
		setBoolArray(ARTSet160, 0, artSetExtent, false);
		ARTSet160[73] = true;
	}

	public void artSet161initialise() {
		ARTSet161 = new boolean[artSetExtent];
		setBoolArray(ARTSet161, 0, artSetExtent, false);
		ARTSet161[74] = true;
	}

	public void artSet162initialise() {
		ARTSet162 = new boolean[artSetExtent];
		setBoolArray(ARTSet162, 0, artSetExtent, false);
		ARTSet162[15] = true;
	}

	public void artSet163initialise() {
		ARTSet163 = new boolean[artSetExtent];
		setBoolArray(ARTSet163, 0, artSetExtent, false);
		ARTSet163[0] = true;
		ARTSet163[4] = true;
		ARTSet163[5] = true;
		ARTSet163[6] = true;
		ARTSet163[7] = true;
		ARTSet163[8] = true;
		ARTSet163[9] = true;
		ARTSet163[10] = true;
		ARTSet163[11] = true;
		ARTSet163[12] = true;
		ARTSet163[13] = true;
		ARTSet163[14] = true;
		ARTSet163[15] = true;
		ARTSet163[16] = true;
		ARTSet163[17] = true;
		ARTSet163[18] = true;
		ARTSet163[19] = true;
		ARTSet163[20] = true;
		ARTSet163[21] = true;
		ARTSet163[22] = true;
		ARTSet163[23] = true;
		ARTSet163[24] = true;
		ARTSet163[25] = true;
		ARTSet163[26] = true;
		ARTSet163[27] = true;
		ARTSet163[28] = true;
		ARTSet163[29] = true;
		ARTSet163[30] = true;
		ARTSet163[31] = true;
		ARTSet163[32] = true;
		ARTSet163[33] = true;
		ARTSet163[34] = true;
		ARTSet163[35] = true;
		ARTSet163[36] = true;
		ARTSet163[37] = true;
		ARTSet163[38] = true;
		ARTSet163[39] = true;
		ARTSet163[40] = true;
		ARTSet163[41] = true;
		ARTSet163[42] = true;
		ARTSet163[43] = true;
		ARTSet163[44] = true;
		ARTSet163[45] = true;
		ARTSet163[46] = true;
		ARTSet163[47] = true;
		ARTSet163[48] = true;
		ARTSet163[49] = true;
		ARTSet163[50] = true;
		ARTSet163[51] = true;
		ARTSet163[52] = true;
		ARTSet163[53] = true;
		ARTSet163[54] = true;
		ARTSet163[55] = true;
		ARTSet163[56] = true;
		ARTSet163[57] = true;
		ARTSet163[58] = true;
		ARTSet163[59] = true;
		ARTSet163[60] = true;
		ARTSet163[61] = true;
		ARTSet163[62] = true;
		ARTSet163[63] = true;
		ARTSet163[64] = true;
		ARTSet163[65] = true;
		ARTSet163[66] = true;
		ARTSet163[67] = true;
		ARTSet163[68] = true;
		ARTSet163[70] = true;
		ARTSet163[71] = true;
		ARTSet163[72] = true;
		ARTSet163[73] = true;
		ARTSet163[74] = true;
		ARTSet163[75] = true;
		ARTSet163[76] = true;
		ARTSet163[77] = true;
		ARTSet163[78] = true;
		ARTSet163[79] = true;
		ARTSet163[80] = true;
		ARTSet163[81] = true;
		ARTSet163[82] = true;
		ARTSet163[83] = true;
		ARTSet163[84] = true;
		ARTSet163[85] = true;
		ARTSet163[86] = true;
		ARTSet163[87] = true;
		ARTSet163[88] = true;
		ARTSet163[89] = true;
		ARTSet163[90] = true;
		ARTSet163[91] = true;
		ARTSet163[92] = true;
		ARTSet163[93] = true;
		ARTSet163[94] = true;
		ARTSet163[95] = true;
		ARTSet163[96] = true;
		ARTSet163[97] = true;
		ARTSet163[98] = true;
		ARTSet163[99] = true;
		ARTSet163[100] = true;
		ARTSet163[101] = true;
		ARTSet163[102] = true;
		ARTSet163[103] = true;
	}

	public void setInitialise() {
		artSet1initialise();
		artSet5initialise();
		artSet6initialise();
		artSet8initialise();
		artSet10initialise();
		artSet11initialise();
		artSet13initialise();
		artSet19initialise();
		artSet20initialise();
		artSet22initialise();
		artSet24initialise();
		artSet26initialise();
		artSet27initialise();
		artSet28initialise();
		artSet30initialise();
		artSet31initialise();
		artSet32initialise();
		artSet33initialise();
		artSet34initialise();
		artSet35initialise();
		artSet36initialise();
		artSet37initialise();
		artSet38initialise();
		artSet39initialise();
		artSet40initialise();
		artSet41initialise();
		artSet42initialise();
		artSet43initialise();
		artSet44initialise();
		artSet45initialise();
		artSet46initialise();
		artSet47initialise();
		artSet48initialise();
		artSet49initialise();
		artSet50initialise();
		artSet51initialise();
		artSet52initialise();
		artSet53initialise();
		artSet54initialise();
		artSet55initialise();
		artSet56initialise();
		artSet57initialise();
		artSet58initialise();
		artSet59initialise();
		artSet60initialise();
		artSet61initialise();
		artSet62initialise();
		artSet63initialise();
		artSet64initialise();
		artSet65initialise();
		artSet66initialise();
		artSet67initialise();
		artSet68initialise();
		artSet69initialise();
		artSet70initialise();
		artSet71initialise();
		artSet72initialise();
		artSet73initialise();
		artSet74initialise();
		artSet75initialise();
		artSet76initialise();
		artSet77initialise();
		artSet78initialise();
		artSet79initialise();
		artSet80initialise();
		artSet81initialise();
		artSet83initialise();
		artSet84initialise();
		artSet85initialise();
		artSet86initialise();
		artSet87initialise();
		artSet88initialise();
		artSet90initialise();
		artSet92initialise();
		artSet95initialise();
		artSet96initialise();
		artSet97initialise();
		artSet98initialise();
		artSet99initialise();
		artSet100initialise();
		artSet101initialise();
		artSet102initialise();
		artSet103initialise();
		artSet104initialise();
		artSet105initialise();
		artSet106initialise();
		artSet107initialise();
		artSet108initialise();
		artSet109initialise();
		artSet110initialise();
		artSet111initialise();
		artSet112initialise();
		artSet113initialise();
		artSet114initialise();
		artSet115initialise();
		artSet116initialise();
		artSet117initialise();
		artSet119initialise();
		artSet121initialise();
		artSet122initialise();
		artSet123initialise();
		artSet124initialise();
		artSet125initialise();
		artSet126initialise();
		artSet127initialise();
		artSet128initialise();
		artSet129initialise();
		artSet130initialise();
		artSet131initialise();
		artSet133initialise();
		artSet134initialise();
		artSet135initialise();
		artSet136initialise();
		artSet137initialise();
		artSet138initialise();
		artSet139initialise();
		artSet140initialise();
		artSet141initialise();
		artSet142initialise();
		artSet143initialise();
		artSet144initialise();
		artSet145initialise();
		artSet146initialise();
		artSet147initialise();
		artSet148initialise();
		artSet149initialise();
		artSet150initialise();
		artSet151initialise();
		artSet152initialise();
		artSet153initialise();
		artSet154initialise();
		artSet155initialise();
		artSet156initialise();
		artSet157initialise();
		artSet158initialise();
		artSet159initialise();
		artSet160initialise();
		artSet161initialise();
		artSet162initialise();
		artSet163initialise();
	}

	public void artTableInitialiser_105() {
		artLabelInternalStrings[ART_L_OcamlLexer_amper] = "OcamlLexer.amper ";
		artLabelStrings[ART_L_OcamlLexer_amper] = "amper";
		artKindOfs[ART_L_OcamlLexer_amper] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_amper_1136] = "OcamlLexer.amper ::= . `&";
		artLabelStrings[ART_L_OcamlLexer_amper_1136] = "";
		lhsL[ART_L_OcamlLexer_amper_1136] = ART_L_OcamlLexer_amper;
		artKindOfs[ART_L_OcamlLexer_amper_1136] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_amper_1136] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_amper_1137] = "OcamlLexer.amper ::= `&";
		artLabelStrings[ART_L_OcamlLexer_amper_1137] = "";
		lhsL[ART_L_OcamlLexer_amper_1137] = ART_L_OcamlLexer_amper;
		popD[ART_L_OcamlLexer_amper_1137] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_amper_1138] = "OcamlLexer.amper ::= `&. ";
		artLabelStrings[ART_L_OcamlLexer_amper_1138] = "";
		lhsL[ART_L_OcamlLexer_amper_1138] = ART_L_OcamlLexer_amper;
		artKindOfs[ART_L_OcamlLexer_amper_1138] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_amper_1138] = true;
		eoR_pL[ART_L_OcamlLexer_amper_1138] = true;
		popD[ART_L_OcamlLexer_amper_1138] = true;
	}

	public void artTableInitialiser_106() {
		artLabelInternalStrings[ART_L_OcamlLexer_amperamper] = "OcamlLexer.amperamper ";
		artLabelStrings[ART_L_OcamlLexer_amperamper] = "amperamper";
		artKindOfs[ART_L_OcamlLexer_amperamper] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_amperamper_1141] = "OcamlLexer.amperamper ::= . `&`&";
		artLabelStrings[ART_L_OcamlLexer_amperamper_1141] = "";
		lhsL[ART_L_OcamlLexer_amperamper_1141] = ART_L_OcamlLexer_amperamper;
		artKindOfs[ART_L_OcamlLexer_amperamper_1141] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_amperamper_1141] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_amperamper_1142] = "OcamlLexer.amperamper ::= `&`&";
		artLabelStrings[ART_L_OcamlLexer_amperamper_1142] = "";
		lhsL[ART_L_OcamlLexer_amperamper_1142] = ART_L_OcamlLexer_amperamper;
		popD[ART_L_OcamlLexer_amperamper_1142] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_amperamper_1143] = "OcamlLexer.amperamper ::= `&. `&";
		artLabelStrings[ART_L_OcamlLexer_amperamper_1143] = "";
		lhsL[ART_L_OcamlLexer_amperamper_1143] = ART_L_OcamlLexer_amperamper;
		artKindOfs[ART_L_OcamlLexer_amperamper_1143] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_amperamper_1143] = true;
		popD[ART_L_OcamlLexer_amperamper_1143] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_amperamper_1144] = "OcamlLexer.amperamper ::= `&`&";
		artLabelStrings[ART_L_OcamlLexer_amperamper_1144] = "";
		lhsL[ART_L_OcamlLexer_amperamper_1144] = ART_L_OcamlLexer_amperamper;
		popD[ART_L_OcamlLexer_amperamper_1144] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_amperamper_1145] = "OcamlLexer.amperamper ::= `&`&. ";
		artLabelStrings[ART_L_OcamlLexer_amperamper_1145] = "";
		lhsL[ART_L_OcamlLexer_amperamper_1145] = ART_L_OcamlLexer_amperamper;
		artKindOfs[ART_L_OcamlLexer_amperamper_1145] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_amperamper_1145] = true;
		eoR_pL[ART_L_OcamlLexer_amperamper_1145] = true;
		popD[ART_L_OcamlLexer_amperamper_1145] = true;
	}

	public void artTableInitialiser_107() {
		artLabelInternalStrings[ART_L_OcamlLexer_and] = "OcamlLexer.and ";
		artLabelStrings[ART_L_OcamlLexer_and] = "and";
		artKindOfs[ART_L_OcamlLexer_and] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_and_455] = "OcamlLexer.and ::= . `a`n`d";
		artLabelStrings[ART_L_OcamlLexer_and_455] = "";
		lhsL[ART_L_OcamlLexer_and_455] = ART_L_OcamlLexer_and;
		artKindOfs[ART_L_OcamlLexer_and_455] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_and_455] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_and_456] = "OcamlLexer.and ::= `a`n`d";
		artLabelStrings[ART_L_OcamlLexer_and_456] = "";
		lhsL[ART_L_OcamlLexer_and_456] = ART_L_OcamlLexer_and;
		popD[ART_L_OcamlLexer_and_456] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_and_457] = "OcamlLexer.and ::= `a. `n`d";
		artLabelStrings[ART_L_OcamlLexer_and_457] = "";
		lhsL[ART_L_OcamlLexer_and_457] = ART_L_OcamlLexer_and;
		artKindOfs[ART_L_OcamlLexer_and_457] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_and_457] = true;
		popD[ART_L_OcamlLexer_and_457] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_and_458] = "OcamlLexer.and ::= `a`n`d";
		artLabelStrings[ART_L_OcamlLexer_and_458] = "";
		lhsL[ART_L_OcamlLexer_and_458] = ART_L_OcamlLexer_and;
		popD[ART_L_OcamlLexer_and_458] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_and_459] = "OcamlLexer.and ::= `a`n. `d";
		artLabelStrings[ART_L_OcamlLexer_and_459] = "";
		lhsL[ART_L_OcamlLexer_and_459] = ART_L_OcamlLexer_and;
		artKindOfs[ART_L_OcamlLexer_and_459] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_and_459] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_and_460] = "OcamlLexer.and ::= `a`n`d";
		artLabelStrings[ART_L_OcamlLexer_and_460] = "";
		lhsL[ART_L_OcamlLexer_and_460] = ART_L_OcamlLexer_and;
		popD[ART_L_OcamlLexer_and_460] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_and_461] = "OcamlLexer.and ::= `a`n`d. ";
		artLabelStrings[ART_L_OcamlLexer_and_461] = "";
		lhsL[ART_L_OcamlLexer_and_461] = ART_L_OcamlLexer_and;
		artKindOfs[ART_L_OcamlLexer_and_461] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_and_461] = true;
		eoR_pL[ART_L_OcamlLexer_and_461] = true;
		popD[ART_L_OcamlLexer_and_461] = true;
	}

	public void artTableInitialiser_108() {
		artLabelInternalStrings[ART_L_OcamlLexer_as] = "OcamlLexer.as ";
		artLabelStrings[ART_L_OcamlLexer_as] = "as";
		artKindOfs[ART_L_OcamlLexer_as] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_as_464] = "OcamlLexer.as ::= . `a`s";
		artLabelStrings[ART_L_OcamlLexer_as_464] = "";
		lhsL[ART_L_OcamlLexer_as_464] = ART_L_OcamlLexer_as;
		artKindOfs[ART_L_OcamlLexer_as_464] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_as_464] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_as_465] = "OcamlLexer.as ::= `a`s";
		artLabelStrings[ART_L_OcamlLexer_as_465] = "";
		lhsL[ART_L_OcamlLexer_as_465] = ART_L_OcamlLexer_as;
		popD[ART_L_OcamlLexer_as_465] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_as_466] = "OcamlLexer.as ::= `a. `s";
		artLabelStrings[ART_L_OcamlLexer_as_466] = "";
		lhsL[ART_L_OcamlLexer_as_466] = ART_L_OcamlLexer_as;
		artKindOfs[ART_L_OcamlLexer_as_466] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_as_466] = true;
		popD[ART_L_OcamlLexer_as_466] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_as_467] = "OcamlLexer.as ::= `a`s";
		artLabelStrings[ART_L_OcamlLexer_as_467] = "";
		lhsL[ART_L_OcamlLexer_as_467] = ART_L_OcamlLexer_as;
		popD[ART_L_OcamlLexer_as_467] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_as_468] = "OcamlLexer.as ::= `a`s. ";
		artLabelStrings[ART_L_OcamlLexer_as_468] = "";
		lhsL[ART_L_OcamlLexer_as_468] = ART_L_OcamlLexer_as;
		artKindOfs[ART_L_OcamlLexer_as_468] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_as_468] = true;
		eoR_pL[ART_L_OcamlLexer_as_468] = true;
		popD[ART_L_OcamlLexer_as_468] = true;
	}

	public void artTableInitialiser_109() {
		artLabelInternalStrings[ART_L_OcamlLexer_asr] = "OcamlLexer.asr ";
		artLabelStrings[ART_L_OcamlLexer_asr] = "asr";
		artKindOfs[ART_L_OcamlLexer_asr] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_asr_486] = "OcamlLexer.asr ::= . `a`s`r";
		artLabelStrings[ART_L_OcamlLexer_asr_486] = "";
		lhsL[ART_L_OcamlLexer_asr_486] = ART_L_OcamlLexer_asr;
		artKindOfs[ART_L_OcamlLexer_asr_486] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_asr_486] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_asr_487] = "OcamlLexer.asr ::= `a`s`r";
		artLabelStrings[ART_L_OcamlLexer_asr_487] = "";
		lhsL[ART_L_OcamlLexer_asr_487] = ART_L_OcamlLexer_asr;
		popD[ART_L_OcamlLexer_asr_487] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_asr_488] = "OcamlLexer.asr ::= `a. `s`r";
		artLabelStrings[ART_L_OcamlLexer_asr_488] = "";
		lhsL[ART_L_OcamlLexer_asr_488] = ART_L_OcamlLexer_asr;
		artKindOfs[ART_L_OcamlLexer_asr_488] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_asr_488] = true;
		popD[ART_L_OcamlLexer_asr_488] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_asr_489] = "OcamlLexer.asr ::= `a`s`r";
		artLabelStrings[ART_L_OcamlLexer_asr_489] = "";
		lhsL[ART_L_OcamlLexer_asr_489] = ART_L_OcamlLexer_asr;
		popD[ART_L_OcamlLexer_asr_489] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_asr_490] = "OcamlLexer.asr ::= `a`s. `r";
		artLabelStrings[ART_L_OcamlLexer_asr_490] = "";
		lhsL[ART_L_OcamlLexer_asr_490] = ART_L_OcamlLexer_asr;
		artKindOfs[ART_L_OcamlLexer_asr_490] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_asr_490] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_asr_491] = "OcamlLexer.asr ::= `a`s`r";
		artLabelStrings[ART_L_OcamlLexer_asr_491] = "";
		lhsL[ART_L_OcamlLexer_asr_491] = ART_L_OcamlLexer_asr;
		popD[ART_L_OcamlLexer_asr_491] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_asr_492] = "OcamlLexer.asr ::= `a`s`r. ";
		artLabelStrings[ART_L_OcamlLexer_asr_492] = "";
		lhsL[ART_L_OcamlLexer_asr_492] = ART_L_OcamlLexer_asr;
		artKindOfs[ART_L_OcamlLexer_asr_492] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_asr_492] = true;
		eoR_pL[ART_L_OcamlLexer_asr_492] = true;
		popD[ART_L_OcamlLexer_asr_492] = true;
	}

	public void artTableInitialiser_110() {
		artLabelInternalStrings[ART_L_OcamlLexer_assert] = "OcamlLexer.assert ";
		artLabelStrings[ART_L_OcamlLexer_assert] = "assert";
		artKindOfs[ART_L_OcamlLexer_assert] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_471] = "OcamlLexer.assert ::= . `a`s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_471] = "";
		lhsL[ART_L_OcamlLexer_assert_471] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_assert_471] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_assert_471] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_472] = "OcamlLexer.assert ::= `a`s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_472] = "";
		lhsL[ART_L_OcamlLexer_assert_472] = ART_L_OcamlLexer_assert;
		popD[ART_L_OcamlLexer_assert_472] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_473] = "OcamlLexer.assert ::= `a. `s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_473] = "";
		lhsL[ART_L_OcamlLexer_assert_473] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_assert_473] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_assert_473] = true;
		popD[ART_L_OcamlLexer_assert_473] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_474] = "OcamlLexer.assert ::= `a`s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_474] = "";
		lhsL[ART_L_OcamlLexer_assert_474] = ART_L_OcamlLexer_assert;
		popD[ART_L_OcamlLexer_assert_474] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_475] = "OcamlLexer.assert ::= `a`s. `s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_475] = "";
		lhsL[ART_L_OcamlLexer_assert_475] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_assert_475] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_assert_475] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_476] = "OcamlLexer.assert ::= `a`s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_476] = "";
		lhsL[ART_L_OcamlLexer_assert_476] = ART_L_OcamlLexer_assert;
		popD[ART_L_OcamlLexer_assert_476] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_477] = "OcamlLexer.assert ::= `a`s`s. `e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_477] = "";
		lhsL[ART_L_OcamlLexer_assert_477] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_assert_477] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_assert_477] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_478] = "OcamlLexer.assert ::= `a`s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_478] = "";
		lhsL[ART_L_OcamlLexer_assert_478] = ART_L_OcamlLexer_assert;
		popD[ART_L_OcamlLexer_assert_478] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_479] = "OcamlLexer.assert ::= `a`s`s`e. `r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_479] = "";
		lhsL[ART_L_OcamlLexer_assert_479] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_assert_479] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_assert_479] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_480] = "OcamlLexer.assert ::= `a`s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_480] = "";
		lhsL[ART_L_OcamlLexer_assert_480] = ART_L_OcamlLexer_assert;
		popD[ART_L_OcamlLexer_assert_480] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_481] = "OcamlLexer.assert ::= `a`s`s`e`r. `t";
		artLabelStrings[ART_L_OcamlLexer_assert_481] = "";
		lhsL[ART_L_OcamlLexer_assert_481] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_assert_481] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_assert_481] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_482] = "OcamlLexer.assert ::= `a`s`s`e`r`t";
		artLabelStrings[ART_L_OcamlLexer_assert_482] = "";
		lhsL[ART_L_OcamlLexer_assert_482] = ART_L_OcamlLexer_assert;
		popD[ART_L_OcamlLexer_assert_482] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_assert_483] = "OcamlLexer.assert ::= `a`s`s`e`r`t. ";
		artLabelStrings[ART_L_OcamlLexer_assert_483] = "";
		lhsL[ART_L_OcamlLexer_assert_483] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_assert_483] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_assert_483] = true;
		eoR_pL[ART_L_OcamlLexer_assert_483] = true;
		popD[ART_L_OcamlLexer_assert_483] = true;
	}

	public void artTableInitialiser_111() {
		artLabelInternalStrings[ART_L_OcamlLexer_backquote] = "OcamlLexer.backquote ";
		artLabelStrings[ART_L_OcamlLexer_backquote] = "backquote";
		artKindOfs[ART_L_OcamlLexer_backquote] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_backquote_1324] = "OcamlLexer.backquote ::= . `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_backquote_1324] = "";
		lhsL[ART_L_OcamlLexer_backquote_1324] = ART_L_OcamlLexer_backquote;
		artKindOfs[ART_L_OcamlLexer_backquote_1324] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_backquote_1324] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_backquote_1325] = "OcamlLexer.backquote ::= `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_backquote_1325] = "";
		lhsL[ART_L_OcamlLexer_backquote_1325] = ART_L_OcamlLexer_backquote;
		popD[ART_L_OcamlLexer_backquote_1325] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_backquote_1326] = "OcamlLexer.backquote ::= `\\\\`. ";
		artLabelStrings[ART_L_OcamlLexer_backquote_1326] = "";
		lhsL[ART_L_OcamlLexer_backquote_1326] = ART_L_OcamlLexer_backquote;
		artKindOfs[ART_L_OcamlLexer_backquote_1326] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_backquote_1326] = true;
		eoR_pL[ART_L_OcamlLexer_backquote_1326] = true;
		popD[ART_L_OcamlLexer_backquote_1326] = true;
	}

	public void artTableInitialiser_112() {
		artLabelInternalStrings[ART_L_OcamlLexer_bangequals] = "OcamlLexer.bangequals ";
		artLabelStrings[ART_L_OcamlLexer_bangequals] = "bangequals";
		artKindOfs[ART_L_OcamlLexer_bangequals] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_bangequals_1124] = "OcamlLexer.bangequals ::= . `!`=";
		artLabelStrings[ART_L_OcamlLexer_bangequals_1124] = "";
		lhsL[ART_L_OcamlLexer_bangequals_1124] = ART_L_OcamlLexer_bangequals;
		artKindOfs[ART_L_OcamlLexer_bangequals_1124] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_bangequals_1124] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_bangequals_1125] = "OcamlLexer.bangequals ::= `!`=";
		artLabelStrings[ART_L_OcamlLexer_bangequals_1125] = "";
		lhsL[ART_L_OcamlLexer_bangequals_1125] = ART_L_OcamlLexer_bangequals;
		popD[ART_L_OcamlLexer_bangequals_1125] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_bangequals_1126] = "OcamlLexer.bangequals ::= `!. `=";
		artLabelStrings[ART_L_OcamlLexer_bangequals_1126] = "";
		lhsL[ART_L_OcamlLexer_bangequals_1126] = ART_L_OcamlLexer_bangequals;
		artKindOfs[ART_L_OcamlLexer_bangequals_1126] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_bangequals_1126] = true;
		popD[ART_L_OcamlLexer_bangequals_1126] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_bangequals_1127] = "OcamlLexer.bangequals ::= `!`=";
		artLabelStrings[ART_L_OcamlLexer_bangequals_1127] = "";
		lhsL[ART_L_OcamlLexer_bangequals_1127] = ART_L_OcamlLexer_bangequals;
		popD[ART_L_OcamlLexer_bangequals_1127] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_bangequals_1128] = "OcamlLexer.bangequals ::= `!`=. ";
		artLabelStrings[ART_L_OcamlLexer_bangequals_1128] = "";
		lhsL[ART_L_OcamlLexer_bangequals_1128] = ART_L_OcamlLexer_bangequals;
		artKindOfs[ART_L_OcamlLexer_bangequals_1128] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_bangequals_1128] = true;
		eoR_pL[ART_L_OcamlLexer_bangequals_1128] = true;
		popD[ART_L_OcamlLexer_bangequals_1128] = true;
	}

	public void artTableInitialiser_113() {
		artLabelInternalStrings[ART_L_OcamlLexer_bar] = "OcamlLexer.bar ";
		artLabelStrings[ART_L_OcamlLexer_bar] = "bar";
		artKindOfs[ART_L_OcamlLexer_bar] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_bar_1341] = "OcamlLexer.bar ::= . `|";
		artLabelStrings[ART_L_OcamlLexer_bar_1341] = "";
		lhsL[ART_L_OcamlLexer_bar_1341] = ART_L_OcamlLexer_bar;
		artKindOfs[ART_L_OcamlLexer_bar_1341] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_bar_1341] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_bar_1342] = "OcamlLexer.bar ::= `|";
		artLabelStrings[ART_L_OcamlLexer_bar_1342] = "";
		lhsL[ART_L_OcamlLexer_bar_1342] = ART_L_OcamlLexer_bar;
		popD[ART_L_OcamlLexer_bar_1342] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_bar_1343] = "OcamlLexer.bar ::= `|. ";
		artLabelStrings[ART_L_OcamlLexer_bar_1343] = "";
		lhsL[ART_L_OcamlLexer_bar_1343] = ART_L_OcamlLexer_bar;
		artKindOfs[ART_L_OcamlLexer_bar_1343] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_bar_1343] = true;
		eoR_pL[ART_L_OcamlLexer_bar_1343] = true;
		popD[ART_L_OcamlLexer_bar_1343] = true;
	}

	public void artTableInitialiser_114() {
		artLabelInternalStrings[ART_L_OcamlLexer_barbar] = "OcamlLexer.barbar ";
		artLabelStrings[ART_L_OcamlLexer_barbar] = "barbar";
		artKindOfs[ART_L_OcamlLexer_barbar] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_barbar_1353] = "OcamlLexer.barbar ::= . `|`|";
		artLabelStrings[ART_L_OcamlLexer_barbar_1353] = "";
		lhsL[ART_L_OcamlLexer_barbar_1353] = ART_L_OcamlLexer_barbar;
		artKindOfs[ART_L_OcamlLexer_barbar_1353] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_barbar_1353] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barbar_1354] = "OcamlLexer.barbar ::= `|`|";
		artLabelStrings[ART_L_OcamlLexer_barbar_1354] = "";
		lhsL[ART_L_OcamlLexer_barbar_1354] = ART_L_OcamlLexer_barbar;
		popD[ART_L_OcamlLexer_barbar_1354] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barbar_1355] = "OcamlLexer.barbar ::= `|. `|";
		artLabelStrings[ART_L_OcamlLexer_barbar_1355] = "";
		lhsL[ART_L_OcamlLexer_barbar_1355] = ART_L_OcamlLexer_barbar;
		artKindOfs[ART_L_OcamlLexer_barbar_1355] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_barbar_1355] = true;
		popD[ART_L_OcamlLexer_barbar_1355] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barbar_1356] = "OcamlLexer.barbar ::= `|`|";
		artLabelStrings[ART_L_OcamlLexer_barbar_1356] = "";
		lhsL[ART_L_OcamlLexer_barbar_1356] = ART_L_OcamlLexer_barbar;
		popD[ART_L_OcamlLexer_barbar_1356] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barbar_1357] = "OcamlLexer.barbar ::= `|`|. ";
		artLabelStrings[ART_L_OcamlLexer_barbar_1357] = "";
		lhsL[ART_L_OcamlLexer_barbar_1357] = ART_L_OcamlLexer_barbar;
		artKindOfs[ART_L_OcamlLexer_barbar_1357] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_barbar_1357] = true;
		eoR_pL[ART_L_OcamlLexer_barbar_1357] = true;
		popD[ART_L_OcamlLexer_barbar_1357] = true;
	}

	public void artTableInitialiser_115() {
		artLabelInternalStrings[ART_L_OcamlLexer_barrbracket] = "OcamlLexer.barrbracket ";
		artLabelStrings[ART_L_OcamlLexer_barrbracket] = "barrbracket";
		artKindOfs[ART_L_OcamlLexer_barrbracket] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_barrbracket_1346] = "OcamlLexer.barrbracket ::= . `|`]";
		artLabelStrings[ART_L_OcamlLexer_barrbracket_1346] = "";
		lhsL[ART_L_OcamlLexer_barrbracket_1346] = ART_L_OcamlLexer_barrbracket;
		artKindOfs[ART_L_OcamlLexer_barrbracket_1346] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_barrbracket_1346] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barrbracket_1347] = "OcamlLexer.barrbracket ::= `|`]";
		artLabelStrings[ART_L_OcamlLexer_barrbracket_1347] = "";
		lhsL[ART_L_OcamlLexer_barrbracket_1347] = ART_L_OcamlLexer_barrbracket;
		popD[ART_L_OcamlLexer_barrbracket_1347] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barrbracket_1348] = "OcamlLexer.barrbracket ::= `|. `]";
		artLabelStrings[ART_L_OcamlLexer_barrbracket_1348] = "";
		lhsL[ART_L_OcamlLexer_barrbracket_1348] = ART_L_OcamlLexer_barrbracket;
		artKindOfs[ART_L_OcamlLexer_barrbracket_1348] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_barrbracket_1348] = true;
		popD[ART_L_OcamlLexer_barrbracket_1348] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barrbracket_1349] = "OcamlLexer.barrbracket ::= `|`]";
		artLabelStrings[ART_L_OcamlLexer_barrbracket_1349] = "";
		lhsL[ART_L_OcamlLexer_barrbracket_1349] = ART_L_OcamlLexer_barrbracket;
		popD[ART_L_OcamlLexer_barrbracket_1349] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_barrbracket_1350] = "OcamlLexer.barrbracket ::= `|`]. ";
		artLabelStrings[ART_L_OcamlLexer_barrbracket_1350] = "";
		lhsL[ART_L_OcamlLexer_barrbracket_1350] = ART_L_OcamlLexer_barrbracket;
		artKindOfs[ART_L_OcamlLexer_barrbracket_1350] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_barrbracket_1350] = true;
		eoR_pL[ART_L_OcamlLexer_barrbracket_1350] = true;
		popD[ART_L_OcamlLexer_barrbracket_1350] = true;
	}

	public void artTableInitialiser_116() {
		artLabelInternalStrings[ART_L_OcamlLexer_begin] = "OcamlLexer.begin ";
		artLabelStrings[ART_L_OcamlLexer_begin] = "begin";
		artKindOfs[ART_L_OcamlLexer_begin] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_495] = "OcamlLexer.begin ::= . `b`e`g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_495] = "";
		lhsL[ART_L_OcamlLexer_begin_495] = ART_L_OcamlLexer_begin;
		artKindOfs[ART_L_OcamlLexer_begin_495] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_begin_495] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_496] = "OcamlLexer.begin ::= `b`e`g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_496] = "";
		lhsL[ART_L_OcamlLexer_begin_496] = ART_L_OcamlLexer_begin;
		popD[ART_L_OcamlLexer_begin_496] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_497] = "OcamlLexer.begin ::= `b. `e`g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_497] = "";
		lhsL[ART_L_OcamlLexer_begin_497] = ART_L_OcamlLexer_begin;
		artKindOfs[ART_L_OcamlLexer_begin_497] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_begin_497] = true;
		popD[ART_L_OcamlLexer_begin_497] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_498] = "OcamlLexer.begin ::= `b`e`g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_498] = "";
		lhsL[ART_L_OcamlLexer_begin_498] = ART_L_OcamlLexer_begin;
		popD[ART_L_OcamlLexer_begin_498] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_499] = "OcamlLexer.begin ::= `b`e. `g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_499] = "";
		lhsL[ART_L_OcamlLexer_begin_499] = ART_L_OcamlLexer_begin;
		artKindOfs[ART_L_OcamlLexer_begin_499] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_begin_499] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_500] = "OcamlLexer.begin ::= `b`e`g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_500] = "";
		lhsL[ART_L_OcamlLexer_begin_500] = ART_L_OcamlLexer_begin;
		popD[ART_L_OcamlLexer_begin_500] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_501] = "OcamlLexer.begin ::= `b`e`g. `i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_501] = "";
		lhsL[ART_L_OcamlLexer_begin_501] = ART_L_OcamlLexer_begin;
		artKindOfs[ART_L_OcamlLexer_begin_501] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_begin_501] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_502] = "OcamlLexer.begin ::= `b`e`g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_502] = "";
		lhsL[ART_L_OcamlLexer_begin_502] = ART_L_OcamlLexer_begin;
		popD[ART_L_OcamlLexer_begin_502] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_503] = "OcamlLexer.begin ::= `b`e`g`i. `n";
		artLabelStrings[ART_L_OcamlLexer_begin_503] = "";
		lhsL[ART_L_OcamlLexer_begin_503] = ART_L_OcamlLexer_begin;
		artKindOfs[ART_L_OcamlLexer_begin_503] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_begin_503] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_504] = "OcamlLexer.begin ::= `b`e`g`i`n";
		artLabelStrings[ART_L_OcamlLexer_begin_504] = "";
		lhsL[ART_L_OcamlLexer_begin_504] = ART_L_OcamlLexer_begin;
		popD[ART_L_OcamlLexer_begin_504] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_begin_505] = "OcamlLexer.begin ::= `b`e`g`i`n. ";
		artLabelStrings[ART_L_OcamlLexer_begin_505] = "";
		lhsL[ART_L_OcamlLexer_begin_505] = ART_L_OcamlLexer_begin;
		artKindOfs[ART_L_OcamlLexer_begin_505] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_begin_505] = true;
		eoR_pL[ART_L_OcamlLexer_begin_505] = true;
		popD[ART_L_OcamlLexer_begin_505] = true;
	}

	public void artTableInitialiser_117() {
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter] = "OcamlLexer.capital_letter ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter] = "capital_letter";
		artKindOfs[ART_L_OcamlLexer_capital_letter] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1667] = "OcamlLexer.capital_letter ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1667] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1667] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1667] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1667] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1668] = "OcamlLexer.capital_letter ::= `A";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1668] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1668] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1668] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1669] = "OcamlLexer.capital_letter ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1669] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1669] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1669] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1669] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1669] = true;
		popD[ART_L_OcamlLexer_capital_letter_1669] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1671] = "OcamlLexer.capital_letter ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1671] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1671] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1671] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1671] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1672] = "OcamlLexer.capital_letter ::= `B";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1672] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1672] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1672] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1673] = "OcamlLexer.capital_letter ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1673] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1673] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1673] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1673] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1673] = true;
		popD[ART_L_OcamlLexer_capital_letter_1673] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1675] = "OcamlLexer.capital_letter ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1675] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1675] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1675] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1675] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1676] = "OcamlLexer.capital_letter ::= `C";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1676] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1676] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1676] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1677] = "OcamlLexer.capital_letter ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1677] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1677] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1677] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1677] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1677] = true;
		popD[ART_L_OcamlLexer_capital_letter_1677] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1679] = "OcamlLexer.capital_letter ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1679] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1679] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1679] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1679] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1680] = "OcamlLexer.capital_letter ::= `D";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1680] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1680] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1680] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1681] = "OcamlLexer.capital_letter ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1681] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1681] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1681] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1681] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1681] = true;
		popD[ART_L_OcamlLexer_capital_letter_1681] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1683] = "OcamlLexer.capital_letter ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1683] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1683] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1683] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1683] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1684] = "OcamlLexer.capital_letter ::= `E";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1684] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1684] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1684] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1685] = "OcamlLexer.capital_letter ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1685] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1685] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1685] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1685] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1685] = true;
		popD[ART_L_OcamlLexer_capital_letter_1685] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1687] = "OcamlLexer.capital_letter ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1687] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1687] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1687] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1687] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1688] = "OcamlLexer.capital_letter ::= `F";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1688] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1688] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1688] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1689] = "OcamlLexer.capital_letter ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1689] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1689] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1689] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1689] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1689] = true;
		popD[ART_L_OcamlLexer_capital_letter_1689] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1691] = "OcamlLexer.capital_letter ::= . `G";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1691] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1691] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1691] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1691] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1692] = "OcamlLexer.capital_letter ::= `G";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1692] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1692] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1692] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1693] = "OcamlLexer.capital_letter ::= `G. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1693] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1693] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1693] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1693] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1693] = true;
		popD[ART_L_OcamlLexer_capital_letter_1693] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1695] = "OcamlLexer.capital_letter ::= . `H";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1695] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1695] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1695] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1695] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1696] = "OcamlLexer.capital_letter ::= `H";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1696] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1696] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1696] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1697] = "OcamlLexer.capital_letter ::= `H. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1697] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1697] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1697] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1697] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1697] = true;
		popD[ART_L_OcamlLexer_capital_letter_1697] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1699] = "OcamlLexer.capital_letter ::= . `I";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1699] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1699] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1699] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1699] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1700] = "OcamlLexer.capital_letter ::= `I";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1700] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1700] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1700] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1701] = "OcamlLexer.capital_letter ::= `I. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1701] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1701] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1701] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1701] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1701] = true;
		popD[ART_L_OcamlLexer_capital_letter_1701] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1703] = "OcamlLexer.capital_letter ::= . `J";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1703] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1703] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1703] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1703] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1704] = "OcamlLexer.capital_letter ::= `J";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1704] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1704] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1704] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1705] = "OcamlLexer.capital_letter ::= `J. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1705] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1705] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1705] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1705] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1705] = true;
		popD[ART_L_OcamlLexer_capital_letter_1705] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1707] = "OcamlLexer.capital_letter ::= . `K";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1707] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1707] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1707] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1707] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1708] = "OcamlLexer.capital_letter ::= `K";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1708] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1708] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1708] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1709] = "OcamlLexer.capital_letter ::= `K. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1709] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1709] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1709] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1709] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1709] = true;
		popD[ART_L_OcamlLexer_capital_letter_1709] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1711] = "OcamlLexer.capital_letter ::= . `L";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1711] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1711] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1711] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1711] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1712] = "OcamlLexer.capital_letter ::= `L";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1712] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1712] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1712] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1713] = "OcamlLexer.capital_letter ::= `L. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1713] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1713] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1713] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1713] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1713] = true;
		popD[ART_L_OcamlLexer_capital_letter_1713] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1715] = "OcamlLexer.capital_letter ::= . `M";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1715] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1715] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1715] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1715] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1716] = "OcamlLexer.capital_letter ::= `M";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1716] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1716] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1716] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1717] = "OcamlLexer.capital_letter ::= `M. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1717] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1717] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1717] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1717] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1717] = true;
		popD[ART_L_OcamlLexer_capital_letter_1717] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1719] = "OcamlLexer.capital_letter ::= . `N";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1719] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1719] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1719] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1719] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1720] = "OcamlLexer.capital_letter ::= `N";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1720] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1720] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1720] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1721] = "OcamlLexer.capital_letter ::= `N. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1721] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1721] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1721] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1721] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1721] = true;
		popD[ART_L_OcamlLexer_capital_letter_1721] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1723] = "OcamlLexer.capital_letter ::= . `O";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1723] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1723] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1723] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1723] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1724] = "OcamlLexer.capital_letter ::= `O";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1724] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1724] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1724] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1725] = "OcamlLexer.capital_letter ::= `O. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1725] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1725] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1725] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1725] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1725] = true;
		popD[ART_L_OcamlLexer_capital_letter_1725] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1727] = "OcamlLexer.capital_letter ::= . `P";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1727] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1727] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1727] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1727] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1728] = "OcamlLexer.capital_letter ::= `P";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1728] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1728] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1728] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1729] = "OcamlLexer.capital_letter ::= `P. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1729] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1729] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1729] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1729] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1729] = true;
		popD[ART_L_OcamlLexer_capital_letter_1729] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1731] = "OcamlLexer.capital_letter ::= . `Q";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1731] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1731] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1731] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1731] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1732] = "OcamlLexer.capital_letter ::= `Q";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1732] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1732] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1732] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1733] = "OcamlLexer.capital_letter ::= `Q. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1733] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1733] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1733] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1733] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1733] = true;
		popD[ART_L_OcamlLexer_capital_letter_1733] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1735] = "OcamlLexer.capital_letter ::= . `R";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1735] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1735] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1735] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1735] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1736] = "OcamlLexer.capital_letter ::= `R";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1736] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1736] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1736] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1737] = "OcamlLexer.capital_letter ::= `R. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1737] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1737] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1737] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1737] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1737] = true;
		popD[ART_L_OcamlLexer_capital_letter_1737] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1739] = "OcamlLexer.capital_letter ::= . `S";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1739] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1739] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1739] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1739] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1740] = "OcamlLexer.capital_letter ::= `S";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1740] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1740] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1740] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1741] = "OcamlLexer.capital_letter ::= `S. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1741] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1741] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1741] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1741] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1741] = true;
		popD[ART_L_OcamlLexer_capital_letter_1741] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1743] = "OcamlLexer.capital_letter ::= . `T";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1743] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1743] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1743] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1743] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1744] = "OcamlLexer.capital_letter ::= `T";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1744] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1744] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1744] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1745] = "OcamlLexer.capital_letter ::= `T. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1745] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1745] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1745] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1745] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1745] = true;
		popD[ART_L_OcamlLexer_capital_letter_1745] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1747] = "OcamlLexer.capital_letter ::= . `U";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1747] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1747] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1747] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1747] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1748] = "OcamlLexer.capital_letter ::= `U";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1748] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1748] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1748] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1749] = "OcamlLexer.capital_letter ::= `U. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1749] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1749] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1749] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1749] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1749] = true;
		popD[ART_L_OcamlLexer_capital_letter_1749] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1751] = "OcamlLexer.capital_letter ::= . `V";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1751] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1751] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1751] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1751] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1752] = "OcamlLexer.capital_letter ::= `V";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1752] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1752] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1752] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1753] = "OcamlLexer.capital_letter ::= `V. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1753] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1753] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1753] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1753] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1753] = true;
		popD[ART_L_OcamlLexer_capital_letter_1753] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1755] = "OcamlLexer.capital_letter ::= . `W";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1755] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1755] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1755] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1755] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1756] = "OcamlLexer.capital_letter ::= `W";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1756] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1756] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1756] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1757] = "OcamlLexer.capital_letter ::= `W. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1757] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1757] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1757] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1757] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1757] = true;
		popD[ART_L_OcamlLexer_capital_letter_1757] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1759] = "OcamlLexer.capital_letter ::= . `X";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1759] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1759] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1759] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1759] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1760] = "OcamlLexer.capital_letter ::= `X";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1760] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1760] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1760] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1761] = "OcamlLexer.capital_letter ::= `X. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1761] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1761] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1761] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1761] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1761] = true;
		popD[ART_L_OcamlLexer_capital_letter_1761] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1763] = "OcamlLexer.capital_letter ::= . `Y";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1763] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1763] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1763] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1763] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1764] = "OcamlLexer.capital_letter ::= `Y";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1764] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1764] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1764] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1765] = "OcamlLexer.capital_letter ::= `Y. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1765] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1765] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1765] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1765] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1765] = true;
		popD[ART_L_OcamlLexer_capital_letter_1765] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1767] = "OcamlLexer.capital_letter ::= . `Z";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1767] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1767] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1767] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capital_letter_1767] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1768] = "OcamlLexer.capital_letter ::= `Z";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1768] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1768] = ART_L_OcamlLexer_capital_letter;
		popD[ART_L_OcamlLexer_capital_letter_1768] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capital_letter_1769] = "OcamlLexer.capital_letter ::= `Z. ";
		artLabelStrings[ART_L_OcamlLexer_capital_letter_1769] = "";
		lhsL[ART_L_OcamlLexer_capital_letter_1769] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capital_letter_1769] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capital_letter_1769] = true;
		eoR_pL[ART_L_OcamlLexer_capital_letter_1769] = true;
		popD[ART_L_OcamlLexer_capital_letter_1769] = true;
	}

	public void artTableInitialiser_118() {
		artLabelInternalStrings[ART_L_OcamlLexer_capitalized_ident] = "OcamlLexer.capitalized_ident ";
		artLabelStrings[ART_L_OcamlLexer_capitalized_ident] = "capitalized_ident";
		artKindOfs[ART_L_OcamlLexer_capitalized_ident] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_capitalized_ident_1656] = "OcamlLexer.capitalized_ident ::= . OcamlLexer.capital_letter ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_capitalized_ident_1656] = "";
		lhsL[ART_L_OcamlLexer_capitalized_ident_1656] = ART_L_OcamlLexer_capitalized_ident;
		artKindOfs[ART_L_OcamlLexer_capitalized_ident_1656] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_capitalized_ident_1658] = "OcamlLexer.capitalized_ident ::= OcamlLexer.capital_letter . ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_capitalized_ident_1658] = "";
		lhsL[ART_L_OcamlLexer_capitalized_ident_1658] = ART_L_OcamlLexer_capitalized_ident;
		artSlotInstanceOfs[ART_L_OcamlLexer_capitalized_ident_1658] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_capitalized_ident_1658] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_capitalized_ident_1658] = true;
		lhsL[ART_C_OcamlLexer_capitalized_ident_1659] = ART_L_OcamlLexer_capitalized_ident;
		artLabelInternalStrings[ART_L_OcamlLexer_capitalized_ident_1663] = "OcamlLexer.capitalized_ident ::= OcamlLexer.capital_letter ( OcamlLexer.identifier_part_character . )* ";
		artLabelStrings[ART_L_OcamlLexer_capitalized_ident_1663] = "";
		lhsL[ART_L_OcamlLexer_capitalized_ident_1663] = ART_L_OcamlLexer_capitalized_ident;
		artSlotInstanceOfs[ART_L_OcamlLexer_capitalized_ident_1663] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_capitalized_ident_1663] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_capitalized_ident_1663] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_capitalized_ident_1664] = "OcamlLexer.capitalized_ident ::= OcamlLexer.capital_letter ( OcamlLexer.identifier_part_character )* . ";
		artLabelStrings[ART_L_OcamlLexer_capitalized_ident_1664] = "";
		lhsL[ART_L_OcamlLexer_capitalized_ident_1664] = ART_L_OcamlLexer_capitalized_ident;
		artKindOfs[ART_L_OcamlLexer_capitalized_ident_1664] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_capitalized_ident_1664] = true;
		eoR_pL[ART_L_OcamlLexer_capitalized_ident_1664] = true;
		popD[ART_L_OcamlLexer_capitalized_ident_1664] = true;
	}

	public void artTableInitialiser_119() {
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal] = "OcamlLexer.char_literal ";
		artLabelStrings[ART_L_OcamlLexer_char_literal] = "char_literal";
		artKindOfs[ART_L_OcamlLexer_char_literal] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4195] = "OcamlLexer.char_literal ::= . `\\\\'OcamlLexer.regular_char `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4195] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4195] = ART_L_OcamlLexer_char_literal;
		artKindOfs[ART_L_OcamlLexer_char_literal_4195] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4196] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.regular_char `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4196] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4196] = ART_L_OcamlLexer_char_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4197] = "OcamlLexer.char_literal ::= `\\\\'. OcamlLexer.regular_char `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4197] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4197] = ART_L_OcamlLexer_char_literal;
		artKindOfs[ART_L_OcamlLexer_char_literal_4197] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_char_literal_4197] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4199] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.regular_char . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4199] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4199] = ART_L_OcamlLexer_char_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_char_literal_4199] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_char_literal_4199] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_char_literal_4199] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4200] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.regular_char `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4200] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4200] = ART_L_OcamlLexer_char_literal;
		popD[ART_L_OcamlLexer_char_literal_4200] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4201] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.regular_char `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4201] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4201] = ART_L_OcamlLexer_char_literal;
		artKindOfs[ART_L_OcamlLexer_char_literal_4201] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_char_literal_4201] = true;
		eoR_pL[ART_L_OcamlLexer_char_literal_4201] = true;
		popD[ART_L_OcamlLexer_char_literal_4201] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4203] = "OcamlLexer.char_literal ::= . `\\\\'OcamlLexer.escape_sequence `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4203] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4203] = ART_L_OcamlLexer_char_literal;
		artKindOfs[ART_L_OcamlLexer_char_literal_4203] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4204] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.escape_sequence `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4204] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4204] = ART_L_OcamlLexer_char_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4205] = "OcamlLexer.char_literal ::= `\\\\'. OcamlLexer.escape_sequence `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4205] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4205] = ART_L_OcamlLexer_char_literal;
		artKindOfs[ART_L_OcamlLexer_char_literal_4205] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_char_literal_4205] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4207] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.escape_sequence . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4207] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4207] = ART_L_OcamlLexer_char_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_char_literal_4207] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_char_literal_4207] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_char_literal_4207] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4208] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.escape_sequence `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4208] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4208] = ART_L_OcamlLexer_char_literal;
		popD[ART_L_OcamlLexer_char_literal_4208] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_char_literal_4209] = "OcamlLexer.char_literal ::= `\\\\'OcamlLexer.escape_sequence `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_char_literal_4209] = "";
		lhsL[ART_L_OcamlLexer_char_literal_4209] = ART_L_OcamlLexer_char_literal;
		artKindOfs[ART_L_OcamlLexer_char_literal_4209] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_char_literal_4209] = true;
		eoR_pL[ART_L_OcamlLexer_char_literal_4209] = true;
		popD[ART_L_OcamlLexer_char_literal_4209] = true;
	}

	public void artTableInitialiser_120() {
		artLabelInternalStrings[ART_L_OcamlLexer_class] = "OcamlLexer.class ";
		artLabelStrings[ART_L_OcamlLexer_class] = "class";
		artKindOfs[ART_L_OcamlLexer_class] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_class_508] = "OcamlLexer.class ::= . `c`l`a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_508] = "";
		lhsL[ART_L_OcamlLexer_class_508] = ART_L_OcamlLexer_class;
		artKindOfs[ART_L_OcamlLexer_class_508] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_class_508] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_509] = "OcamlLexer.class ::= `c`l`a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_509] = "";
		lhsL[ART_L_OcamlLexer_class_509] = ART_L_OcamlLexer_class;
		popD[ART_L_OcamlLexer_class_509] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_510] = "OcamlLexer.class ::= `c. `l`a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_510] = "";
		lhsL[ART_L_OcamlLexer_class_510] = ART_L_OcamlLexer_class;
		artKindOfs[ART_L_OcamlLexer_class_510] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_class_510] = true;
		popD[ART_L_OcamlLexer_class_510] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_511] = "OcamlLexer.class ::= `c`l`a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_511] = "";
		lhsL[ART_L_OcamlLexer_class_511] = ART_L_OcamlLexer_class;
		popD[ART_L_OcamlLexer_class_511] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_512] = "OcamlLexer.class ::= `c`l. `a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_512] = "";
		lhsL[ART_L_OcamlLexer_class_512] = ART_L_OcamlLexer_class;
		artKindOfs[ART_L_OcamlLexer_class_512] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_class_512] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_513] = "OcamlLexer.class ::= `c`l`a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_513] = "";
		lhsL[ART_L_OcamlLexer_class_513] = ART_L_OcamlLexer_class;
		popD[ART_L_OcamlLexer_class_513] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_514] = "OcamlLexer.class ::= `c`l`a. `s`s";
		artLabelStrings[ART_L_OcamlLexer_class_514] = "";
		lhsL[ART_L_OcamlLexer_class_514] = ART_L_OcamlLexer_class;
		artKindOfs[ART_L_OcamlLexer_class_514] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_class_514] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_515] = "OcamlLexer.class ::= `c`l`a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_515] = "";
		lhsL[ART_L_OcamlLexer_class_515] = ART_L_OcamlLexer_class;
		popD[ART_L_OcamlLexer_class_515] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_516] = "OcamlLexer.class ::= `c`l`a`s. `s";
		artLabelStrings[ART_L_OcamlLexer_class_516] = "";
		lhsL[ART_L_OcamlLexer_class_516] = ART_L_OcamlLexer_class;
		artKindOfs[ART_L_OcamlLexer_class_516] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_class_516] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_517] = "OcamlLexer.class ::= `c`l`a`s`s";
		artLabelStrings[ART_L_OcamlLexer_class_517] = "";
		lhsL[ART_L_OcamlLexer_class_517] = ART_L_OcamlLexer_class;
		popD[ART_L_OcamlLexer_class_517] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_class_518] = "OcamlLexer.class ::= `c`l`a`s`s. ";
		artLabelStrings[ART_L_OcamlLexer_class_518] = "";
		lhsL[ART_L_OcamlLexer_class_518] = ART_L_OcamlLexer_class;
		artKindOfs[ART_L_OcamlLexer_class_518] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_class_518] = true;
		eoR_pL[ART_L_OcamlLexer_class_518] = true;
		popD[ART_L_OcamlLexer_class_518] = true;
	}

	public void artTableInitialiser_121() {
		artLabelInternalStrings[ART_L_OcamlLexer_colon] = "OcamlLexer.colon ";
		artLabelStrings[ART_L_OcamlLexer_colon] = "colon";
		artKindOfs[ART_L_OcamlLexer_colon] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_colon_1209] = "OcamlLexer.colon ::= . `:";
		artLabelStrings[ART_L_OcamlLexer_colon_1209] = "";
		lhsL[ART_L_OcamlLexer_colon_1209] = ART_L_OcamlLexer_colon;
		artKindOfs[ART_L_OcamlLexer_colon_1209] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_colon_1209] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colon_1210] = "OcamlLexer.colon ::= `:";
		artLabelStrings[ART_L_OcamlLexer_colon_1210] = "";
		lhsL[ART_L_OcamlLexer_colon_1210] = ART_L_OcamlLexer_colon;
		popD[ART_L_OcamlLexer_colon_1210] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colon_1211] = "OcamlLexer.colon ::= `:. ";
		artLabelStrings[ART_L_OcamlLexer_colon_1211] = "";
		lhsL[ART_L_OcamlLexer_colon_1211] = ART_L_OcamlLexer_colon;
		artKindOfs[ART_L_OcamlLexer_colon_1211] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_colon_1211] = true;
		eoR_pL[ART_L_OcamlLexer_colon_1211] = true;
		popD[ART_L_OcamlLexer_colon_1211] = true;
	}

	public void artTableInitialiser_122() {
		artLabelInternalStrings[ART_L_OcamlLexer_coloncolon] = "OcamlLexer.coloncolon ";
		artLabelStrings[ART_L_OcamlLexer_coloncolon] = "coloncolon";
		artKindOfs[ART_L_OcamlLexer_coloncolon] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_coloncolon_1214] = "OcamlLexer.coloncolon ::= . `:`:";
		artLabelStrings[ART_L_OcamlLexer_coloncolon_1214] = "";
		lhsL[ART_L_OcamlLexer_coloncolon_1214] = ART_L_OcamlLexer_coloncolon;
		artKindOfs[ART_L_OcamlLexer_coloncolon_1214] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_coloncolon_1214] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_coloncolon_1215] = "OcamlLexer.coloncolon ::= `:`:";
		artLabelStrings[ART_L_OcamlLexer_coloncolon_1215] = "";
		lhsL[ART_L_OcamlLexer_coloncolon_1215] = ART_L_OcamlLexer_coloncolon;
		popD[ART_L_OcamlLexer_coloncolon_1215] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_coloncolon_1216] = "OcamlLexer.coloncolon ::= `:. `:";
		artLabelStrings[ART_L_OcamlLexer_coloncolon_1216] = "";
		lhsL[ART_L_OcamlLexer_coloncolon_1216] = ART_L_OcamlLexer_coloncolon;
		artKindOfs[ART_L_OcamlLexer_coloncolon_1216] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_coloncolon_1216] = true;
		popD[ART_L_OcamlLexer_coloncolon_1216] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_coloncolon_1217] = "OcamlLexer.coloncolon ::= `:`:";
		artLabelStrings[ART_L_OcamlLexer_coloncolon_1217] = "";
		lhsL[ART_L_OcamlLexer_coloncolon_1217] = ART_L_OcamlLexer_coloncolon;
		popD[ART_L_OcamlLexer_coloncolon_1217] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_coloncolon_1218] = "OcamlLexer.coloncolon ::= `:`:. ";
		artLabelStrings[ART_L_OcamlLexer_coloncolon_1218] = "";
		lhsL[ART_L_OcamlLexer_coloncolon_1218] = ART_L_OcamlLexer_coloncolon;
		artKindOfs[ART_L_OcamlLexer_coloncolon_1218] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_coloncolon_1218] = true;
		eoR_pL[ART_L_OcamlLexer_coloncolon_1218] = true;
		popD[ART_L_OcamlLexer_coloncolon_1218] = true;
	}

	public void artTableInitialiser_123() {
		artLabelInternalStrings[ART_L_OcamlLexer_colonequals] = "OcamlLexer.colonequals ";
		artLabelStrings[ART_L_OcamlLexer_colonequals] = "colonequals";
		artKindOfs[ART_L_OcamlLexer_colonequals] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_colonequals_1221] = "OcamlLexer.colonequals ::= . `:`=";
		artLabelStrings[ART_L_OcamlLexer_colonequals_1221] = "";
		lhsL[ART_L_OcamlLexer_colonequals_1221] = ART_L_OcamlLexer_colonequals;
		artKindOfs[ART_L_OcamlLexer_colonequals_1221] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_colonequals_1221] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colonequals_1222] = "OcamlLexer.colonequals ::= `:`=";
		artLabelStrings[ART_L_OcamlLexer_colonequals_1222] = "";
		lhsL[ART_L_OcamlLexer_colonequals_1222] = ART_L_OcamlLexer_colonequals;
		popD[ART_L_OcamlLexer_colonequals_1222] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colonequals_1223] = "OcamlLexer.colonequals ::= `:. `=";
		artLabelStrings[ART_L_OcamlLexer_colonequals_1223] = "";
		lhsL[ART_L_OcamlLexer_colonequals_1223] = ART_L_OcamlLexer_colonequals;
		artKindOfs[ART_L_OcamlLexer_colonequals_1223] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_colonequals_1223] = true;
		popD[ART_L_OcamlLexer_colonequals_1223] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colonequals_1224] = "OcamlLexer.colonequals ::= `:`=";
		artLabelStrings[ART_L_OcamlLexer_colonequals_1224] = "";
		lhsL[ART_L_OcamlLexer_colonequals_1224] = ART_L_OcamlLexer_colonequals;
		popD[ART_L_OcamlLexer_colonequals_1224] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colonequals_1225] = "OcamlLexer.colonequals ::= `:`=. ";
		artLabelStrings[ART_L_OcamlLexer_colonequals_1225] = "";
		lhsL[ART_L_OcamlLexer_colonequals_1225] = ART_L_OcamlLexer_colonequals;
		artKindOfs[ART_L_OcamlLexer_colonequals_1225] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_colonequals_1225] = true;
		eoR_pL[ART_L_OcamlLexer_colonequals_1225] = true;
		popD[ART_L_OcamlLexer_colonequals_1225] = true;
	}

	public void artTableInitialiser_124() {
		artLabelInternalStrings[ART_L_OcamlLexer_colongreater] = "OcamlLexer.colongreater ";
		artLabelStrings[ART_L_OcamlLexer_colongreater] = "colongreater";
		artKindOfs[ART_L_OcamlLexer_colongreater] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_colongreater_1228] = "OcamlLexer.colongreater ::= . `:`>";
		artLabelStrings[ART_L_OcamlLexer_colongreater_1228] = "";
		lhsL[ART_L_OcamlLexer_colongreater_1228] = ART_L_OcamlLexer_colongreater;
		artKindOfs[ART_L_OcamlLexer_colongreater_1228] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_colongreater_1228] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colongreater_1229] = "OcamlLexer.colongreater ::= `:`>";
		artLabelStrings[ART_L_OcamlLexer_colongreater_1229] = "";
		lhsL[ART_L_OcamlLexer_colongreater_1229] = ART_L_OcamlLexer_colongreater;
		popD[ART_L_OcamlLexer_colongreater_1229] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colongreater_1230] = "OcamlLexer.colongreater ::= `:. `>";
		artLabelStrings[ART_L_OcamlLexer_colongreater_1230] = "";
		lhsL[ART_L_OcamlLexer_colongreater_1230] = ART_L_OcamlLexer_colongreater;
		artKindOfs[ART_L_OcamlLexer_colongreater_1230] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_colongreater_1230] = true;
		popD[ART_L_OcamlLexer_colongreater_1230] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colongreater_1231] = "OcamlLexer.colongreater ::= `:`>";
		artLabelStrings[ART_L_OcamlLexer_colongreater_1231] = "";
		lhsL[ART_L_OcamlLexer_colongreater_1231] = ART_L_OcamlLexer_colongreater;
		popD[ART_L_OcamlLexer_colongreater_1231] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_colongreater_1232] = "OcamlLexer.colongreater ::= `:`>. ";
		artLabelStrings[ART_L_OcamlLexer_colongreater_1232] = "";
		lhsL[ART_L_OcamlLexer_colongreater_1232] = ART_L_OcamlLexer_colongreater;
		artKindOfs[ART_L_OcamlLexer_colongreater_1232] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_colongreater_1232] = true;
		eoR_pL[ART_L_OcamlLexer_colongreater_1232] = true;
		popD[ART_L_OcamlLexer_colongreater_1232] = true;
	}

	public void artTableInitialiser_125() {
		artLabelInternalStrings[ART_L_OcamlLexer_comma] = "OcamlLexer.comma ";
		artLabelStrings[ART_L_OcamlLexer_comma] = "comma";
		artKindOfs[ART_L_OcamlLexer_comma] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_comma_1173] = "OcamlLexer.comma ::= . `,";
		artLabelStrings[ART_L_OcamlLexer_comma_1173] = "";
		lhsL[ART_L_OcamlLexer_comma_1173] = ART_L_OcamlLexer_comma;
		artKindOfs[ART_L_OcamlLexer_comma_1173] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_comma_1173] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comma_1174] = "OcamlLexer.comma ::= `,";
		artLabelStrings[ART_L_OcamlLexer_comma_1174] = "";
		lhsL[ART_L_OcamlLexer_comma_1174] = ART_L_OcamlLexer_comma;
		popD[ART_L_OcamlLexer_comma_1174] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comma_1175] = "OcamlLexer.comma ::= `,. ";
		artLabelStrings[ART_L_OcamlLexer_comma_1175] = "";
		lhsL[ART_L_OcamlLexer_comma_1175] = ART_L_OcamlLexer_comma;
		artKindOfs[ART_L_OcamlLexer_comma_1175] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_comma_1175] = true;
		eoR_pL[ART_L_OcamlLexer_comma_1175] = true;
		popD[ART_L_OcamlLexer_comma_1175] = true;
	}

	public void artTableInitialiser_126() {
		artLabelInternalStrings[ART_L_OcamlLexer_comment] = "OcamlLexer.comment ";
		artLabelStrings[ART_L_OcamlLexer_comment] = "comment";
		artKindOfs[ART_L_OcamlLexer_comment] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1917] = "OcamlLexer.comment ::= . `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1917] = "";
		lhsL[ART_L_OcamlLexer_comment_1917] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1917] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1918] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1918] = "";
		lhsL[ART_L_OcamlLexer_comment_1918] = ART_L_OcamlLexer_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1919] = "OcamlLexer.comment ::= `(. `*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1919] = "";
		lhsL[ART_L_OcamlLexer_comment_1919] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1919] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_comment_1919] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1920] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1920] = "";
		lhsL[ART_L_OcamlLexer_comment_1920] = ART_L_OcamlLexer_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1921] = "OcamlLexer.comment ::= `(`*. ( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1921] = "";
		lhsL[ART_L_OcamlLexer_comment_1921] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1921] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1923] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1923] = "";
		lhsL[ART_A_OcamlLexer_comment_1923] = ART_L_OcamlLexer_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1925] = "OcamlLexer.comment ::= `(`*( . OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1925] = "";
		lhsL[ART_L_OcamlLexer_comment_1925] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1925] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1927] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment . | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1927] = "";
		lhsL[ART_L_OcamlLexer_comment_1927] = ART_L_OcamlLexer_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_comment_1927] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1927] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_comment_1927] = ART_L_OcamlLexer_comment_1932;
		aL[ART_L_OcamlLexer_comment_1927] = ART_L_OcamlLexer_comment_1931;
		eoOPL[ART_L_OcamlLexer_comment_1927] = true;
		popD[ART_L_OcamlLexer_comment_1927] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1929] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | . OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1929] = "";
		lhsL[ART_L_OcamlLexer_comment_1929] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1929] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1931] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment . ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1931] = "";
		lhsL[ART_L_OcamlLexer_comment_1931] = ART_L_OcamlLexer_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_comment_1931] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1931] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_comment_1931] = ART_L_OcamlLexer_comment_1932;
		eoOPL[ART_L_OcamlLexer_comment_1931] = true;
		popD[ART_L_OcamlLexer_comment_1931] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1932] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) . `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1932] = "";
		lhsL[ART_L_OcamlLexer_comment_1932] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1932] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_comment_1932] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1933] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1933] = "";
		lhsL[ART_L_OcamlLexer_comment_1933] = ART_L_OcamlLexer_comment;
		popD[ART_L_OcamlLexer_comment_1933] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1934] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*. `)";
		artLabelStrings[ART_L_OcamlLexer_comment_1934] = "";
		lhsL[ART_L_OcamlLexer_comment_1934] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1934] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_comment_1934] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1935] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`)";
		artLabelStrings[ART_L_OcamlLexer_comment_1935] = "";
		lhsL[ART_L_OcamlLexer_comment_1935] = ART_L_OcamlLexer_comment;
		popD[ART_L_OcamlLexer_comment_1935] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_comment_1936] = "OcamlLexer.comment ::= `(`*( OcamlLexer.comment | OcamlLexer.not_comment ) `*`). ";
		artLabelStrings[ART_L_OcamlLexer_comment_1936] = "";
		lhsL[ART_L_OcamlLexer_comment_1936] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_comment_1936] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_comment_1936] = true;
		eoR_pL[ART_L_OcamlLexer_comment_1936] = true;
		popD[ART_L_OcamlLexer_comment_1936] = true;
	}

	public void artTableInitialiser_127() {
		artLabelInternalStrings[ART_L_OcamlLexer_constraint] = "OcamlLexer.constraint ";
		artLabelStrings[ART_L_OcamlLexer_constraint] = "constraint";
		artKindOfs[ART_L_OcamlLexer_constraint] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_521] = "OcamlLexer.constraint ::= . `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_521] = "";
		lhsL[ART_L_OcamlLexer_constraint_521] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_521] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_521] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_522] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_522] = "";
		lhsL[ART_L_OcamlLexer_constraint_522] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_522] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_523] = "OcamlLexer.constraint ::= `c. `o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_523] = "";
		lhsL[ART_L_OcamlLexer_constraint_523] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_523] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_constraint_523] = true;
		popD[ART_L_OcamlLexer_constraint_523] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_524] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_524] = "";
		lhsL[ART_L_OcamlLexer_constraint_524] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_524] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_525] = "OcamlLexer.constraint ::= `c`o. `n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_525] = "";
		lhsL[ART_L_OcamlLexer_constraint_525] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_525] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_525] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_526] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_526] = "";
		lhsL[ART_L_OcamlLexer_constraint_526] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_526] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_527] = "OcamlLexer.constraint ::= `c`o`n. `s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_527] = "";
		lhsL[ART_L_OcamlLexer_constraint_527] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_527] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_527] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_528] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_528] = "";
		lhsL[ART_L_OcamlLexer_constraint_528] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_528] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_529] = "OcamlLexer.constraint ::= `c`o`n`s. `t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_529] = "";
		lhsL[ART_L_OcamlLexer_constraint_529] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_529] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_529] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_530] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_530] = "";
		lhsL[ART_L_OcamlLexer_constraint_530] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_530] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_531] = "OcamlLexer.constraint ::= `c`o`n`s`t. `r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_531] = "";
		lhsL[ART_L_OcamlLexer_constraint_531] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_531] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_531] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_532] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_532] = "";
		lhsL[ART_L_OcamlLexer_constraint_532] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_532] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_533] = "OcamlLexer.constraint ::= `c`o`n`s`t`r. `a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_533] = "";
		lhsL[ART_L_OcamlLexer_constraint_533] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_533] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_533] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_534] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_534] = "";
		lhsL[ART_L_OcamlLexer_constraint_534] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_534] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_535] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a. `i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_535] = "";
		lhsL[ART_L_OcamlLexer_constraint_535] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_535] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_535] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_536] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_536] = "";
		lhsL[ART_L_OcamlLexer_constraint_536] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_536] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_537] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i. `n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_537] = "";
		lhsL[ART_L_OcamlLexer_constraint_537] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_537] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_537] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_538] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_538] = "";
		lhsL[ART_L_OcamlLexer_constraint_538] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_538] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_539] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n. `t";
		artLabelStrings[ART_L_OcamlLexer_constraint_539] = "";
		lhsL[ART_L_OcamlLexer_constraint_539] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_539] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_constraint_539] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_540] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t";
		artLabelStrings[ART_L_OcamlLexer_constraint_540] = "";
		lhsL[ART_L_OcamlLexer_constraint_540] = ART_L_OcamlLexer_constraint;
		popD[ART_L_OcamlLexer_constraint_540] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_constraint_541] = "OcamlLexer.constraint ::= `c`o`n`s`t`r`a`i`n`t. ";
		artLabelStrings[ART_L_OcamlLexer_constraint_541] = "";
		lhsL[ART_L_OcamlLexer_constraint_541] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_constraint_541] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_constraint_541] = true;
		eoR_pL[ART_L_OcamlLexer_constraint_541] = true;
		popD[ART_L_OcamlLexer_constraint_541] = true;
	}

	public void artTableInitialiser_128() {
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit] = "OcamlLexer.dec_digit ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit] = "dec_digit";
		artKindOfs[ART_L_OcamlLexer_dec_digit] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3954] = "OcamlLexer.dec_digit ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3954] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3954] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3954] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3954] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3955] = "OcamlLexer.dec_digit ::= `0";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3955] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3955] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3955] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3956] = "OcamlLexer.dec_digit ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3956] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3956] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3956] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3956] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3956] = true;
		popD[ART_L_OcamlLexer_dec_digit_3956] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3958] = "OcamlLexer.dec_digit ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3958] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3958] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3958] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3958] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3959] = "OcamlLexer.dec_digit ::= `1";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3959] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3959] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3959] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3960] = "OcamlLexer.dec_digit ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3960] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3960] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3960] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3960] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3960] = true;
		popD[ART_L_OcamlLexer_dec_digit_3960] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3962] = "OcamlLexer.dec_digit ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3962] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3962] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3962] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3962] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3963] = "OcamlLexer.dec_digit ::= `2";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3963] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3963] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3963] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3964] = "OcamlLexer.dec_digit ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3964] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3964] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3964] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3964] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3964] = true;
		popD[ART_L_OcamlLexer_dec_digit_3964] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3966] = "OcamlLexer.dec_digit ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3966] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3966] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3966] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3966] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3967] = "OcamlLexer.dec_digit ::= `3";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3967] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3967] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3967] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3968] = "OcamlLexer.dec_digit ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3968] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3968] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3968] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3968] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3968] = true;
		popD[ART_L_OcamlLexer_dec_digit_3968] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3970] = "OcamlLexer.dec_digit ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3970] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3970] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3970] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3970] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3971] = "OcamlLexer.dec_digit ::= `4";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3971] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3971] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3971] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3972] = "OcamlLexer.dec_digit ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3972] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3972] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3972] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3972] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3972] = true;
		popD[ART_L_OcamlLexer_dec_digit_3972] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3974] = "OcamlLexer.dec_digit ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3974] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3974] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3974] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3974] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3975] = "OcamlLexer.dec_digit ::= `5";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3975] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3975] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3975] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3976] = "OcamlLexer.dec_digit ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3976] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3976] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3976] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3976] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3976] = true;
		popD[ART_L_OcamlLexer_dec_digit_3976] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3978] = "OcamlLexer.dec_digit ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3978] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3978] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3978] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3978] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3979] = "OcamlLexer.dec_digit ::= `6";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3979] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3979] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3979] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3980] = "OcamlLexer.dec_digit ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3980] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3980] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3980] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3980] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3980] = true;
		popD[ART_L_OcamlLexer_dec_digit_3980] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3982] = "OcamlLexer.dec_digit ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3982] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3982] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3982] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3982] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3983] = "OcamlLexer.dec_digit ::= `7";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3983] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3983] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3983] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3984] = "OcamlLexer.dec_digit ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3984] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3984] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3984] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3984] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3984] = true;
		popD[ART_L_OcamlLexer_dec_digit_3984] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3986] = "OcamlLexer.dec_digit ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3986] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3986] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3986] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3986] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3987] = "OcamlLexer.dec_digit ::= `8";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3987] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3987] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3987] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3988] = "OcamlLexer.dec_digit ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3988] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3988] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3988] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3988] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3988] = true;
		popD[ART_L_OcamlLexer_dec_digit_3988] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3990] = "OcamlLexer.dec_digit ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3990] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3990] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3990] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dec_digit_3990] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3991] = "OcamlLexer.dec_digit ::= `9";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3991] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3991] = ART_L_OcamlLexer_dec_digit;
		popD[ART_L_OcamlLexer_dec_digit_3991] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dec_digit_3992] = "OcamlLexer.dec_digit ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_dec_digit_3992] = "";
		lhsL[ART_L_OcamlLexer_dec_digit_3992] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_dec_digit_3992] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dec_digit_3992] = true;
		eoR_pL[ART_L_OcamlLexer_dec_digit_3992] = true;
		popD[ART_L_OcamlLexer_dec_digit_3992] = true;
	}

	public void artTableInitialiser_129() {
		artLabelInternalStrings[ART_L_OcamlLexer_do] = "OcamlLexer.do ";
		artLabelStrings[ART_L_OcamlLexer_do] = "do";
		artKindOfs[ART_L_OcamlLexer_do] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_do_544] = "OcamlLexer.do ::= . `d`o";
		artLabelStrings[ART_L_OcamlLexer_do_544] = "";
		lhsL[ART_L_OcamlLexer_do_544] = ART_L_OcamlLexer_do;
		artKindOfs[ART_L_OcamlLexer_do_544] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_do_544] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_do_545] = "OcamlLexer.do ::= `d`o";
		artLabelStrings[ART_L_OcamlLexer_do_545] = "";
		lhsL[ART_L_OcamlLexer_do_545] = ART_L_OcamlLexer_do;
		popD[ART_L_OcamlLexer_do_545] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_do_546] = "OcamlLexer.do ::= `d. `o";
		artLabelStrings[ART_L_OcamlLexer_do_546] = "";
		lhsL[ART_L_OcamlLexer_do_546] = ART_L_OcamlLexer_do;
		artKindOfs[ART_L_OcamlLexer_do_546] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_do_546] = true;
		popD[ART_L_OcamlLexer_do_546] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_do_547] = "OcamlLexer.do ::= `d`o";
		artLabelStrings[ART_L_OcamlLexer_do_547] = "";
		lhsL[ART_L_OcamlLexer_do_547] = ART_L_OcamlLexer_do;
		popD[ART_L_OcamlLexer_do_547] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_do_548] = "OcamlLexer.do ::= `d`o. ";
		artLabelStrings[ART_L_OcamlLexer_do_548] = "";
		lhsL[ART_L_OcamlLexer_do_548] = ART_L_OcamlLexer_do;
		artKindOfs[ART_L_OcamlLexer_do_548] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_do_548] = true;
		eoR_pL[ART_L_OcamlLexer_do_548] = true;
		popD[ART_L_OcamlLexer_do_548] = true;
	}

	public void artTableInitialiser_130() {
		artLabelInternalStrings[ART_L_OcamlLexer_done] = "OcamlLexer.done ";
		artLabelStrings[ART_L_OcamlLexer_done] = "done";
		artKindOfs[ART_L_OcamlLexer_done] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_done_551] = "OcamlLexer.done ::= . `d`o`n`e";
		artLabelStrings[ART_L_OcamlLexer_done_551] = "";
		lhsL[ART_L_OcamlLexer_done_551] = ART_L_OcamlLexer_done;
		artKindOfs[ART_L_OcamlLexer_done_551] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_done_551] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_552] = "OcamlLexer.done ::= `d`o`n`e";
		artLabelStrings[ART_L_OcamlLexer_done_552] = "";
		lhsL[ART_L_OcamlLexer_done_552] = ART_L_OcamlLexer_done;
		popD[ART_L_OcamlLexer_done_552] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_553] = "OcamlLexer.done ::= `d. `o`n`e";
		artLabelStrings[ART_L_OcamlLexer_done_553] = "";
		lhsL[ART_L_OcamlLexer_done_553] = ART_L_OcamlLexer_done;
		artKindOfs[ART_L_OcamlLexer_done_553] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_done_553] = true;
		popD[ART_L_OcamlLexer_done_553] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_554] = "OcamlLexer.done ::= `d`o`n`e";
		artLabelStrings[ART_L_OcamlLexer_done_554] = "";
		lhsL[ART_L_OcamlLexer_done_554] = ART_L_OcamlLexer_done;
		popD[ART_L_OcamlLexer_done_554] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_555] = "OcamlLexer.done ::= `d`o. `n`e";
		artLabelStrings[ART_L_OcamlLexer_done_555] = "";
		lhsL[ART_L_OcamlLexer_done_555] = ART_L_OcamlLexer_done;
		artKindOfs[ART_L_OcamlLexer_done_555] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_done_555] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_556] = "OcamlLexer.done ::= `d`o`n`e";
		artLabelStrings[ART_L_OcamlLexer_done_556] = "";
		lhsL[ART_L_OcamlLexer_done_556] = ART_L_OcamlLexer_done;
		popD[ART_L_OcamlLexer_done_556] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_557] = "OcamlLexer.done ::= `d`o`n. `e";
		artLabelStrings[ART_L_OcamlLexer_done_557] = "";
		lhsL[ART_L_OcamlLexer_done_557] = ART_L_OcamlLexer_done;
		artKindOfs[ART_L_OcamlLexer_done_557] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_done_557] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_558] = "OcamlLexer.done ::= `d`o`n`e";
		artLabelStrings[ART_L_OcamlLexer_done_558] = "";
		lhsL[ART_L_OcamlLexer_done_558] = ART_L_OcamlLexer_done;
		popD[ART_L_OcamlLexer_done_558] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_done_559] = "OcamlLexer.done ::= `d`o`n`e. ";
		artLabelStrings[ART_L_OcamlLexer_done_559] = "";
		lhsL[ART_L_OcamlLexer_done_559] = ART_L_OcamlLexer_done;
		artKindOfs[ART_L_OcamlLexer_done_559] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_done_559] = true;
		eoR_pL[ART_L_OcamlLexer_done_559] = true;
		popD[ART_L_OcamlLexer_done_559] = true;
	}

	public void artTableInitialiser_131() {
		artLabelInternalStrings[ART_L_OcamlLexer_dot] = "OcamlLexer.dot ";
		artLabelStrings[ART_L_OcamlLexer_dot] = "dot";
		artKindOfs[ART_L_OcamlLexer_dot] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_dot_1197] = "OcamlLexer.dot ::= . `.";
		artLabelStrings[ART_L_OcamlLexer_dot_1197] = "";
		lhsL[ART_L_OcamlLexer_dot_1197] = ART_L_OcamlLexer_dot;
		artKindOfs[ART_L_OcamlLexer_dot_1197] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dot_1197] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dot_1198] = "OcamlLexer.dot ::= `.";
		artLabelStrings[ART_L_OcamlLexer_dot_1198] = "";
		lhsL[ART_L_OcamlLexer_dot_1198] = ART_L_OcamlLexer_dot;
		popD[ART_L_OcamlLexer_dot_1198] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dot_1199] = "OcamlLexer.dot ::= `.. ";
		artLabelStrings[ART_L_OcamlLexer_dot_1199] = "";
		lhsL[ART_L_OcamlLexer_dot_1199] = ART_L_OcamlLexer_dot;
		artKindOfs[ART_L_OcamlLexer_dot_1199] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dot_1199] = true;
		eoR_pL[ART_L_OcamlLexer_dot_1199] = true;
		popD[ART_L_OcamlLexer_dot_1199] = true;
	}

	public void artTableInitialiser_132() {
		artLabelInternalStrings[ART_L_OcamlLexer_dotdot] = "OcamlLexer.dotdot ";
		artLabelStrings[ART_L_OcamlLexer_dotdot] = "dotdot";
		artKindOfs[ART_L_OcamlLexer_dotdot] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_dotdot_1202] = "OcamlLexer.dotdot ::= . `.`.";
		artLabelStrings[ART_L_OcamlLexer_dotdot_1202] = "";
		lhsL[ART_L_OcamlLexer_dotdot_1202] = ART_L_OcamlLexer_dotdot;
		artKindOfs[ART_L_OcamlLexer_dotdot_1202] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_dotdot_1202] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dotdot_1203] = "OcamlLexer.dotdot ::= `.`.";
		artLabelStrings[ART_L_OcamlLexer_dotdot_1203] = "";
		lhsL[ART_L_OcamlLexer_dotdot_1203] = ART_L_OcamlLexer_dotdot;
		popD[ART_L_OcamlLexer_dotdot_1203] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dotdot_1204] = "OcamlLexer.dotdot ::= `.. `.";
		artLabelStrings[ART_L_OcamlLexer_dotdot_1204] = "";
		lhsL[ART_L_OcamlLexer_dotdot_1204] = ART_L_OcamlLexer_dotdot;
		artKindOfs[ART_L_OcamlLexer_dotdot_1204] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_dotdot_1204] = true;
		popD[ART_L_OcamlLexer_dotdot_1204] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dotdot_1205] = "OcamlLexer.dotdot ::= `.`.";
		artLabelStrings[ART_L_OcamlLexer_dotdot_1205] = "";
		lhsL[ART_L_OcamlLexer_dotdot_1205] = ART_L_OcamlLexer_dotdot;
		popD[ART_L_OcamlLexer_dotdot_1205] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_dotdot_1206] = "OcamlLexer.dotdot ::= `.`.. ";
		artLabelStrings[ART_L_OcamlLexer_dotdot_1206] = "";
		lhsL[ART_L_OcamlLexer_dotdot_1206] = ART_L_OcamlLexer_dotdot;
		artKindOfs[ART_L_OcamlLexer_dotdot_1206] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_dotdot_1206] = true;
		eoR_pL[ART_L_OcamlLexer_dotdot_1206] = true;
		popD[ART_L_OcamlLexer_dotdot_1206] = true;
	}

	public void artTableInitialiser_133() {
		artLabelInternalStrings[ART_L_OcamlLexer_downto] = "OcamlLexer.downto ";
		artLabelStrings[ART_L_OcamlLexer_downto] = "downto";
		artKindOfs[ART_L_OcamlLexer_downto] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_562] = "OcamlLexer.downto ::= . `d`o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_562] = "";
		lhsL[ART_L_OcamlLexer_downto_562] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_downto_562] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_downto_562] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_563] = "OcamlLexer.downto ::= `d`o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_563] = "";
		lhsL[ART_L_OcamlLexer_downto_563] = ART_L_OcamlLexer_downto;
		popD[ART_L_OcamlLexer_downto_563] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_564] = "OcamlLexer.downto ::= `d. `o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_564] = "";
		lhsL[ART_L_OcamlLexer_downto_564] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_downto_564] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_downto_564] = true;
		popD[ART_L_OcamlLexer_downto_564] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_565] = "OcamlLexer.downto ::= `d`o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_565] = "";
		lhsL[ART_L_OcamlLexer_downto_565] = ART_L_OcamlLexer_downto;
		popD[ART_L_OcamlLexer_downto_565] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_566] = "OcamlLexer.downto ::= `d`o. `w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_566] = "";
		lhsL[ART_L_OcamlLexer_downto_566] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_downto_566] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_downto_566] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_567] = "OcamlLexer.downto ::= `d`o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_567] = "";
		lhsL[ART_L_OcamlLexer_downto_567] = ART_L_OcamlLexer_downto;
		popD[ART_L_OcamlLexer_downto_567] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_568] = "OcamlLexer.downto ::= `d`o`w. `n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_568] = "";
		lhsL[ART_L_OcamlLexer_downto_568] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_downto_568] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_downto_568] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_569] = "OcamlLexer.downto ::= `d`o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_569] = "";
		lhsL[ART_L_OcamlLexer_downto_569] = ART_L_OcamlLexer_downto;
		popD[ART_L_OcamlLexer_downto_569] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_570] = "OcamlLexer.downto ::= `d`o`w`n. `t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_570] = "";
		lhsL[ART_L_OcamlLexer_downto_570] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_downto_570] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_downto_570] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_571] = "OcamlLexer.downto ::= `d`o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_571] = "";
		lhsL[ART_L_OcamlLexer_downto_571] = ART_L_OcamlLexer_downto;
		popD[ART_L_OcamlLexer_downto_571] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_572] = "OcamlLexer.downto ::= `d`o`w`n`t. `o";
		artLabelStrings[ART_L_OcamlLexer_downto_572] = "";
		lhsL[ART_L_OcamlLexer_downto_572] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_downto_572] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_downto_572] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_573] = "OcamlLexer.downto ::= `d`o`w`n`t`o";
		artLabelStrings[ART_L_OcamlLexer_downto_573] = "";
		lhsL[ART_L_OcamlLexer_downto_573] = ART_L_OcamlLexer_downto;
		popD[ART_L_OcamlLexer_downto_573] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_downto_574] = "OcamlLexer.downto ::= `d`o`w`n`t`o. ";
		artLabelStrings[ART_L_OcamlLexer_downto_574] = "";
		lhsL[ART_L_OcamlLexer_downto_574] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_downto_574] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_downto_574] = true;
		eoR_pL[ART_L_OcamlLexer_downto_574] = true;
		popD[ART_L_OcamlLexer_downto_574] = true;
	}

	public void artTableInitialiser_134() {
		artLabelInternalStrings[ART_L_OcamlLexer_else] = "OcamlLexer.else ";
		artLabelStrings[ART_L_OcamlLexer_else] = "else";
		artKindOfs[ART_L_OcamlLexer_else] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_else_577] = "OcamlLexer.else ::= . `e`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_else_577] = "";
		lhsL[ART_L_OcamlLexer_else_577] = ART_L_OcamlLexer_else;
		artKindOfs[ART_L_OcamlLexer_else_577] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_else_577] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_578] = "OcamlLexer.else ::= `e`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_else_578] = "";
		lhsL[ART_L_OcamlLexer_else_578] = ART_L_OcamlLexer_else;
		popD[ART_L_OcamlLexer_else_578] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_579] = "OcamlLexer.else ::= `e. `l`s`e";
		artLabelStrings[ART_L_OcamlLexer_else_579] = "";
		lhsL[ART_L_OcamlLexer_else_579] = ART_L_OcamlLexer_else;
		artKindOfs[ART_L_OcamlLexer_else_579] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_else_579] = true;
		popD[ART_L_OcamlLexer_else_579] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_580] = "OcamlLexer.else ::= `e`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_else_580] = "";
		lhsL[ART_L_OcamlLexer_else_580] = ART_L_OcamlLexer_else;
		popD[ART_L_OcamlLexer_else_580] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_581] = "OcamlLexer.else ::= `e`l. `s`e";
		artLabelStrings[ART_L_OcamlLexer_else_581] = "";
		lhsL[ART_L_OcamlLexer_else_581] = ART_L_OcamlLexer_else;
		artKindOfs[ART_L_OcamlLexer_else_581] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_else_581] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_582] = "OcamlLexer.else ::= `e`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_else_582] = "";
		lhsL[ART_L_OcamlLexer_else_582] = ART_L_OcamlLexer_else;
		popD[ART_L_OcamlLexer_else_582] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_583] = "OcamlLexer.else ::= `e`l`s. `e";
		artLabelStrings[ART_L_OcamlLexer_else_583] = "";
		lhsL[ART_L_OcamlLexer_else_583] = ART_L_OcamlLexer_else;
		artKindOfs[ART_L_OcamlLexer_else_583] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_else_583] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_584] = "OcamlLexer.else ::= `e`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_else_584] = "";
		lhsL[ART_L_OcamlLexer_else_584] = ART_L_OcamlLexer_else;
		popD[ART_L_OcamlLexer_else_584] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_else_585] = "OcamlLexer.else ::= `e`l`s`e. ";
		artLabelStrings[ART_L_OcamlLexer_else_585] = "";
		lhsL[ART_L_OcamlLexer_else_585] = ART_L_OcamlLexer_else;
		artKindOfs[ART_L_OcamlLexer_else_585] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_else_585] = true;
		eoR_pL[ART_L_OcamlLexer_else_585] = true;
		popD[ART_L_OcamlLexer_else_585] = true;
	}

	public void artTableInitialiser_135() {
		artLabelInternalStrings[ART_L_OcamlLexer_end] = "OcamlLexer.end ";
		artLabelStrings[ART_L_OcamlLexer_end] = "end";
		artKindOfs[ART_L_OcamlLexer_end] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_end_588] = "OcamlLexer.end ::= . `e`n`d";
		artLabelStrings[ART_L_OcamlLexer_end_588] = "";
		lhsL[ART_L_OcamlLexer_end_588] = ART_L_OcamlLexer_end;
		artKindOfs[ART_L_OcamlLexer_end_588] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_end_588] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_end_589] = "OcamlLexer.end ::= `e`n`d";
		artLabelStrings[ART_L_OcamlLexer_end_589] = "";
		lhsL[ART_L_OcamlLexer_end_589] = ART_L_OcamlLexer_end;
		popD[ART_L_OcamlLexer_end_589] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_end_590] = "OcamlLexer.end ::= `e. `n`d";
		artLabelStrings[ART_L_OcamlLexer_end_590] = "";
		lhsL[ART_L_OcamlLexer_end_590] = ART_L_OcamlLexer_end;
		artKindOfs[ART_L_OcamlLexer_end_590] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_end_590] = true;
		popD[ART_L_OcamlLexer_end_590] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_end_591] = "OcamlLexer.end ::= `e`n`d";
		artLabelStrings[ART_L_OcamlLexer_end_591] = "";
		lhsL[ART_L_OcamlLexer_end_591] = ART_L_OcamlLexer_end;
		popD[ART_L_OcamlLexer_end_591] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_end_592] = "OcamlLexer.end ::= `e`n. `d";
		artLabelStrings[ART_L_OcamlLexer_end_592] = "";
		lhsL[ART_L_OcamlLexer_end_592] = ART_L_OcamlLexer_end;
		artKindOfs[ART_L_OcamlLexer_end_592] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_end_592] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_end_593] = "OcamlLexer.end ::= `e`n`d";
		artLabelStrings[ART_L_OcamlLexer_end_593] = "";
		lhsL[ART_L_OcamlLexer_end_593] = ART_L_OcamlLexer_end;
		popD[ART_L_OcamlLexer_end_593] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_end_594] = "OcamlLexer.end ::= `e`n`d. ";
		artLabelStrings[ART_L_OcamlLexer_end_594] = "";
		lhsL[ART_L_OcamlLexer_end_594] = ART_L_OcamlLexer_end;
		artKindOfs[ART_L_OcamlLexer_end_594] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_end_594] = true;
		eoR_pL[ART_L_OcamlLexer_end_594] = true;
		popD[ART_L_OcamlLexer_end_594] = true;
	}

	public void artTableInitialiser_136() {
		artLabelInternalStrings[ART_L_OcamlLexer_equal] = "OcamlLexer.equal ";
		artLabelStrings[ART_L_OcamlLexer_equal] = "equal";
		artKindOfs[ART_L_OcamlLexer_equal] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_equal_1259] = "OcamlLexer.equal ::= . `=";
		artLabelStrings[ART_L_OcamlLexer_equal_1259] = "";
		lhsL[ART_L_OcamlLexer_equal_1259] = ART_L_OcamlLexer_equal;
		artKindOfs[ART_L_OcamlLexer_equal_1259] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_equal_1259] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_equal_1260] = "OcamlLexer.equal ::= `=";
		artLabelStrings[ART_L_OcamlLexer_equal_1260] = "";
		lhsL[ART_L_OcamlLexer_equal_1260] = ART_L_OcamlLexer_equal;
		popD[ART_L_OcamlLexer_equal_1260] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_equal_1261] = "OcamlLexer.equal ::= `=. ";
		artLabelStrings[ART_L_OcamlLexer_equal_1261] = "";
		lhsL[ART_L_OcamlLexer_equal_1261] = ART_L_OcamlLexer_equal;
		artKindOfs[ART_L_OcamlLexer_equal_1261] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_equal_1261] = true;
		eoR_pL[ART_L_OcamlLexer_equal_1261] = true;
		popD[ART_L_OcamlLexer_equal_1261] = true;
	}

	public void artTableInitialiser_137() {
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence] = "OcamlLexer.escape_sequence ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence] = "escape_sequence";
		artKindOfs[ART_L_OcamlLexer_escape_sequence] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4609] = "OcamlLexer.escape_sequence ::= . `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4609] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4609] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4609] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4610] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4610] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4610] = ART_L_OcamlLexer_escape_sequence;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4611] = "OcamlLexer.escape_sequence ::= `\\\\\\\\. ( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4611] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4611] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4611] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_escape_sequence_4611] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4613] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4613] = "";
		lhsL[ART_A_OcamlLexer_escape_sequence_4613] = ART_L_OcamlLexer_escape_sequence;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4615] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( . `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4615] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4615] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4615] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4615] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4616] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4616] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4616] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4616] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4617] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\. | `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4617] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4617] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4617] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4617] = ART_L_OcamlLexer_escape_sequence_4646;
		aL[ART_L_OcamlLexer_escape_sequence_4617] = ART_L_OcamlLexer_escape_sequence_4645;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4617] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4617] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4617] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4619] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| . `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4619] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4619] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4619] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4619] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4620] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4620] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4620] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4620] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4621] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\". | `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4621] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4621] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4621] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4621] = ART_L_OcamlLexer_escape_sequence_4646;
		aL[ART_L_OcamlLexer_escape_sequence_4621] = ART_L_OcamlLexer_escape_sequence_4645;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4621] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4621] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4621] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4623] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| . `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4623] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4623] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4623] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4623] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4624] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4624] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4624] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4624] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4625] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'. | `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4625] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4625] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4625] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4625] = ART_L_OcamlLexer_escape_sequence_4646;
		aL[ART_L_OcamlLexer_escape_sequence_4625] = ART_L_OcamlLexer_escape_sequence_4645;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4625] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4625] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4625] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4627] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| . `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4627] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4627] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4627] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4627] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4628] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4628] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4628] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4628] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4629] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n. | `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4629] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4629] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4629] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4629] = ART_L_OcamlLexer_escape_sequence_4646;
		aL[ART_L_OcamlLexer_escape_sequence_4629] = ART_L_OcamlLexer_escape_sequence_4645;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4629] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4629] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4629] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4631] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| . `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4631] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4631] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4631] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4631] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4632] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4632] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4632] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4632] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4633] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t. | `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4633] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4633] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4633] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4633] = ART_L_OcamlLexer_escape_sequence_4646;
		aL[ART_L_OcamlLexer_escape_sequence_4633] = ART_L_OcamlLexer_escape_sequence_4645;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4633] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4633] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4633] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4635] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| . `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4635] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4635] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4635] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4635] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4636] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4636] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4636] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4636] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4637] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b. | `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4637] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4637] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4637] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4637] = ART_L_OcamlLexer_escape_sequence_4646;
		aL[ART_L_OcamlLexer_escape_sequence_4637] = ART_L_OcamlLexer_escape_sequence_4645;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4637] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4637] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4637] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4639] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| . `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4639] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4639] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4639] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4639] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4640] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4640] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4640] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4640] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4641] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r. | ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4641] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4641] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4641] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4641] = ART_L_OcamlLexer_escape_sequence_4646;
		aL[ART_L_OcamlLexer_escape_sequence_4641] = ART_L_OcamlLexer_escape_sequence_4645;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4641] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4641] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4641] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4643] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| . ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4643] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4643] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4643] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_escape_sequence_4643] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4644] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4644] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4644] = ART_L_OcamlLexer_escape_sequence;
		popD[ART_L_OcamlLexer_escape_sequence_4644] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4645] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` . ) ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4645] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4645] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4645] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_escape_sequence_4645] = ART_L_OcamlLexer_escape_sequence_4646;
		eoOPL[ART_L_OcamlLexer_escape_sequence_4645] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4645] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4645] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4646] = "OcamlLexer.escape_sequence ::= `\\\\\\\\( `\\\\\\\\| `\\\"| `\\\\'| `n| `t| `b| `r| ` ) . ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4646] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4646] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4646] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_escape_sequence_4646] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4646] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4646] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4648] = "OcamlLexer.escape_sequence ::= . `\\\\\\\\OcamlLexer.dec_digit OcamlLexer.dec_digit OcamlLexer.dec_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4648] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4648] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4648] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4649] = "OcamlLexer.escape_sequence ::= `\\\\\\\\OcamlLexer.dec_digit OcamlLexer.dec_digit OcamlLexer.dec_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4649] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4649] = ART_L_OcamlLexer_escape_sequence;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4650] = "OcamlLexer.escape_sequence ::= `\\\\\\\\. OcamlLexer.dec_digit OcamlLexer.dec_digit OcamlLexer.dec_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4650] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4650] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4650] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_escape_sequence_4650] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4652] = "OcamlLexer.escape_sequence ::= `\\\\\\\\OcamlLexer.dec_digit . OcamlLexer.dec_digit OcamlLexer.dec_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4652] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4652] = ART_L_OcamlLexer_escape_sequence;
		artSlotInstanceOfs[ART_L_OcamlLexer_escape_sequence_4652] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4652] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4654] = "OcamlLexer.escape_sequence ::= `\\\\\\\\OcamlLexer.dec_digit OcamlLexer.dec_digit . OcamlLexer.dec_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4654] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4654] = ART_L_OcamlLexer_escape_sequence;
		artSlotInstanceOfs[ART_L_OcamlLexer_escape_sequence_4654] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4654] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4656] = "OcamlLexer.escape_sequence ::= `\\\\\\\\OcamlLexer.dec_digit OcamlLexer.dec_digit OcamlLexer.dec_digit . ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4656] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4656] = ART_L_OcamlLexer_escape_sequence;
		artSlotInstanceOfs[ART_L_OcamlLexer_escape_sequence_4656] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4656] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_escape_sequence_4656] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4656] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4656] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4658] = "OcamlLexer.escape_sequence ::= . `\\\\\\\\`xOcamlLexer.hex_digit OcamlLexer.hex_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4658] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4658] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4658] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4659] = "OcamlLexer.escape_sequence ::= `\\\\\\\\`xOcamlLexer.hex_digit OcamlLexer.hex_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4659] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4659] = ART_L_OcamlLexer_escape_sequence;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4660] = "OcamlLexer.escape_sequence ::= `\\\\\\\\. `xOcamlLexer.hex_digit OcamlLexer.hex_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4660] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4660] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4660] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_escape_sequence_4660] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4661] = "OcamlLexer.escape_sequence ::= `\\\\\\\\`xOcamlLexer.hex_digit OcamlLexer.hex_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4661] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4661] = ART_L_OcamlLexer_escape_sequence;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4662] = "OcamlLexer.escape_sequence ::= `\\\\\\\\`x. OcamlLexer.hex_digit OcamlLexer.hex_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4662] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4662] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4662] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4664] = "OcamlLexer.escape_sequence ::= `\\\\\\\\`xOcamlLexer.hex_digit . OcamlLexer.hex_digit ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4664] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4664] = ART_L_OcamlLexer_escape_sequence;
		artSlotInstanceOfs[ART_L_OcamlLexer_escape_sequence_4664] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4664] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_escape_sequence_4666] = "OcamlLexer.escape_sequence ::= `\\\\\\\\`xOcamlLexer.hex_digit OcamlLexer.hex_digit . ";
		artLabelStrings[ART_L_OcamlLexer_escape_sequence_4666] = "";
		lhsL[ART_L_OcamlLexer_escape_sequence_4666] = ART_L_OcamlLexer_escape_sequence;
		artSlotInstanceOfs[ART_L_OcamlLexer_escape_sequence_4666] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_escape_sequence_4666] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_escape_sequence_4666] = true;
		eoR_pL[ART_L_OcamlLexer_escape_sequence_4666] = true;
		popD[ART_L_OcamlLexer_escape_sequence_4666] = true;
	}

	public void artTableInitialiser_138() {
		artLabelInternalStrings[ART_L_OcamlLexer_exception] = "OcamlLexer.exception ";
		artLabelStrings[ART_L_OcamlLexer_exception] = "exception";
		artKindOfs[ART_L_OcamlLexer_exception] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_597] = "OcamlLexer.exception ::= . `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_597] = "";
		lhsL[ART_L_OcamlLexer_exception_597] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_597] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_597] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_598] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_598] = "";
		lhsL[ART_L_OcamlLexer_exception_598] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_598] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_599] = "OcamlLexer.exception ::= `e. `x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_599] = "";
		lhsL[ART_L_OcamlLexer_exception_599] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_599] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_exception_599] = true;
		popD[ART_L_OcamlLexer_exception_599] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_600] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_600] = "";
		lhsL[ART_L_OcamlLexer_exception_600] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_600] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_601] = "OcamlLexer.exception ::= `e`x. `c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_601] = "";
		lhsL[ART_L_OcamlLexer_exception_601] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_601] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_601] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_602] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_602] = "";
		lhsL[ART_L_OcamlLexer_exception_602] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_602] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_603] = "OcamlLexer.exception ::= `e`x`c. `e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_603] = "";
		lhsL[ART_L_OcamlLexer_exception_603] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_603] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_603] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_604] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_604] = "";
		lhsL[ART_L_OcamlLexer_exception_604] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_604] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_605] = "OcamlLexer.exception ::= `e`x`c`e. `p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_605] = "";
		lhsL[ART_L_OcamlLexer_exception_605] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_605] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_605] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_606] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_606] = "";
		lhsL[ART_L_OcamlLexer_exception_606] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_606] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_607] = "OcamlLexer.exception ::= `e`x`c`e`p. `t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_607] = "";
		lhsL[ART_L_OcamlLexer_exception_607] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_607] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_607] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_608] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_608] = "";
		lhsL[ART_L_OcamlLexer_exception_608] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_608] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_609] = "OcamlLexer.exception ::= `e`x`c`e`p`t. `i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_609] = "";
		lhsL[ART_L_OcamlLexer_exception_609] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_609] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_609] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_610] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_610] = "";
		lhsL[ART_L_OcamlLexer_exception_610] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_610] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_611] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i. `o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_611] = "";
		lhsL[ART_L_OcamlLexer_exception_611] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_611] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_611] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_612] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_612] = "";
		lhsL[ART_L_OcamlLexer_exception_612] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_612] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_613] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o. `n";
		artLabelStrings[ART_L_OcamlLexer_exception_613] = "";
		lhsL[ART_L_OcamlLexer_exception_613] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_613] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_exception_613] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_614] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_exception_614] = "";
		lhsL[ART_L_OcamlLexer_exception_614] = ART_L_OcamlLexer_exception;
		popD[ART_L_OcamlLexer_exception_614] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_exception_615] = "OcamlLexer.exception ::= `e`x`c`e`p`t`i`o`n. ";
		artLabelStrings[ART_L_OcamlLexer_exception_615] = "";
		lhsL[ART_L_OcamlLexer_exception_615] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_exception_615] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_exception_615] = true;
		eoR_pL[ART_L_OcamlLexer_exception_615] = true;
		popD[ART_L_OcamlLexer_exception_615] = true;
	}

	public void artTableInitialiser_139() {
		artLabelInternalStrings[ART_L_OcamlLexer_external] = "OcamlLexer.external ";
		artLabelStrings[ART_L_OcamlLexer_external] = "external";
		artKindOfs[ART_L_OcamlLexer_external] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_external_618] = "OcamlLexer.external ::= . `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_618] = "";
		lhsL[ART_L_OcamlLexer_external_618] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_618] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_external_618] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_619] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_619] = "";
		lhsL[ART_L_OcamlLexer_external_619] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_619] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_620] = "OcamlLexer.external ::= `e. `x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_620] = "";
		lhsL[ART_L_OcamlLexer_external_620] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_620] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_external_620] = true;
		popD[ART_L_OcamlLexer_external_620] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_621] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_621] = "";
		lhsL[ART_L_OcamlLexer_external_621] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_621] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_622] = "OcamlLexer.external ::= `e`x. `t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_622] = "";
		lhsL[ART_L_OcamlLexer_external_622] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_622] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_external_622] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_623] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_623] = "";
		lhsL[ART_L_OcamlLexer_external_623] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_623] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_624] = "OcamlLexer.external ::= `e`x`t. `e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_624] = "";
		lhsL[ART_L_OcamlLexer_external_624] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_624] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_external_624] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_625] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_625] = "";
		lhsL[ART_L_OcamlLexer_external_625] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_625] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_626] = "OcamlLexer.external ::= `e`x`t`e. `r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_626] = "";
		lhsL[ART_L_OcamlLexer_external_626] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_626] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_external_626] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_627] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_627] = "";
		lhsL[ART_L_OcamlLexer_external_627] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_627] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_628] = "OcamlLexer.external ::= `e`x`t`e`r. `n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_628] = "";
		lhsL[ART_L_OcamlLexer_external_628] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_628] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_external_628] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_629] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_629] = "";
		lhsL[ART_L_OcamlLexer_external_629] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_629] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_630] = "OcamlLexer.external ::= `e`x`t`e`r`n. `a`l";
		artLabelStrings[ART_L_OcamlLexer_external_630] = "";
		lhsL[ART_L_OcamlLexer_external_630] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_630] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_external_630] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_631] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_631] = "";
		lhsL[ART_L_OcamlLexer_external_631] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_631] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_632] = "OcamlLexer.external ::= `e`x`t`e`r`n`a. `l";
		artLabelStrings[ART_L_OcamlLexer_external_632] = "";
		lhsL[ART_L_OcamlLexer_external_632] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_632] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_external_632] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_633] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l";
		artLabelStrings[ART_L_OcamlLexer_external_633] = "";
		lhsL[ART_L_OcamlLexer_external_633] = ART_L_OcamlLexer_external;
		popD[ART_L_OcamlLexer_external_633] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_external_634] = "OcamlLexer.external ::= `e`x`t`e`r`n`a`l. ";
		artLabelStrings[ART_L_OcamlLexer_external_634] = "";
		lhsL[ART_L_OcamlLexer_external_634] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_external_634] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_external_634] = true;
		eoR_pL[ART_L_OcamlLexer_external_634] = true;
		popD[ART_L_OcamlLexer_external_634] = true;
	}

	public void artTableInitialiser_140() {
		artLabelInternalStrings[ART_L_OcamlLexer_false] = "OcamlLexer.false ";
		artLabelStrings[ART_L_OcamlLexer_false] = "false";
		artKindOfs[ART_L_OcamlLexer_false] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_false_637] = "OcamlLexer.false ::= . `f`a`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_637] = "";
		lhsL[ART_L_OcamlLexer_false_637] = ART_L_OcamlLexer_false;
		artKindOfs[ART_L_OcamlLexer_false_637] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_false_637] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_638] = "OcamlLexer.false ::= `f`a`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_638] = "";
		lhsL[ART_L_OcamlLexer_false_638] = ART_L_OcamlLexer_false;
		popD[ART_L_OcamlLexer_false_638] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_639] = "OcamlLexer.false ::= `f. `a`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_639] = "";
		lhsL[ART_L_OcamlLexer_false_639] = ART_L_OcamlLexer_false;
		artKindOfs[ART_L_OcamlLexer_false_639] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_false_639] = true;
		popD[ART_L_OcamlLexer_false_639] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_640] = "OcamlLexer.false ::= `f`a`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_640] = "";
		lhsL[ART_L_OcamlLexer_false_640] = ART_L_OcamlLexer_false;
		popD[ART_L_OcamlLexer_false_640] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_641] = "OcamlLexer.false ::= `f`a. `l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_641] = "";
		lhsL[ART_L_OcamlLexer_false_641] = ART_L_OcamlLexer_false;
		artKindOfs[ART_L_OcamlLexer_false_641] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_false_641] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_642] = "OcamlLexer.false ::= `f`a`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_642] = "";
		lhsL[ART_L_OcamlLexer_false_642] = ART_L_OcamlLexer_false;
		popD[ART_L_OcamlLexer_false_642] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_643] = "OcamlLexer.false ::= `f`a`l. `s`e";
		artLabelStrings[ART_L_OcamlLexer_false_643] = "";
		lhsL[ART_L_OcamlLexer_false_643] = ART_L_OcamlLexer_false;
		artKindOfs[ART_L_OcamlLexer_false_643] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_false_643] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_644] = "OcamlLexer.false ::= `f`a`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_644] = "";
		lhsL[ART_L_OcamlLexer_false_644] = ART_L_OcamlLexer_false;
		popD[ART_L_OcamlLexer_false_644] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_645] = "OcamlLexer.false ::= `f`a`l`s. `e";
		artLabelStrings[ART_L_OcamlLexer_false_645] = "";
		lhsL[ART_L_OcamlLexer_false_645] = ART_L_OcamlLexer_false;
		artKindOfs[ART_L_OcamlLexer_false_645] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_false_645] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_646] = "OcamlLexer.false ::= `f`a`l`s`e";
		artLabelStrings[ART_L_OcamlLexer_false_646] = "";
		lhsL[ART_L_OcamlLexer_false_646] = ART_L_OcamlLexer_false;
		popD[ART_L_OcamlLexer_false_646] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_false_647] = "OcamlLexer.false ::= `f`a`l`s`e. ";
		artLabelStrings[ART_L_OcamlLexer_false_647] = "";
		lhsL[ART_L_OcamlLexer_false_647] = ART_L_OcamlLexer_false;
		artKindOfs[ART_L_OcamlLexer_false_647] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_false_647] = true;
		eoR_pL[ART_L_OcamlLexer_false_647] = true;
		popD[ART_L_OcamlLexer_false_647] = true;
	}

	public void artTableInitialiser_141() {
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal] = "OcamlLexer.float_literal ";
		artLabelStrings[ART_L_OcamlLexer_float_literal] = "float_literal";
		artKindOfs[ART_L_OcamlLexer_float_literal] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4117] = "OcamlLexer.float_literal ::= . ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4117] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4117] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4117] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4121] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4121] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4121] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4121] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4122] = "OcamlLexer.float_literal ::= ( `-. )? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4122] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4122] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4122] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4122] = ART_L_OcamlLexer_float_literal_4123;
		eoOPL[ART_L_OcamlLexer_float_literal_4122] = true;
		popD[ART_L_OcamlLexer_float_literal_4122] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4123] = "OcamlLexer.float_literal ::= ( `-)? . OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4123] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4123] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4123] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4125] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit . ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4125] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4125] = ART_L_OcamlLexer_float_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_float_literal_4125] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_float_literal_4125] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_float_literal_4126] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4127] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4127] = "";
		lhsL[ART_A_OcamlLexer_float_literal_4127] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4129] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( . OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4129] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4129] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4129] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4131] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit . | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4131] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4131] = ART_L_OcamlLexer_float_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_float_literal_4131] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_float_literal_4131] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4131] = ART_L_OcamlLexer_float_literal_4135;
		aL[ART_L_OcamlLexer_float_literal_4131] = ART_L_OcamlLexer_float_literal_4135;
		popD[ART_L_OcamlLexer_float_literal_4131] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4133] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | . `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4133] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4133] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4133] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4133] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4134] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4134] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4134] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4134] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4135] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_. )* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4135] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4135] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4135] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4135] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4136] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* . ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4136] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4136] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4136] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4140] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4140] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4140] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4141] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.. ( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4141] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4141] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4141] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_float_literal_4142] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4143] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4143] = "";
		lhsL[ART_A_OcamlLexer_float_literal_4143] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4145] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( . OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4145] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4145] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4145] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4147] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit . | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4147] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4147] = ART_L_OcamlLexer_float_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_float_literal_4147] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_float_literal_4147] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4147] = ART_L_OcamlLexer_float_literal_4151;
		aL[ART_L_OcamlLexer_float_literal_4147] = ART_L_OcamlLexer_float_literal_4151;
		popD[ART_L_OcamlLexer_float_literal_4147] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4149] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | . `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4149] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4149] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4149] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4149] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4150] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4150] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4150] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4150] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4151] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_. )* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4151] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4151] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4151] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4151] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4152] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* . )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4152] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4152] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4152] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4152] = ART_L_OcamlLexer_float_literal_4153;
		eoOPL[ART_L_OcamlLexer_float_literal_4152] = true;
		popD[ART_L_OcamlLexer_float_literal_4152] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4153] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? . ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4153] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4153] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4153] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4158] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4158] = "";
		lhsL[ART_A_OcamlLexer_float_literal_4158] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4160] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( . `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4160] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4160] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4160] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4160] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4161] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4161] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4161] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4161] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4162] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e. | `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4162] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4162] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4162] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4162] = ART_L_OcamlLexer_float_literal_4167;
		aL[ART_L_OcamlLexer_float_literal_4162] = ART_L_OcamlLexer_float_literal_4166;
		eoOPL[ART_L_OcamlLexer_float_literal_4162] = true;
		popD[ART_L_OcamlLexer_float_literal_4162] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4164] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| . `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4164] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4164] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4164] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4164] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4165] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4165] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4165] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4165] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4166] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E. ) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4166] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4166] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4166] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4166] = ART_L_OcamlLexer_float_literal_4167;
		eoOPL[ART_L_OcamlLexer_float_literal_4166] = true;
		popD[ART_L_OcamlLexer_float_literal_4166] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4167] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) . ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4167] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4167] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4167] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4169] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4169] = "";
		lhsL[ART_A_OcamlLexer_float_literal_4169] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4171] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( . `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4171] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4171] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4171] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4171] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4172] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4172] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4172] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4172] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4173] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+. | `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4173] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4173] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4173] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4173] = ART_L_OcamlLexer_float_literal_4178;
		aL[ART_L_OcamlLexer_float_literal_4173] = ART_L_OcamlLexer_float_literal_4177;
		eoOPL[ART_L_OcamlLexer_float_literal_4173] = true;
		popD[ART_L_OcamlLexer_float_literal_4173] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4175] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| . `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4175] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4175] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4175] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4175] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4176] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4176] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4176] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4176] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4177] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-. )? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4177] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4177] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4177] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4177] = ART_L_OcamlLexer_float_literal_4178;
		eoOPL[ART_L_OcamlLexer_float_literal_4177] = true;
		popD[ART_L_OcamlLexer_float_literal_4177] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4178] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? . OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4178] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4178] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4178] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4180] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit . ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4180] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4180] = ART_L_OcamlLexer_float_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_float_literal_4180] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_float_literal_4180] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_float_literal_4181] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4182] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4182] = "";
		lhsL[ART_A_OcamlLexer_float_literal_4182] = ART_L_OcamlLexer_float_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4184] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( . OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4184] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4184] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4184] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4186] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit . | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4186] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4186] = ART_L_OcamlLexer_float_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_float_literal_4186] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_float_literal_4186] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4186] = ART_L_OcamlLexer_float_literal_4190;
		aL[ART_L_OcamlLexer_float_literal_4186] = ART_L_OcamlLexer_float_literal_4190;
		popD[ART_L_OcamlLexer_float_literal_4186] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4188] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | . `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4188] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4188] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4188] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4188] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4189] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4189] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4189] = ART_L_OcamlLexer_float_literal;
		popD[ART_L_OcamlLexer_float_literal_4189] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4190] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_. )* )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4190] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4190] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4190] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_float_literal_4190] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4191] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* . )? ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4191] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4191] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4191] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_float_literal_4191] = ART_L_OcamlLexer_float_literal_4192;
		eoOPL[ART_L_OcamlLexer_float_literal_4191] = true;
		eoR_pL[ART_L_OcamlLexer_float_literal_4191] = true;
		popD[ART_L_OcamlLexer_float_literal_4191] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_float_literal_4192] = "OcamlLexer.float_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ( `.( OcamlLexer.dec_digit | `_)* )? ( ( `e| `E) ( `+| `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* )? . ";
		artLabelStrings[ART_L_OcamlLexer_float_literal_4192] = "";
		lhsL[ART_L_OcamlLexer_float_literal_4192] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_float_literal_4192] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_float_literal_4192] = true;
		eoR_pL[ART_L_OcamlLexer_float_literal_4192] = true;
		popD[ART_L_OcamlLexer_float_literal_4192] = true;
	}

	public void artTableInitialiser_142() {
		artLabelInternalStrings[ART_L_OcamlLexer_for] = "OcamlLexer.for ";
		artLabelStrings[ART_L_OcamlLexer_for] = "for";
		artKindOfs[ART_L_OcamlLexer_for] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_for_650] = "OcamlLexer.for ::= . `f`o`r";
		artLabelStrings[ART_L_OcamlLexer_for_650] = "";
		lhsL[ART_L_OcamlLexer_for_650] = ART_L_OcamlLexer_for;
		artKindOfs[ART_L_OcamlLexer_for_650] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_for_650] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_for_651] = "OcamlLexer.for ::= `f`o`r";
		artLabelStrings[ART_L_OcamlLexer_for_651] = "";
		lhsL[ART_L_OcamlLexer_for_651] = ART_L_OcamlLexer_for;
		popD[ART_L_OcamlLexer_for_651] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_for_652] = "OcamlLexer.for ::= `f. `o`r";
		artLabelStrings[ART_L_OcamlLexer_for_652] = "";
		lhsL[ART_L_OcamlLexer_for_652] = ART_L_OcamlLexer_for;
		artKindOfs[ART_L_OcamlLexer_for_652] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_for_652] = true;
		popD[ART_L_OcamlLexer_for_652] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_for_653] = "OcamlLexer.for ::= `f`o`r";
		artLabelStrings[ART_L_OcamlLexer_for_653] = "";
		lhsL[ART_L_OcamlLexer_for_653] = ART_L_OcamlLexer_for;
		popD[ART_L_OcamlLexer_for_653] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_for_654] = "OcamlLexer.for ::= `f`o. `r";
		artLabelStrings[ART_L_OcamlLexer_for_654] = "";
		lhsL[ART_L_OcamlLexer_for_654] = ART_L_OcamlLexer_for;
		artKindOfs[ART_L_OcamlLexer_for_654] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_for_654] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_for_655] = "OcamlLexer.for ::= `f`o`r";
		artLabelStrings[ART_L_OcamlLexer_for_655] = "";
		lhsL[ART_L_OcamlLexer_for_655] = ART_L_OcamlLexer_for;
		popD[ART_L_OcamlLexer_for_655] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_for_656] = "OcamlLexer.for ::= `f`o`r. ";
		artLabelStrings[ART_L_OcamlLexer_for_656] = "";
		lhsL[ART_L_OcamlLexer_for_656] = ART_L_OcamlLexer_for;
		artKindOfs[ART_L_OcamlLexer_for_656] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_for_656] = true;
		eoR_pL[ART_L_OcamlLexer_for_656] = true;
		popD[ART_L_OcamlLexer_for_656] = true;
	}

	public void artTableInitialiser_143() {
		artLabelInternalStrings[ART_L_OcamlLexer_fun] = "OcamlLexer.fun ";
		artLabelStrings[ART_L_OcamlLexer_fun] = "fun";
		artKindOfs[ART_L_OcamlLexer_fun] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_fun_659] = "OcamlLexer.fun ::= . `f`u`n";
		artLabelStrings[ART_L_OcamlLexer_fun_659] = "";
		lhsL[ART_L_OcamlLexer_fun_659] = ART_L_OcamlLexer_fun;
		artKindOfs[ART_L_OcamlLexer_fun_659] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_fun_659] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_fun_660] = "OcamlLexer.fun ::= `f`u`n";
		artLabelStrings[ART_L_OcamlLexer_fun_660] = "";
		lhsL[ART_L_OcamlLexer_fun_660] = ART_L_OcamlLexer_fun;
		popD[ART_L_OcamlLexer_fun_660] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_fun_661] = "OcamlLexer.fun ::= `f. `u`n";
		artLabelStrings[ART_L_OcamlLexer_fun_661] = "";
		lhsL[ART_L_OcamlLexer_fun_661] = ART_L_OcamlLexer_fun;
		artKindOfs[ART_L_OcamlLexer_fun_661] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_fun_661] = true;
		popD[ART_L_OcamlLexer_fun_661] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_fun_662] = "OcamlLexer.fun ::= `f`u`n";
		artLabelStrings[ART_L_OcamlLexer_fun_662] = "";
		lhsL[ART_L_OcamlLexer_fun_662] = ART_L_OcamlLexer_fun;
		popD[ART_L_OcamlLexer_fun_662] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_fun_663] = "OcamlLexer.fun ::= `f`u. `n";
		artLabelStrings[ART_L_OcamlLexer_fun_663] = "";
		lhsL[ART_L_OcamlLexer_fun_663] = ART_L_OcamlLexer_fun;
		artKindOfs[ART_L_OcamlLexer_fun_663] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_fun_663] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_fun_664] = "OcamlLexer.fun ::= `f`u`n";
		artLabelStrings[ART_L_OcamlLexer_fun_664] = "";
		lhsL[ART_L_OcamlLexer_fun_664] = ART_L_OcamlLexer_fun;
		popD[ART_L_OcamlLexer_fun_664] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_fun_665] = "OcamlLexer.fun ::= `f`u`n. ";
		artLabelStrings[ART_L_OcamlLexer_fun_665] = "";
		lhsL[ART_L_OcamlLexer_fun_665] = ART_L_OcamlLexer_fun;
		artKindOfs[ART_L_OcamlLexer_fun_665] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_fun_665] = true;
		eoR_pL[ART_L_OcamlLexer_fun_665] = true;
		popD[ART_L_OcamlLexer_fun_665] = true;
	}

	public void artTableInitialiser_144() {
		artLabelInternalStrings[ART_L_OcamlLexer_function] = "OcamlLexer.function ";
		artLabelStrings[ART_L_OcamlLexer_function] = "function";
		artKindOfs[ART_L_OcamlLexer_function] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_function_668] = "OcamlLexer.function ::= . `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_668] = "";
		lhsL[ART_L_OcamlLexer_function_668] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_668] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_function_668] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_669] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_669] = "";
		lhsL[ART_L_OcamlLexer_function_669] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_669] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_670] = "OcamlLexer.function ::= `f. `u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_670] = "";
		lhsL[ART_L_OcamlLexer_function_670] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_670] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_function_670] = true;
		popD[ART_L_OcamlLexer_function_670] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_671] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_671] = "";
		lhsL[ART_L_OcamlLexer_function_671] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_671] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_672] = "OcamlLexer.function ::= `f`u. `n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_672] = "";
		lhsL[ART_L_OcamlLexer_function_672] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_672] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_function_672] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_673] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_673] = "";
		lhsL[ART_L_OcamlLexer_function_673] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_673] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_674] = "OcamlLexer.function ::= `f`u`n. `c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_674] = "";
		lhsL[ART_L_OcamlLexer_function_674] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_674] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_function_674] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_675] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_675] = "";
		lhsL[ART_L_OcamlLexer_function_675] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_675] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_676] = "OcamlLexer.function ::= `f`u`n`c. `t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_676] = "";
		lhsL[ART_L_OcamlLexer_function_676] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_676] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_function_676] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_677] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_677] = "";
		lhsL[ART_L_OcamlLexer_function_677] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_677] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_678] = "OcamlLexer.function ::= `f`u`n`c`t. `i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_678] = "";
		lhsL[ART_L_OcamlLexer_function_678] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_678] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_function_678] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_679] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_679] = "";
		lhsL[ART_L_OcamlLexer_function_679] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_679] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_680] = "OcamlLexer.function ::= `f`u`n`c`t`i. `o`n";
		artLabelStrings[ART_L_OcamlLexer_function_680] = "";
		lhsL[ART_L_OcamlLexer_function_680] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_680] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_function_680] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_681] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_681] = "";
		lhsL[ART_L_OcamlLexer_function_681] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_681] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_682] = "OcamlLexer.function ::= `f`u`n`c`t`i`o. `n";
		artLabelStrings[ART_L_OcamlLexer_function_682] = "";
		lhsL[ART_L_OcamlLexer_function_682] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_682] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_function_682] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_683] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n";
		artLabelStrings[ART_L_OcamlLexer_function_683] = "";
		lhsL[ART_L_OcamlLexer_function_683] = ART_L_OcamlLexer_function;
		popD[ART_L_OcamlLexer_function_683] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_function_684] = "OcamlLexer.function ::= `f`u`n`c`t`i`o`n. ";
		artLabelStrings[ART_L_OcamlLexer_function_684] = "";
		lhsL[ART_L_OcamlLexer_function_684] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_function_684] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_function_684] = true;
		eoR_pL[ART_L_OcamlLexer_function_684] = true;
		popD[ART_L_OcamlLexer_function_684] = true;
	}

	public void artTableInitialiser_145() {
		artLabelInternalStrings[ART_L_OcamlLexer_functor] = "OcamlLexer.functor ";
		artLabelStrings[ART_L_OcamlLexer_functor] = "functor";
		artKindOfs[ART_L_OcamlLexer_functor] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_687] = "OcamlLexer.functor ::= . `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_687] = "";
		lhsL[ART_L_OcamlLexer_functor_687] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_687] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_functor_687] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_688] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_688] = "";
		lhsL[ART_L_OcamlLexer_functor_688] = ART_L_OcamlLexer_functor;
		popD[ART_L_OcamlLexer_functor_688] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_689] = "OcamlLexer.functor ::= `f. `u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_689] = "";
		lhsL[ART_L_OcamlLexer_functor_689] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_689] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_functor_689] = true;
		popD[ART_L_OcamlLexer_functor_689] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_690] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_690] = "";
		lhsL[ART_L_OcamlLexer_functor_690] = ART_L_OcamlLexer_functor;
		popD[ART_L_OcamlLexer_functor_690] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_691] = "OcamlLexer.functor ::= `f`u. `n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_691] = "";
		lhsL[ART_L_OcamlLexer_functor_691] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_691] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_functor_691] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_692] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_692] = "";
		lhsL[ART_L_OcamlLexer_functor_692] = ART_L_OcamlLexer_functor;
		popD[ART_L_OcamlLexer_functor_692] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_693] = "OcamlLexer.functor ::= `f`u`n. `c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_693] = "";
		lhsL[ART_L_OcamlLexer_functor_693] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_693] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_functor_693] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_694] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_694] = "";
		lhsL[ART_L_OcamlLexer_functor_694] = ART_L_OcamlLexer_functor;
		popD[ART_L_OcamlLexer_functor_694] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_695] = "OcamlLexer.functor ::= `f`u`n`c. `t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_695] = "";
		lhsL[ART_L_OcamlLexer_functor_695] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_695] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_functor_695] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_696] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_696] = "";
		lhsL[ART_L_OcamlLexer_functor_696] = ART_L_OcamlLexer_functor;
		popD[ART_L_OcamlLexer_functor_696] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_697] = "OcamlLexer.functor ::= `f`u`n`c`t. `o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_697] = "";
		lhsL[ART_L_OcamlLexer_functor_697] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_697] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_functor_697] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_698] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_698] = "";
		lhsL[ART_L_OcamlLexer_functor_698] = ART_L_OcamlLexer_functor;
		popD[ART_L_OcamlLexer_functor_698] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_699] = "OcamlLexer.functor ::= `f`u`n`c`t`o. `r";
		artLabelStrings[ART_L_OcamlLexer_functor_699] = "";
		lhsL[ART_L_OcamlLexer_functor_699] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_699] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_functor_699] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_700] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r";
		artLabelStrings[ART_L_OcamlLexer_functor_700] = "";
		lhsL[ART_L_OcamlLexer_functor_700] = ART_L_OcamlLexer_functor;
		popD[ART_L_OcamlLexer_functor_700] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_functor_701] = "OcamlLexer.functor ::= `f`u`n`c`t`o`r. ";
		artLabelStrings[ART_L_OcamlLexer_functor_701] = "";
		lhsL[ART_L_OcamlLexer_functor_701] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_functor_701] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_functor_701] = true;
		eoR_pL[ART_L_OcamlLexer_functor_701] = true;
		popD[ART_L_OcamlLexer_functor_701] = true;
	}

	public void artTableInitialiser_146() {
		artLabelInternalStrings[ART_L_OcamlLexer_greater] = "OcamlLexer.greater ";
		artLabelStrings[ART_L_OcamlLexer_greater] = "greater";
		artKindOfs[ART_L_OcamlLexer_greater] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_greater_1264] = "OcamlLexer.greater ::= . `>";
		artLabelStrings[ART_L_OcamlLexer_greater_1264] = "";
		lhsL[ART_L_OcamlLexer_greater_1264] = ART_L_OcamlLexer_greater;
		artKindOfs[ART_L_OcamlLexer_greater_1264] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_greater_1264] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greater_1265] = "OcamlLexer.greater ::= `>";
		artLabelStrings[ART_L_OcamlLexer_greater_1265] = "";
		lhsL[ART_L_OcamlLexer_greater_1265] = ART_L_OcamlLexer_greater;
		popD[ART_L_OcamlLexer_greater_1265] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greater_1266] = "OcamlLexer.greater ::= `>. ";
		artLabelStrings[ART_L_OcamlLexer_greater_1266] = "";
		lhsL[ART_L_OcamlLexer_greater_1266] = ART_L_OcamlLexer_greater;
		artKindOfs[ART_L_OcamlLexer_greater_1266] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_greater_1266] = true;
		eoR_pL[ART_L_OcamlLexer_greater_1266] = true;
		popD[ART_L_OcamlLexer_greater_1266] = true;
	}

	public void artTableInitialiser_147() {
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbrace] = "OcamlLexer.greaterrbrace ";
		artLabelStrings[ART_L_OcamlLexer_greaterrbrace] = "greaterrbrace";
		artKindOfs[ART_L_OcamlLexer_greaterrbrace] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbrace_1276] = "OcamlLexer.greaterrbrace ::= . `>`}";
		artLabelStrings[ART_L_OcamlLexer_greaterrbrace_1276] = "";
		lhsL[ART_L_OcamlLexer_greaterrbrace_1276] = ART_L_OcamlLexer_greaterrbrace;
		artKindOfs[ART_L_OcamlLexer_greaterrbrace_1276] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_greaterrbrace_1276] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbrace_1277] = "OcamlLexer.greaterrbrace ::= `>`}";
		artLabelStrings[ART_L_OcamlLexer_greaterrbrace_1277] = "";
		lhsL[ART_L_OcamlLexer_greaterrbrace_1277] = ART_L_OcamlLexer_greaterrbrace;
		popD[ART_L_OcamlLexer_greaterrbrace_1277] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbrace_1278] = "OcamlLexer.greaterrbrace ::= `>. `}";
		artLabelStrings[ART_L_OcamlLexer_greaterrbrace_1278] = "";
		lhsL[ART_L_OcamlLexer_greaterrbrace_1278] = ART_L_OcamlLexer_greaterrbrace;
		artKindOfs[ART_L_OcamlLexer_greaterrbrace_1278] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_greaterrbrace_1278] = true;
		popD[ART_L_OcamlLexer_greaterrbrace_1278] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbrace_1279] = "OcamlLexer.greaterrbrace ::= `>`}";
		artLabelStrings[ART_L_OcamlLexer_greaterrbrace_1279] = "";
		lhsL[ART_L_OcamlLexer_greaterrbrace_1279] = ART_L_OcamlLexer_greaterrbrace;
		popD[ART_L_OcamlLexer_greaterrbrace_1279] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbrace_1280] = "OcamlLexer.greaterrbrace ::= `>`}. ";
		artLabelStrings[ART_L_OcamlLexer_greaterrbrace_1280] = "";
		lhsL[ART_L_OcamlLexer_greaterrbrace_1280] = ART_L_OcamlLexer_greaterrbrace;
		artKindOfs[ART_L_OcamlLexer_greaterrbrace_1280] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_greaterrbrace_1280] = true;
		eoR_pL[ART_L_OcamlLexer_greaterrbrace_1280] = true;
		popD[ART_L_OcamlLexer_greaterrbrace_1280] = true;
	}

	public void artTableInitialiser_148() {
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbracket] = "OcamlLexer.greaterrbracket ";
		artLabelStrings[ART_L_OcamlLexer_greaterrbracket] = "greaterrbracket";
		artKindOfs[ART_L_OcamlLexer_greaterrbracket] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbracket_1269] = "OcamlLexer.greaterrbracket ::= . `>`]";
		artLabelStrings[ART_L_OcamlLexer_greaterrbracket_1269] = "";
		lhsL[ART_L_OcamlLexer_greaterrbracket_1269] = ART_L_OcamlLexer_greaterrbracket;
		artKindOfs[ART_L_OcamlLexer_greaterrbracket_1269] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_greaterrbracket_1269] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbracket_1270] = "OcamlLexer.greaterrbracket ::= `>`]";
		artLabelStrings[ART_L_OcamlLexer_greaterrbracket_1270] = "";
		lhsL[ART_L_OcamlLexer_greaterrbracket_1270] = ART_L_OcamlLexer_greaterrbracket;
		popD[ART_L_OcamlLexer_greaterrbracket_1270] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbracket_1271] = "OcamlLexer.greaterrbracket ::= `>. `]";
		artLabelStrings[ART_L_OcamlLexer_greaterrbracket_1271] = "";
		lhsL[ART_L_OcamlLexer_greaterrbracket_1271] = ART_L_OcamlLexer_greaterrbracket;
		artKindOfs[ART_L_OcamlLexer_greaterrbracket_1271] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_greaterrbracket_1271] = true;
		popD[ART_L_OcamlLexer_greaterrbracket_1271] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbracket_1272] = "OcamlLexer.greaterrbracket ::= `>`]";
		artLabelStrings[ART_L_OcamlLexer_greaterrbracket_1272] = "";
		lhsL[ART_L_OcamlLexer_greaterrbracket_1272] = ART_L_OcamlLexer_greaterrbracket;
		popD[ART_L_OcamlLexer_greaterrbracket_1272] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_greaterrbracket_1273] = "OcamlLexer.greaterrbracket ::= `>`]. ";
		artLabelStrings[ART_L_OcamlLexer_greaterrbracket_1273] = "";
		lhsL[ART_L_OcamlLexer_greaterrbracket_1273] = ART_L_OcamlLexer_greaterrbracket;
		artKindOfs[ART_L_OcamlLexer_greaterrbracket_1273] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_greaterrbracket_1273] = true;
		eoR_pL[ART_L_OcamlLexer_greaterrbracket_1273] = true;
		popD[ART_L_OcamlLexer_greaterrbracket_1273] = true;
	}

	public void artTableInitialiser_149() {
		artLabelInternalStrings[ART_L_OcamlLexer_hash] = "OcamlLexer.hash ";
		artLabelStrings[ART_L_OcamlLexer_hash] = "hash";
		artKindOfs[ART_L_OcamlLexer_hash] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_hash_1131] = "OcamlLexer.hash ::= . `#";
		artLabelStrings[ART_L_OcamlLexer_hash_1131] = "";
		lhsL[ART_L_OcamlLexer_hash_1131] = ART_L_OcamlLexer_hash;
		artKindOfs[ART_L_OcamlLexer_hash_1131] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hash_1131] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hash_1132] = "OcamlLexer.hash ::= `#";
		artLabelStrings[ART_L_OcamlLexer_hash_1132] = "";
		lhsL[ART_L_OcamlLexer_hash_1132] = ART_L_OcamlLexer_hash;
		popD[ART_L_OcamlLexer_hash_1132] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hash_1133] = "OcamlLexer.hash ::= `#. ";
		artLabelStrings[ART_L_OcamlLexer_hash_1133] = "";
		lhsL[ART_L_OcamlLexer_hash_1133] = ART_L_OcamlLexer_hash;
		artKindOfs[ART_L_OcamlLexer_hash_1133] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hash_1133] = true;
		eoR_pL[ART_L_OcamlLexer_hash_1133] = true;
		popD[ART_L_OcamlLexer_hash_1133] = true;
	}

	public void artTableInitialiser_150() {
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit] = "OcamlLexer.hex_digit ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit] = "hex_digit";
		artKindOfs[ART_L_OcamlLexer_hex_digit] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4028] = "OcamlLexer.hex_digit ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4028] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4028] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4028] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4028] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4029] = "OcamlLexer.hex_digit ::= `0";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4029] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4029] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4029] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4030] = "OcamlLexer.hex_digit ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4030] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4030] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4030] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4030] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4030] = true;
		popD[ART_L_OcamlLexer_hex_digit_4030] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4032] = "OcamlLexer.hex_digit ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4032] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4032] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4032] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4032] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4033] = "OcamlLexer.hex_digit ::= `1";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4033] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4033] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4033] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4034] = "OcamlLexer.hex_digit ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4034] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4034] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4034] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4034] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4034] = true;
		popD[ART_L_OcamlLexer_hex_digit_4034] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4036] = "OcamlLexer.hex_digit ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4036] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4036] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4036] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4036] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4037] = "OcamlLexer.hex_digit ::= `2";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4037] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4037] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4037] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4038] = "OcamlLexer.hex_digit ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4038] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4038] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4038] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4038] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4038] = true;
		popD[ART_L_OcamlLexer_hex_digit_4038] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4040] = "OcamlLexer.hex_digit ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4040] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4040] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4040] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4040] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4041] = "OcamlLexer.hex_digit ::= `3";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4041] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4041] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4041] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4042] = "OcamlLexer.hex_digit ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4042] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4042] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4042] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4042] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4042] = true;
		popD[ART_L_OcamlLexer_hex_digit_4042] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4044] = "OcamlLexer.hex_digit ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4044] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4044] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4044] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4044] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4045] = "OcamlLexer.hex_digit ::= `4";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4045] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4045] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4045] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4046] = "OcamlLexer.hex_digit ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4046] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4046] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4046] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4046] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4046] = true;
		popD[ART_L_OcamlLexer_hex_digit_4046] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4048] = "OcamlLexer.hex_digit ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4048] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4048] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4048] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4048] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4049] = "OcamlLexer.hex_digit ::= `5";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4049] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4049] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4049] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4050] = "OcamlLexer.hex_digit ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4050] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4050] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4050] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4050] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4050] = true;
		popD[ART_L_OcamlLexer_hex_digit_4050] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4052] = "OcamlLexer.hex_digit ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4052] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4052] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4052] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4052] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4053] = "OcamlLexer.hex_digit ::= `6";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4053] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4053] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4053] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4054] = "OcamlLexer.hex_digit ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4054] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4054] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4054] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4054] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4054] = true;
		popD[ART_L_OcamlLexer_hex_digit_4054] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4056] = "OcamlLexer.hex_digit ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4056] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4056] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4056] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4056] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4057] = "OcamlLexer.hex_digit ::= `7";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4057] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4057] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4057] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4058] = "OcamlLexer.hex_digit ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4058] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4058] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4058] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4058] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4058] = true;
		popD[ART_L_OcamlLexer_hex_digit_4058] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4060] = "OcamlLexer.hex_digit ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4060] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4060] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4060] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4060] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4061] = "OcamlLexer.hex_digit ::= `8";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4061] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4061] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4061] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4062] = "OcamlLexer.hex_digit ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4062] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4062] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4062] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4062] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4062] = true;
		popD[ART_L_OcamlLexer_hex_digit_4062] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4064] = "OcamlLexer.hex_digit ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4064] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4064] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4064] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4064] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4065] = "OcamlLexer.hex_digit ::= `9";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4065] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4065] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4065] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4066] = "OcamlLexer.hex_digit ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4066] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4066] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4066] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4066] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4066] = true;
		popD[ART_L_OcamlLexer_hex_digit_4066] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4068] = "OcamlLexer.hex_digit ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4068] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4068] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4068] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4068] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4069] = "OcamlLexer.hex_digit ::= `A";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4069] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4069] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4069] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4070] = "OcamlLexer.hex_digit ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4070] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4070] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4070] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4070] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4070] = true;
		popD[ART_L_OcamlLexer_hex_digit_4070] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4072] = "OcamlLexer.hex_digit ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4072] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4072] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4072] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4072] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4073] = "OcamlLexer.hex_digit ::= `B";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4073] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4073] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4073] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4074] = "OcamlLexer.hex_digit ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4074] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4074] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4074] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4074] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4074] = true;
		popD[ART_L_OcamlLexer_hex_digit_4074] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4076] = "OcamlLexer.hex_digit ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4076] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4076] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4076] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4076] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4077] = "OcamlLexer.hex_digit ::= `C";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4077] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4077] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4077] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4078] = "OcamlLexer.hex_digit ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4078] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4078] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4078] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4078] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4078] = true;
		popD[ART_L_OcamlLexer_hex_digit_4078] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4080] = "OcamlLexer.hex_digit ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4080] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4080] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4080] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4080] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4081] = "OcamlLexer.hex_digit ::= `D";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4081] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4081] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4081] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4082] = "OcamlLexer.hex_digit ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4082] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4082] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4082] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4082] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4082] = true;
		popD[ART_L_OcamlLexer_hex_digit_4082] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4084] = "OcamlLexer.hex_digit ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4084] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4084] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4084] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4084] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4085] = "OcamlLexer.hex_digit ::= `E";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4085] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4085] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4085] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4086] = "OcamlLexer.hex_digit ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4086] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4086] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4086] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4086] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4086] = true;
		popD[ART_L_OcamlLexer_hex_digit_4086] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4088] = "OcamlLexer.hex_digit ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4088] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4088] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4088] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4088] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4089] = "OcamlLexer.hex_digit ::= `F";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4089] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4089] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4089] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4090] = "OcamlLexer.hex_digit ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4090] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4090] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4090] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4090] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4090] = true;
		popD[ART_L_OcamlLexer_hex_digit_4090] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4092] = "OcamlLexer.hex_digit ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4092] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4092] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4092] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4092] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4093] = "OcamlLexer.hex_digit ::= `a";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4093] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4093] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4093] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4094] = "OcamlLexer.hex_digit ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4094] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4094] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4094] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4094] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4094] = true;
		popD[ART_L_OcamlLexer_hex_digit_4094] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4096] = "OcamlLexer.hex_digit ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4096] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4096] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4096] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4096] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4097] = "OcamlLexer.hex_digit ::= `b";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4097] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4097] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4097] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4098] = "OcamlLexer.hex_digit ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4098] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4098] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4098] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4098] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4098] = true;
		popD[ART_L_OcamlLexer_hex_digit_4098] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4100] = "OcamlLexer.hex_digit ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4100] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4100] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4100] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4100] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4101] = "OcamlLexer.hex_digit ::= `c";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4101] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4101] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4101] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4102] = "OcamlLexer.hex_digit ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4102] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4102] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4102] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4102] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4102] = true;
		popD[ART_L_OcamlLexer_hex_digit_4102] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4104] = "OcamlLexer.hex_digit ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4104] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4104] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4104] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4104] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4105] = "OcamlLexer.hex_digit ::= `d";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4105] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4105] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4105] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4106] = "OcamlLexer.hex_digit ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4106] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4106] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4106] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4106] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4106] = true;
		popD[ART_L_OcamlLexer_hex_digit_4106] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4108] = "OcamlLexer.hex_digit ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4108] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4108] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4108] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4108] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4109] = "OcamlLexer.hex_digit ::= `e";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4109] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4109] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4109] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4110] = "OcamlLexer.hex_digit ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4110] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4110] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4110] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4110] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4110] = true;
		popD[ART_L_OcamlLexer_hex_digit_4110] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4112] = "OcamlLexer.hex_digit ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4112] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4112] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4112] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hex_digit_4112] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4113] = "OcamlLexer.hex_digit ::= `f";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4113] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4113] = ART_L_OcamlLexer_hex_digit;
		popD[ART_L_OcamlLexer_hex_digit_4113] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hex_digit_4114] = "OcamlLexer.hex_digit ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_hex_digit_4114] = "";
		lhsL[ART_L_OcamlLexer_hex_digit_4114] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_hex_digit_4114] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hex_digit_4114] = true;
		eoR_pL[ART_L_OcamlLexer_hex_digit_4114] = true;
		popD[ART_L_OcamlLexer_hex_digit_4114] = true;
	}

	public void artTableInitialiser_151() {
		artLabelInternalStrings[ART_L_OcamlLexer_hyphen] = "OcamlLexer.hyphen ";
		artLabelStrings[ART_L_OcamlLexer_hyphen] = "hyphen";
		artKindOfs[ART_L_OcamlLexer_hyphen] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphen_1178] = "OcamlLexer.hyphen ::= . `-";
		artLabelStrings[ART_L_OcamlLexer_hyphen_1178] = "";
		lhsL[ART_L_OcamlLexer_hyphen_1178] = ART_L_OcamlLexer_hyphen;
		artKindOfs[ART_L_OcamlLexer_hyphen_1178] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hyphen_1178] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphen_1179] = "OcamlLexer.hyphen ::= `-";
		artLabelStrings[ART_L_OcamlLexer_hyphen_1179] = "";
		lhsL[ART_L_OcamlLexer_hyphen_1179] = ART_L_OcamlLexer_hyphen;
		popD[ART_L_OcamlLexer_hyphen_1179] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphen_1180] = "OcamlLexer.hyphen ::= `-. ";
		artLabelStrings[ART_L_OcamlLexer_hyphen_1180] = "";
		lhsL[ART_L_OcamlLexer_hyphen_1180] = ART_L_OcamlLexer_hyphen;
		artKindOfs[ART_L_OcamlLexer_hyphen_1180] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hyphen_1180] = true;
		eoR_pL[ART_L_OcamlLexer_hyphen_1180] = true;
		popD[ART_L_OcamlLexer_hyphen_1180] = true;
	}

	public void artTableInitialiser_152() {
		artLabelInternalStrings[ART_L_OcamlLexer_hyphendot] = "OcamlLexer.hyphendot ";
		artLabelStrings[ART_L_OcamlLexer_hyphendot] = "hyphendot";
		artKindOfs[ART_L_OcamlLexer_hyphendot] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphendot_1183] = "OcamlLexer.hyphendot ::= . `-`.";
		artLabelStrings[ART_L_OcamlLexer_hyphendot_1183] = "";
		lhsL[ART_L_OcamlLexer_hyphendot_1183] = ART_L_OcamlLexer_hyphendot;
		artKindOfs[ART_L_OcamlLexer_hyphendot_1183] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hyphendot_1183] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphendot_1184] = "OcamlLexer.hyphendot ::= `-`.";
		artLabelStrings[ART_L_OcamlLexer_hyphendot_1184] = "";
		lhsL[ART_L_OcamlLexer_hyphendot_1184] = ART_L_OcamlLexer_hyphendot;
		popD[ART_L_OcamlLexer_hyphendot_1184] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphendot_1185] = "OcamlLexer.hyphendot ::= `-. `.";
		artLabelStrings[ART_L_OcamlLexer_hyphendot_1185] = "";
		lhsL[ART_L_OcamlLexer_hyphendot_1185] = ART_L_OcamlLexer_hyphendot;
		artKindOfs[ART_L_OcamlLexer_hyphendot_1185] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_hyphendot_1185] = true;
		popD[ART_L_OcamlLexer_hyphendot_1185] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphendot_1186] = "OcamlLexer.hyphendot ::= `-`.";
		artLabelStrings[ART_L_OcamlLexer_hyphendot_1186] = "";
		lhsL[ART_L_OcamlLexer_hyphendot_1186] = ART_L_OcamlLexer_hyphendot;
		popD[ART_L_OcamlLexer_hyphendot_1186] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphendot_1187] = "OcamlLexer.hyphendot ::= `-`.. ";
		artLabelStrings[ART_L_OcamlLexer_hyphendot_1187] = "";
		lhsL[ART_L_OcamlLexer_hyphendot_1187] = ART_L_OcamlLexer_hyphendot;
		artKindOfs[ART_L_OcamlLexer_hyphendot_1187] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hyphendot_1187] = true;
		eoR_pL[ART_L_OcamlLexer_hyphendot_1187] = true;
		popD[ART_L_OcamlLexer_hyphendot_1187] = true;
	}

	public void artTableInitialiser_153() {
		artLabelInternalStrings[ART_L_OcamlLexer_hyphengreater] = "OcamlLexer.hyphengreater ";
		artLabelStrings[ART_L_OcamlLexer_hyphengreater] = "hyphengreater";
		artKindOfs[ART_L_OcamlLexer_hyphengreater] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphengreater_1190] = "OcamlLexer.hyphengreater ::= . `-`>";
		artLabelStrings[ART_L_OcamlLexer_hyphengreater_1190] = "";
		lhsL[ART_L_OcamlLexer_hyphengreater_1190] = ART_L_OcamlLexer_hyphengreater;
		artKindOfs[ART_L_OcamlLexer_hyphengreater_1190] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_hyphengreater_1190] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphengreater_1191] = "OcamlLexer.hyphengreater ::= `-`>";
		artLabelStrings[ART_L_OcamlLexer_hyphengreater_1191] = "";
		lhsL[ART_L_OcamlLexer_hyphengreater_1191] = ART_L_OcamlLexer_hyphengreater;
		popD[ART_L_OcamlLexer_hyphengreater_1191] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphengreater_1192] = "OcamlLexer.hyphengreater ::= `-. `>";
		artLabelStrings[ART_L_OcamlLexer_hyphengreater_1192] = "";
		lhsL[ART_L_OcamlLexer_hyphengreater_1192] = ART_L_OcamlLexer_hyphengreater;
		artKindOfs[ART_L_OcamlLexer_hyphengreater_1192] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_hyphengreater_1192] = true;
		popD[ART_L_OcamlLexer_hyphengreater_1192] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphengreater_1193] = "OcamlLexer.hyphengreater ::= `-`>";
		artLabelStrings[ART_L_OcamlLexer_hyphengreater_1193] = "";
		lhsL[ART_L_OcamlLexer_hyphengreater_1193] = ART_L_OcamlLexer_hyphengreater;
		popD[ART_L_OcamlLexer_hyphengreater_1193] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_hyphengreater_1194] = "OcamlLexer.hyphengreater ::= `-`>. ";
		artLabelStrings[ART_L_OcamlLexer_hyphengreater_1194] = "";
		lhsL[ART_L_OcamlLexer_hyphengreater_1194] = ART_L_OcamlLexer_hyphengreater;
		artKindOfs[ART_L_OcamlLexer_hyphengreater_1194] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_hyphengreater_1194] = true;
		eoR_pL[ART_L_OcamlLexer_hyphengreater_1194] = true;
		popD[ART_L_OcamlLexer_hyphengreater_1194] = true;
	}

	public void artTableInitialiser_154() {
		artLabelInternalStrings[ART_L_OcamlLexer_ident] = "OcamlLexer.ident ";
		artLabelStrings[ART_L_OcamlLexer_ident] = "ident";
		artKindOfs[ART_L_OcamlLexer_ident] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1370] = "OcamlLexer.ident ::= . ( OcamlLexer.letter | `_) ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1370] = "";
		lhsL[ART_L_OcamlLexer_ident_1370] = ART_L_OcamlLexer_ident;
		artKindOfs[ART_L_OcamlLexer_ident_1370] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1372] = "OcamlLexer.ident ::= ( OcamlLexer.letter | `_) ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1372] = "";
		lhsL[ART_A_OcamlLexer_ident_1372] = ART_L_OcamlLexer_ident;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1374] = "OcamlLexer.ident ::= ( . OcamlLexer.letter | `_) ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1374] = "";
		lhsL[ART_L_OcamlLexer_ident_1374] = ART_L_OcamlLexer_ident;
		artKindOfs[ART_L_OcamlLexer_ident_1374] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1376] = "OcamlLexer.ident ::= ( OcamlLexer.letter . | `_) ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1376] = "";
		lhsL[ART_L_OcamlLexer_ident_1376] = ART_L_OcamlLexer_ident;
		artSlotInstanceOfs[ART_L_OcamlLexer_ident_1376] = ART_L_OcamlLexer_letter;
		artKindOfs[ART_L_OcamlLexer_ident_1376] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_ident_1376] = ART_L_OcamlLexer_ident_1381;
		aL[ART_L_OcamlLexer_ident_1376] = ART_L_OcamlLexer_ident_1380;
		eoOPL[ART_L_OcamlLexer_ident_1376] = true;
		popD[ART_L_OcamlLexer_ident_1376] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1378] = "OcamlLexer.ident ::= ( OcamlLexer.letter | . `_) ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1378] = "";
		lhsL[ART_L_OcamlLexer_ident_1378] = ART_L_OcamlLexer_ident;
		artKindOfs[ART_L_OcamlLexer_ident_1378] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_ident_1378] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1379] = "OcamlLexer.ident ::= ( OcamlLexer.letter | `_) ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1379] = "";
		lhsL[ART_L_OcamlLexer_ident_1379] = ART_L_OcamlLexer_ident;
		popD[ART_L_OcamlLexer_ident_1379] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1380] = "OcamlLexer.ident ::= ( OcamlLexer.letter | `_. ) ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1380] = "";
		lhsL[ART_L_OcamlLexer_ident_1380] = ART_L_OcamlLexer_ident;
		artKindOfs[ART_L_OcamlLexer_ident_1380] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_ident_1380] = ART_L_OcamlLexer_ident_1381;
		eoOPL[ART_L_OcamlLexer_ident_1380] = true;
		popD[ART_L_OcamlLexer_ident_1380] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1381] = "OcamlLexer.ident ::= ( OcamlLexer.letter | `_) . ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1381] = "";
		lhsL[ART_L_OcamlLexer_ident_1381] = ART_L_OcamlLexer_ident;
		artKindOfs[ART_L_OcamlLexer_ident_1381] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_ident_1382] = ART_L_OcamlLexer_ident;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1386] = "OcamlLexer.ident ::= ( OcamlLexer.letter | `_) ( OcamlLexer.identifier_part_character . )* ";
		artLabelStrings[ART_L_OcamlLexer_ident_1386] = "";
		lhsL[ART_L_OcamlLexer_ident_1386] = ART_L_OcamlLexer_ident;
		artSlotInstanceOfs[ART_L_OcamlLexer_ident_1386] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_ident_1386] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_ident_1386] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_ident_1387] = "OcamlLexer.ident ::= ( OcamlLexer.letter | `_) ( OcamlLexer.identifier_part_character )* . ";
		artLabelStrings[ART_L_OcamlLexer_ident_1387] = "";
		lhsL[ART_L_OcamlLexer_ident_1387] = ART_L_OcamlLexer_ident;
		artKindOfs[ART_L_OcamlLexer_ident_1387] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_ident_1387] = true;
		eoR_pL[ART_L_OcamlLexer_ident_1387] = true;
		popD[ART_L_OcamlLexer_ident_1387] = true;
	}

	public void artTableInitialiser_155() {
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character] = "OcamlLexer.identifier_part_character ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character] = "identifier_part_character";
		artKindOfs[ART_L_OcamlLexer_identifier_part_character] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1399] = "OcamlLexer.identifier_part_character ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1399] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1399] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1399] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1399] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1400] = "OcamlLexer.identifier_part_character ::= `A";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1400] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1400] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1400] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1401] = "OcamlLexer.identifier_part_character ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1401] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1401] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1401] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1401] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1401] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1401] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1403] = "OcamlLexer.identifier_part_character ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1403] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1403] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1403] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1403] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1404] = "OcamlLexer.identifier_part_character ::= `B";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1404] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1404] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1404] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1405] = "OcamlLexer.identifier_part_character ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1405] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1405] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1405] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1405] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1405] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1405] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1407] = "OcamlLexer.identifier_part_character ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1407] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1407] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1407] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1407] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1408] = "OcamlLexer.identifier_part_character ::= `C";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1408] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1408] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1408] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1409] = "OcamlLexer.identifier_part_character ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1409] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1409] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1409] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1409] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1409] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1409] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1411] = "OcamlLexer.identifier_part_character ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1411] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1411] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1411] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1411] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1412] = "OcamlLexer.identifier_part_character ::= `D";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1412] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1412] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1412] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1413] = "OcamlLexer.identifier_part_character ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1413] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1413] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1413] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1413] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1413] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1413] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1415] = "OcamlLexer.identifier_part_character ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1415] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1415] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1415] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1415] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1416] = "OcamlLexer.identifier_part_character ::= `E";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1416] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1416] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1416] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1417] = "OcamlLexer.identifier_part_character ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1417] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1417] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1417] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1417] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1417] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1417] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1419] = "OcamlLexer.identifier_part_character ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1419] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1419] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1419] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1419] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1420] = "OcamlLexer.identifier_part_character ::= `F";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1420] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1420] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1420] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1421] = "OcamlLexer.identifier_part_character ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1421] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1421] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1421] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1421] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1421] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1421] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1423] = "OcamlLexer.identifier_part_character ::= . `G";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1423] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1423] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1423] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1423] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1424] = "OcamlLexer.identifier_part_character ::= `G";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1424] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1424] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1424] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1425] = "OcamlLexer.identifier_part_character ::= `G. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1425] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1425] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1425] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1425] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1425] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1425] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1427] = "OcamlLexer.identifier_part_character ::= . `H";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1427] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1427] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1427] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1427] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1428] = "OcamlLexer.identifier_part_character ::= `H";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1428] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1428] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1428] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1429] = "OcamlLexer.identifier_part_character ::= `H. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1429] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1429] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1429] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1429] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1429] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1429] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1431] = "OcamlLexer.identifier_part_character ::= . `I";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1431] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1431] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1431] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1431] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1432] = "OcamlLexer.identifier_part_character ::= `I";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1432] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1432] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1432] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1433] = "OcamlLexer.identifier_part_character ::= `I. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1433] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1433] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1433] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1433] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1433] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1433] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1435] = "OcamlLexer.identifier_part_character ::= . `J";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1435] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1435] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1435] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1435] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1436] = "OcamlLexer.identifier_part_character ::= `J";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1436] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1436] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1436] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1437] = "OcamlLexer.identifier_part_character ::= `J. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1437] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1437] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1437] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1437] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1437] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1437] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1439] = "OcamlLexer.identifier_part_character ::= . `K";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1439] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1439] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1439] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1439] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1440] = "OcamlLexer.identifier_part_character ::= `K";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1440] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1440] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1440] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1441] = "OcamlLexer.identifier_part_character ::= `K. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1441] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1441] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1441] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1441] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1441] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1441] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1443] = "OcamlLexer.identifier_part_character ::= . `L";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1443] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1443] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1443] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1443] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1444] = "OcamlLexer.identifier_part_character ::= `L";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1444] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1444] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1444] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1445] = "OcamlLexer.identifier_part_character ::= `L. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1445] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1445] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1445] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1445] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1445] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1445] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1447] = "OcamlLexer.identifier_part_character ::= . `M";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1447] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1447] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1447] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1447] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1448] = "OcamlLexer.identifier_part_character ::= `M";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1448] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1448] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1448] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1449] = "OcamlLexer.identifier_part_character ::= `M. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1449] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1449] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1449] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1449] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1449] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1449] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1451] = "OcamlLexer.identifier_part_character ::= . `N";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1451] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1451] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1451] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1451] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1452] = "OcamlLexer.identifier_part_character ::= `N";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1452] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1452] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1452] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1453] = "OcamlLexer.identifier_part_character ::= `N. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1453] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1453] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1453] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1453] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1453] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1453] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1455] = "OcamlLexer.identifier_part_character ::= . `O";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1455] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1455] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1455] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1455] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1456] = "OcamlLexer.identifier_part_character ::= `O";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1456] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1456] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1456] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1457] = "OcamlLexer.identifier_part_character ::= `O. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1457] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1457] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1457] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1457] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1457] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1457] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1459] = "OcamlLexer.identifier_part_character ::= . `P";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1459] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1459] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1459] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1459] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1460] = "OcamlLexer.identifier_part_character ::= `P";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1460] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1460] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1460] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1461] = "OcamlLexer.identifier_part_character ::= `P. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1461] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1461] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1461] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1461] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1461] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1461] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1463] = "OcamlLexer.identifier_part_character ::= . `Q";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1463] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1463] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1463] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1463] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1464] = "OcamlLexer.identifier_part_character ::= `Q";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1464] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1464] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1464] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1465] = "OcamlLexer.identifier_part_character ::= `Q. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1465] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1465] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1465] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1465] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1465] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1465] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1467] = "OcamlLexer.identifier_part_character ::= . `R";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1467] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1467] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1467] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1467] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1468] = "OcamlLexer.identifier_part_character ::= `R";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1468] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1468] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1468] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1469] = "OcamlLexer.identifier_part_character ::= `R. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1469] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1469] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1469] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1469] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1469] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1469] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1471] = "OcamlLexer.identifier_part_character ::= . `S";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1471] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1471] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1471] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1471] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1472] = "OcamlLexer.identifier_part_character ::= `S";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1472] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1472] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1472] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1473] = "OcamlLexer.identifier_part_character ::= `S. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1473] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1473] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1473] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1473] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1473] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1473] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1475] = "OcamlLexer.identifier_part_character ::= . `T";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1475] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1475] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1475] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1475] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1476] = "OcamlLexer.identifier_part_character ::= `T";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1476] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1476] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1476] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1477] = "OcamlLexer.identifier_part_character ::= `T. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1477] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1477] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1477] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1477] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1477] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1477] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1479] = "OcamlLexer.identifier_part_character ::= . `U";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1479] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1479] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1479] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1479] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1480] = "OcamlLexer.identifier_part_character ::= `U";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1480] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1480] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1480] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1481] = "OcamlLexer.identifier_part_character ::= `U. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1481] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1481] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1481] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1481] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1481] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1481] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1483] = "OcamlLexer.identifier_part_character ::= . `V";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1483] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1483] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1483] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1483] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1484] = "OcamlLexer.identifier_part_character ::= `V";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1484] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1484] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1484] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1485] = "OcamlLexer.identifier_part_character ::= `V. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1485] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1485] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1485] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1485] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1485] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1485] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1487] = "OcamlLexer.identifier_part_character ::= . `W";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1487] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1487] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1487] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1487] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1488] = "OcamlLexer.identifier_part_character ::= `W";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1488] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1488] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1488] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1489] = "OcamlLexer.identifier_part_character ::= `W. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1489] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1489] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1489] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1489] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1489] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1489] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1491] = "OcamlLexer.identifier_part_character ::= . `X";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1491] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1491] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1491] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1491] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1492] = "OcamlLexer.identifier_part_character ::= `X";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1492] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1492] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1492] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1493] = "OcamlLexer.identifier_part_character ::= `X. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1493] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1493] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1493] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1493] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1493] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1493] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1495] = "OcamlLexer.identifier_part_character ::= . `Y";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1495] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1495] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1495] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1495] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1496] = "OcamlLexer.identifier_part_character ::= `Y";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1496] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1496] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1496] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1497] = "OcamlLexer.identifier_part_character ::= `Y. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1497] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1497] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1497] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1497] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1497] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1497] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1499] = "OcamlLexer.identifier_part_character ::= . `Z";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1499] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1499] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1499] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1499] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1500] = "OcamlLexer.identifier_part_character ::= `Z";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1500] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1500] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1500] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1501] = "OcamlLexer.identifier_part_character ::= `Z. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1501] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1501] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1501] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1501] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1501] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1501] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1503] = "OcamlLexer.identifier_part_character ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1503] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1503] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1503] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1503] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1504] = "OcamlLexer.identifier_part_character ::= `a";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1504] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1504] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1504] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1505] = "OcamlLexer.identifier_part_character ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1505] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1505] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1505] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1505] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1505] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1505] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1507] = "OcamlLexer.identifier_part_character ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1507] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1507] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1507] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1507] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1508] = "OcamlLexer.identifier_part_character ::= `b";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1508] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1508] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1508] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1509] = "OcamlLexer.identifier_part_character ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1509] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1509] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1509] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1509] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1509] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1509] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1511] = "OcamlLexer.identifier_part_character ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1511] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1511] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1511] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1511] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1512] = "OcamlLexer.identifier_part_character ::= `c";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1512] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1512] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1512] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1513] = "OcamlLexer.identifier_part_character ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1513] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1513] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1513] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1513] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1513] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1513] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1515] = "OcamlLexer.identifier_part_character ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1515] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1515] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1515] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1515] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1516] = "OcamlLexer.identifier_part_character ::= `d";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1516] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1516] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1516] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1517] = "OcamlLexer.identifier_part_character ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1517] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1517] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1517] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1517] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1517] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1517] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1519] = "OcamlLexer.identifier_part_character ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1519] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1519] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1519] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1519] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1520] = "OcamlLexer.identifier_part_character ::= `e";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1520] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1520] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1520] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1521] = "OcamlLexer.identifier_part_character ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1521] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1521] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1521] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1521] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1521] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1521] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1523] = "OcamlLexer.identifier_part_character ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1523] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1523] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1523] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1523] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1524] = "OcamlLexer.identifier_part_character ::= `f";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1524] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1524] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1524] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1525] = "OcamlLexer.identifier_part_character ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1525] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1525] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1525] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1525] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1525] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1525] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1527] = "OcamlLexer.identifier_part_character ::= . `g";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1527] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1527] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1527] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1527] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1528] = "OcamlLexer.identifier_part_character ::= `g";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1528] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1528] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1528] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1529] = "OcamlLexer.identifier_part_character ::= `g. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1529] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1529] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1529] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1529] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1529] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1529] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1531] = "OcamlLexer.identifier_part_character ::= . `h";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1531] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1531] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1531] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1531] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1532] = "OcamlLexer.identifier_part_character ::= `h";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1532] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1532] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1532] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1533] = "OcamlLexer.identifier_part_character ::= `h. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1533] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1533] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1533] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1533] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1533] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1533] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1535] = "OcamlLexer.identifier_part_character ::= . `i";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1535] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1535] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1535] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1535] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1536] = "OcamlLexer.identifier_part_character ::= `i";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1536] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1536] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1536] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1537] = "OcamlLexer.identifier_part_character ::= `i. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1537] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1537] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1537] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1537] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1537] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1537] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1539] = "OcamlLexer.identifier_part_character ::= . `j";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1539] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1539] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1539] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1539] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1540] = "OcamlLexer.identifier_part_character ::= `j";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1540] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1540] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1540] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1541] = "OcamlLexer.identifier_part_character ::= `j. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1541] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1541] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1541] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1541] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1541] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1541] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1543] = "OcamlLexer.identifier_part_character ::= . `k";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1543] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1543] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1543] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1543] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1544] = "OcamlLexer.identifier_part_character ::= `k";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1544] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1544] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1544] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1545] = "OcamlLexer.identifier_part_character ::= `k. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1545] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1545] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1545] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1545] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1545] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1545] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1547] = "OcamlLexer.identifier_part_character ::= . `l";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1547] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1547] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1547] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1547] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1548] = "OcamlLexer.identifier_part_character ::= `l";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1548] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1548] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1548] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1549] = "OcamlLexer.identifier_part_character ::= `l. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1549] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1549] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1549] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1549] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1549] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1549] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1551] = "OcamlLexer.identifier_part_character ::= . `m";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1551] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1551] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1551] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1551] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1552] = "OcamlLexer.identifier_part_character ::= `m";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1552] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1552] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1552] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1553] = "OcamlLexer.identifier_part_character ::= `m. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1553] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1553] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1553] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1553] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1553] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1553] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1555] = "OcamlLexer.identifier_part_character ::= . `n";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1555] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1555] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1555] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1555] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1556] = "OcamlLexer.identifier_part_character ::= `n";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1556] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1556] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1556] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1557] = "OcamlLexer.identifier_part_character ::= `n. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1557] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1557] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1557] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1557] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1557] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1557] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1559] = "OcamlLexer.identifier_part_character ::= . `o";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1559] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1559] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1559] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1559] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1560] = "OcamlLexer.identifier_part_character ::= `o";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1560] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1560] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1560] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1561] = "OcamlLexer.identifier_part_character ::= `o. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1561] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1561] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1561] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1561] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1561] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1561] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1563] = "OcamlLexer.identifier_part_character ::= . `p";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1563] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1563] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1563] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1563] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1564] = "OcamlLexer.identifier_part_character ::= `p";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1564] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1564] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1564] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1565] = "OcamlLexer.identifier_part_character ::= `p. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1565] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1565] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1565] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1565] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1565] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1565] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1567] = "OcamlLexer.identifier_part_character ::= . `q";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1567] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1567] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1567] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1567] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1568] = "OcamlLexer.identifier_part_character ::= `q";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1568] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1568] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1568] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1569] = "OcamlLexer.identifier_part_character ::= `q. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1569] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1569] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1569] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1569] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1569] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1569] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1571] = "OcamlLexer.identifier_part_character ::= . `r";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1571] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1571] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1571] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1571] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1572] = "OcamlLexer.identifier_part_character ::= `r";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1572] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1572] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1572] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1573] = "OcamlLexer.identifier_part_character ::= `r. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1573] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1573] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1573] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1573] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1573] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1573] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1575] = "OcamlLexer.identifier_part_character ::= . `s";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1575] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1575] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1575] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1575] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1576] = "OcamlLexer.identifier_part_character ::= `s";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1576] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1576] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1576] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1577] = "OcamlLexer.identifier_part_character ::= `s. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1577] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1577] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1577] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1577] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1577] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1577] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1579] = "OcamlLexer.identifier_part_character ::= . `t";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1579] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1579] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1579] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1579] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1580] = "OcamlLexer.identifier_part_character ::= `t";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1580] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1580] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1580] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1581] = "OcamlLexer.identifier_part_character ::= `t. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1581] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1581] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1581] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1581] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1581] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1581] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1583] = "OcamlLexer.identifier_part_character ::= . `u";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1583] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1583] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1583] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1583] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1584] = "OcamlLexer.identifier_part_character ::= `u";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1584] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1584] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1584] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1585] = "OcamlLexer.identifier_part_character ::= `u. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1585] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1585] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1585] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1585] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1585] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1585] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1587] = "OcamlLexer.identifier_part_character ::= . `v";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1587] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1587] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1587] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1587] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1588] = "OcamlLexer.identifier_part_character ::= `v";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1588] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1588] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1588] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1589] = "OcamlLexer.identifier_part_character ::= `v. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1589] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1589] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1589] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1589] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1589] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1589] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1591] = "OcamlLexer.identifier_part_character ::= . `w";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1591] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1591] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1591] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1591] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1592] = "OcamlLexer.identifier_part_character ::= `w";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1592] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1592] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1592] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1593] = "OcamlLexer.identifier_part_character ::= `w. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1593] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1593] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1593] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1593] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1593] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1593] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1595] = "OcamlLexer.identifier_part_character ::= . `x";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1595] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1595] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1595] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1595] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1596] = "OcamlLexer.identifier_part_character ::= `x";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1596] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1596] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1596] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1597] = "OcamlLexer.identifier_part_character ::= `x. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1597] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1597] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1597] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1597] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1597] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1597] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1599] = "OcamlLexer.identifier_part_character ::= . `y";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1599] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1599] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1599] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1599] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1600] = "OcamlLexer.identifier_part_character ::= `y";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1600] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1600] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1600] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1601] = "OcamlLexer.identifier_part_character ::= `y. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1601] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1601] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1601] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1601] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1601] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1601] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1603] = "OcamlLexer.identifier_part_character ::= . `z";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1603] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1603] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1603] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1603] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1604] = "OcamlLexer.identifier_part_character ::= `z";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1604] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1604] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1604] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1605] = "OcamlLexer.identifier_part_character ::= `z. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1605] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1605] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1605] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1605] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1605] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1605] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1607] = "OcamlLexer.identifier_part_character ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1607] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1607] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1607] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1607] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1608] = "OcamlLexer.identifier_part_character ::= `0";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1608] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1608] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1608] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1609] = "OcamlLexer.identifier_part_character ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1609] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1609] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1609] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1609] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1609] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1609] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1611] = "OcamlLexer.identifier_part_character ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1611] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1611] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1611] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1611] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1612] = "OcamlLexer.identifier_part_character ::= `1";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1612] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1612] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1612] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1613] = "OcamlLexer.identifier_part_character ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1613] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1613] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1613] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1613] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1613] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1613] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1615] = "OcamlLexer.identifier_part_character ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1615] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1615] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1615] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1615] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1616] = "OcamlLexer.identifier_part_character ::= `2";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1616] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1616] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1616] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1617] = "OcamlLexer.identifier_part_character ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1617] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1617] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1617] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1617] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1617] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1617] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1619] = "OcamlLexer.identifier_part_character ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1619] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1619] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1619] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1619] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1620] = "OcamlLexer.identifier_part_character ::= `3";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1620] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1620] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1620] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1621] = "OcamlLexer.identifier_part_character ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1621] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1621] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1621] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1621] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1621] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1621] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1623] = "OcamlLexer.identifier_part_character ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1623] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1623] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1623] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1623] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1624] = "OcamlLexer.identifier_part_character ::= `4";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1624] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1624] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1624] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1625] = "OcamlLexer.identifier_part_character ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1625] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1625] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1625] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1625] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1625] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1625] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1627] = "OcamlLexer.identifier_part_character ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1627] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1627] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1627] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1627] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1628] = "OcamlLexer.identifier_part_character ::= `5";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1628] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1628] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1628] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1629] = "OcamlLexer.identifier_part_character ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1629] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1629] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1629] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1629] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1629] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1629] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1631] = "OcamlLexer.identifier_part_character ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1631] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1631] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1631] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1631] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1632] = "OcamlLexer.identifier_part_character ::= `6";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1632] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1632] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1632] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1633] = "OcamlLexer.identifier_part_character ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1633] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1633] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1633] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1633] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1633] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1633] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1635] = "OcamlLexer.identifier_part_character ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1635] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1635] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1635] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1635] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1636] = "OcamlLexer.identifier_part_character ::= `7";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1636] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1636] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1636] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1637] = "OcamlLexer.identifier_part_character ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1637] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1637] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1637] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1637] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1637] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1637] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1639] = "OcamlLexer.identifier_part_character ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1639] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1639] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1639] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1639] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1640] = "OcamlLexer.identifier_part_character ::= `8";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1640] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1640] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1640] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1641] = "OcamlLexer.identifier_part_character ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1641] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1641] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1641] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1641] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1641] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1641] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1643] = "OcamlLexer.identifier_part_character ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1643] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1643] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1643] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1643] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1644] = "OcamlLexer.identifier_part_character ::= `9";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1644] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1644] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1644] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1645] = "OcamlLexer.identifier_part_character ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1645] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1645] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1645] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1645] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1645] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1645] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1647] = "OcamlLexer.identifier_part_character ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1647] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1647] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1647] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1647] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1648] = "OcamlLexer.identifier_part_character ::= `_";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1648] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1648] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1648] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1649] = "OcamlLexer.identifier_part_character ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1649] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1649] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1649] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1649] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1649] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1649] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1651] = "OcamlLexer.identifier_part_character ::= . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1651] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1651] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1651] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_identifier_part_character_1651] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1652] = "OcamlLexer.identifier_part_character ::= `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1652] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1652] = ART_L_OcamlLexer_identifier_part_character;
		popD[ART_L_OcamlLexer_identifier_part_character_1652] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_identifier_part_character_1653] = "OcamlLexer.identifier_part_character ::= `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_identifier_part_character_1653] = "";
		lhsL[ART_L_OcamlLexer_identifier_part_character_1653] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_identifier_part_character_1653] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_identifier_part_character_1653] = true;
		eoR_pL[ART_L_OcamlLexer_identifier_part_character_1653] = true;
		popD[ART_L_OcamlLexer_identifier_part_character_1653] = true;
	}

	public void artTableInitialiser_156() {
		artLabelInternalStrings[ART_L_OcamlLexer_if] = "OcamlLexer.if ";
		artLabelStrings[ART_L_OcamlLexer_if] = "if";
		artKindOfs[ART_L_OcamlLexer_if] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_if_704] = "OcamlLexer.if ::= . `i`f";
		artLabelStrings[ART_L_OcamlLexer_if_704] = "";
		lhsL[ART_L_OcamlLexer_if_704] = ART_L_OcamlLexer_if;
		artKindOfs[ART_L_OcamlLexer_if_704] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_if_704] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_if_705] = "OcamlLexer.if ::= `i`f";
		artLabelStrings[ART_L_OcamlLexer_if_705] = "";
		lhsL[ART_L_OcamlLexer_if_705] = ART_L_OcamlLexer_if;
		popD[ART_L_OcamlLexer_if_705] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_if_706] = "OcamlLexer.if ::= `i. `f";
		artLabelStrings[ART_L_OcamlLexer_if_706] = "";
		lhsL[ART_L_OcamlLexer_if_706] = ART_L_OcamlLexer_if;
		artKindOfs[ART_L_OcamlLexer_if_706] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_if_706] = true;
		popD[ART_L_OcamlLexer_if_706] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_if_707] = "OcamlLexer.if ::= `i`f";
		artLabelStrings[ART_L_OcamlLexer_if_707] = "";
		lhsL[ART_L_OcamlLexer_if_707] = ART_L_OcamlLexer_if;
		popD[ART_L_OcamlLexer_if_707] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_if_708] = "OcamlLexer.if ::= `i`f. ";
		artLabelStrings[ART_L_OcamlLexer_if_708] = "";
		lhsL[ART_L_OcamlLexer_if_708] = ART_L_OcamlLexer_if;
		artKindOfs[ART_L_OcamlLexer_if_708] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_if_708] = true;
		eoR_pL[ART_L_OcamlLexer_if_708] = true;
		popD[ART_L_OcamlLexer_if_708] = true;
	}

	public void artTableInitialiser_157() {
		artLabelInternalStrings[ART_L_OcamlLexer_in] = "OcamlLexer.in ";
		artLabelStrings[ART_L_OcamlLexer_in] = "in";
		artKindOfs[ART_L_OcamlLexer_in] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_in_711] = "OcamlLexer.in ::= . `i`n";
		artLabelStrings[ART_L_OcamlLexer_in_711] = "";
		lhsL[ART_L_OcamlLexer_in_711] = ART_L_OcamlLexer_in;
		artKindOfs[ART_L_OcamlLexer_in_711] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_in_711] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_in_712] = "OcamlLexer.in ::= `i`n";
		artLabelStrings[ART_L_OcamlLexer_in_712] = "";
		lhsL[ART_L_OcamlLexer_in_712] = ART_L_OcamlLexer_in;
		popD[ART_L_OcamlLexer_in_712] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_in_713] = "OcamlLexer.in ::= `i. `n";
		artLabelStrings[ART_L_OcamlLexer_in_713] = "";
		lhsL[ART_L_OcamlLexer_in_713] = ART_L_OcamlLexer_in;
		artKindOfs[ART_L_OcamlLexer_in_713] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_in_713] = true;
		popD[ART_L_OcamlLexer_in_713] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_in_714] = "OcamlLexer.in ::= `i`n";
		artLabelStrings[ART_L_OcamlLexer_in_714] = "";
		lhsL[ART_L_OcamlLexer_in_714] = ART_L_OcamlLexer_in;
		popD[ART_L_OcamlLexer_in_714] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_in_715] = "OcamlLexer.in ::= `i`n. ";
		artLabelStrings[ART_L_OcamlLexer_in_715] = "";
		lhsL[ART_L_OcamlLexer_in_715] = ART_L_OcamlLexer_in;
		artKindOfs[ART_L_OcamlLexer_in_715] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_in_715] = true;
		eoR_pL[ART_L_OcamlLexer_in_715] = true;
		popD[ART_L_OcamlLexer_in_715] = true;
	}

	public void artTableInitialiser_158() {
		artLabelInternalStrings[ART_L_OcamlLexer_include] = "OcamlLexer.include ";
		artLabelStrings[ART_L_OcamlLexer_include] = "include";
		artKindOfs[ART_L_OcamlLexer_include] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_include_718] = "OcamlLexer.include ::= . `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_718] = "";
		lhsL[ART_L_OcamlLexer_include_718] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_718] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_include_718] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_719] = "OcamlLexer.include ::= `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_719] = "";
		lhsL[ART_L_OcamlLexer_include_719] = ART_L_OcamlLexer_include;
		popD[ART_L_OcamlLexer_include_719] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_720] = "OcamlLexer.include ::= `i. `n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_720] = "";
		lhsL[ART_L_OcamlLexer_include_720] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_720] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_include_720] = true;
		popD[ART_L_OcamlLexer_include_720] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_721] = "OcamlLexer.include ::= `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_721] = "";
		lhsL[ART_L_OcamlLexer_include_721] = ART_L_OcamlLexer_include;
		popD[ART_L_OcamlLexer_include_721] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_722] = "OcamlLexer.include ::= `i`n. `c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_722] = "";
		lhsL[ART_L_OcamlLexer_include_722] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_722] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_include_722] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_723] = "OcamlLexer.include ::= `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_723] = "";
		lhsL[ART_L_OcamlLexer_include_723] = ART_L_OcamlLexer_include;
		popD[ART_L_OcamlLexer_include_723] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_724] = "OcamlLexer.include ::= `i`n`c. `l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_724] = "";
		lhsL[ART_L_OcamlLexer_include_724] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_724] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_include_724] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_725] = "OcamlLexer.include ::= `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_725] = "";
		lhsL[ART_L_OcamlLexer_include_725] = ART_L_OcamlLexer_include;
		popD[ART_L_OcamlLexer_include_725] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_726] = "OcamlLexer.include ::= `i`n`c`l. `u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_726] = "";
		lhsL[ART_L_OcamlLexer_include_726] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_726] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_include_726] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_727] = "OcamlLexer.include ::= `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_727] = "";
		lhsL[ART_L_OcamlLexer_include_727] = ART_L_OcamlLexer_include;
		popD[ART_L_OcamlLexer_include_727] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_728] = "OcamlLexer.include ::= `i`n`c`l`u. `d`e";
		artLabelStrings[ART_L_OcamlLexer_include_728] = "";
		lhsL[ART_L_OcamlLexer_include_728] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_728] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_include_728] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_729] = "OcamlLexer.include ::= `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_729] = "";
		lhsL[ART_L_OcamlLexer_include_729] = ART_L_OcamlLexer_include;
		popD[ART_L_OcamlLexer_include_729] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_730] = "OcamlLexer.include ::= `i`n`c`l`u`d. `e";
		artLabelStrings[ART_L_OcamlLexer_include_730] = "";
		lhsL[ART_L_OcamlLexer_include_730] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_730] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_include_730] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_731] = "OcamlLexer.include ::= `i`n`c`l`u`d`e";
		artLabelStrings[ART_L_OcamlLexer_include_731] = "";
		lhsL[ART_L_OcamlLexer_include_731] = ART_L_OcamlLexer_include;
		popD[ART_L_OcamlLexer_include_731] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_include_732] = "OcamlLexer.include ::= `i`n`c`l`u`d`e. ";
		artLabelStrings[ART_L_OcamlLexer_include_732] = "";
		lhsL[ART_L_OcamlLexer_include_732] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_include_732] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_include_732] = true;
		eoR_pL[ART_L_OcamlLexer_include_732] = true;
		popD[ART_L_OcamlLexer_include_732] = true;
	}

	public void artTableInitialiser_159() {
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol] = "OcamlLexer.infix_symbol ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol] = "infix_symbol";
		artKindOfs[ART_L_OcamlLexer_infix_symbol] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5128] = "OcamlLexer.infix_symbol ::= . ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5128] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5128] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5128] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5130] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5130] = "";
		lhsL[ART_A_OcamlLexer_infix_symbol_5130] = ART_L_OcamlLexer_infix_symbol;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5132] = "OcamlLexer.infix_symbol ::= ( . `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5132] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5132] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5132] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5132] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5133] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5133] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5133] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5133] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5134] = "OcamlLexer.infix_symbol ::= ( `=. | `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5134] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5134] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5134] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5134] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5134] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5134] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5134] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5136] = "OcamlLexer.infix_symbol ::= ( `=| . `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5136] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5136] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5136] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5136] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5137] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5137] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5137] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5137] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5138] = "OcamlLexer.infix_symbol ::= ( `=| `<. | `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5138] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5138] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5138] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5138] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5138] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5138] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5138] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5140] = "OcamlLexer.infix_symbol ::= ( `=| `<| . `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5140] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5140] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5140] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5140] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5141] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5141] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5141] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5141] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5142] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>. | `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5142] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5142] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5142] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5142] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5142] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5142] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5142] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5144] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| . `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5144] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5144] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5144] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5144] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5145] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5145] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5145] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5145] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5146] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@. | `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5146] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5146] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5146] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5146] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5146] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5146] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5146] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5148] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| . `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5148] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5148] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5148] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5148] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5149] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5149] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5149] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5149] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5150] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^. | `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5150] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5150] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5150] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5150] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5150] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5150] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5150] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5152] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| . `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5152] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5152] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5152] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5152] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5153] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5153] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5153] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5153] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5154] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|. | `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5154] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5154] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5154] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5154] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5154] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5154] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5154] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5156] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| . `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5156] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5156] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5156] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5156] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5157] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5157] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5157] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5157] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5158] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&. | `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5158] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5158] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5158] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5158] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5158] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5158] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5158] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5160] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| . `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5160] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5160] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5160] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5160] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5161] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5161] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5161] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5161] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5162] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+. | `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5162] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5162] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5162] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5162] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5162] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5162] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5162] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5164] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| . `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5164] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5164] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5164] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5164] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5165] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5165] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5165] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5165] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5166] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-. | `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5166] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5166] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5166] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5166] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5166] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5166] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5166] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5168] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| . `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5168] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5168] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5168] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5168] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5169] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5169] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5169] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5169] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5170] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*. | `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5170] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5170] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5170] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5170] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5170] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5170] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5170] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5172] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| . `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5172] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5172] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5172] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5172] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5173] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5173] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5173] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5173] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5174] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/. | `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5174] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5174] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5174] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5174] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5174] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5174] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5174] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5176] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| . `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5176] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5176] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5176] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5176] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5177] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5177] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5177] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5177] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5178] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$. | `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5178] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5178] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5178] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5178] = ART_L_OcamlLexer_infix_symbol_5183;
		aL[ART_L_OcamlLexer_infix_symbol_5178] = ART_L_OcamlLexer_infix_symbol_5182;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5178] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5178] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5180] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| . `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5180] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5180] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5180] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5180] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5181] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5181] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5181] = ART_L_OcamlLexer_infix_symbol;
		popD[ART_L_OcamlLexer_infix_symbol_5181] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5182] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%. ) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5182] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5182] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5182] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_infix_symbol_5182] = ART_L_OcamlLexer_infix_symbol_5183;
		eoOPL[ART_L_OcamlLexer_infix_symbol_5182] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5182] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5183] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) . ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5183] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5183] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5183] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_infix_symbol_5184] = ART_L_OcamlLexer_infix_symbol;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5188] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char . )* ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5188] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5188] = ART_L_OcamlLexer_infix_symbol;
		artSlotInstanceOfs[ART_L_OcamlLexer_infix_symbol_5188] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5188] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_infix_symbol_5188] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_infix_symbol_5189] = "OcamlLexer.infix_symbol ::= ( `=| `<| `>| `@| `^| `|| `&| `+| `-| `*| `/| `$| `%) ( OcamlLexer.operator_char )* . ";
		artLabelStrings[ART_L_OcamlLexer_infix_symbol_5189] = "";
		lhsL[ART_L_OcamlLexer_infix_symbol_5189] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_infix_symbol_5189] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_infix_symbol_5189] = true;
		eoR_pL[ART_L_OcamlLexer_infix_symbol_5189] = true;
		popD[ART_L_OcamlLexer_infix_symbol_5189] = true;
	}

	public void artTableInitialiser_160() {
		artLabelInternalStrings[ART_L_OcamlLexer_inherit] = "OcamlLexer.inherit ";
		artLabelStrings[ART_L_OcamlLexer_inherit] = "inherit";
		artKindOfs[ART_L_OcamlLexer_inherit] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_735] = "OcamlLexer.inherit ::= . `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_735] = "";
		lhsL[ART_L_OcamlLexer_inherit_735] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_735] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_inherit_735] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_736] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_736] = "";
		lhsL[ART_L_OcamlLexer_inherit_736] = ART_L_OcamlLexer_inherit;
		popD[ART_L_OcamlLexer_inherit_736] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_737] = "OcamlLexer.inherit ::= `i. `n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_737] = "";
		lhsL[ART_L_OcamlLexer_inherit_737] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_737] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_inherit_737] = true;
		popD[ART_L_OcamlLexer_inherit_737] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_738] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_738] = "";
		lhsL[ART_L_OcamlLexer_inherit_738] = ART_L_OcamlLexer_inherit;
		popD[ART_L_OcamlLexer_inherit_738] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_739] = "OcamlLexer.inherit ::= `i`n. `h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_739] = "";
		lhsL[ART_L_OcamlLexer_inherit_739] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_739] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_inherit_739] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_740] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_740] = "";
		lhsL[ART_L_OcamlLexer_inherit_740] = ART_L_OcamlLexer_inherit;
		popD[ART_L_OcamlLexer_inherit_740] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_741] = "OcamlLexer.inherit ::= `i`n`h. `e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_741] = "";
		lhsL[ART_L_OcamlLexer_inherit_741] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_741] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_inherit_741] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_742] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_742] = "";
		lhsL[ART_L_OcamlLexer_inherit_742] = ART_L_OcamlLexer_inherit;
		popD[ART_L_OcamlLexer_inherit_742] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_743] = "OcamlLexer.inherit ::= `i`n`h`e. `r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_743] = "";
		lhsL[ART_L_OcamlLexer_inherit_743] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_743] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_inherit_743] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_744] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_744] = "";
		lhsL[ART_L_OcamlLexer_inherit_744] = ART_L_OcamlLexer_inherit;
		popD[ART_L_OcamlLexer_inherit_744] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_745] = "OcamlLexer.inherit ::= `i`n`h`e`r. `i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_745] = "";
		lhsL[ART_L_OcamlLexer_inherit_745] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_745] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_inherit_745] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_746] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_746] = "";
		lhsL[ART_L_OcamlLexer_inherit_746] = ART_L_OcamlLexer_inherit;
		popD[ART_L_OcamlLexer_inherit_746] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_747] = "OcamlLexer.inherit ::= `i`n`h`e`r`i. `t";
		artLabelStrings[ART_L_OcamlLexer_inherit_747] = "";
		lhsL[ART_L_OcamlLexer_inherit_747] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_747] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_inherit_747] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_748] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t";
		artLabelStrings[ART_L_OcamlLexer_inherit_748] = "";
		lhsL[ART_L_OcamlLexer_inherit_748] = ART_L_OcamlLexer_inherit;
		popD[ART_L_OcamlLexer_inherit_748] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_inherit_749] = "OcamlLexer.inherit ::= `i`n`h`e`r`i`t. ";
		artLabelStrings[ART_L_OcamlLexer_inherit_749] = "";
		lhsL[ART_L_OcamlLexer_inherit_749] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_inherit_749] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_inherit_749] = true;
		eoR_pL[ART_L_OcamlLexer_inherit_749] = true;
		popD[ART_L_OcamlLexer_inherit_749] = true;
	}

	public void artTableInitialiser_161() {
		artLabelInternalStrings[ART_L_OcamlLexer_initializer] = "OcamlLexer.initializer ";
		artLabelStrings[ART_L_OcamlLexer_initializer] = "initializer";
		artKindOfs[ART_L_OcamlLexer_initializer] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_752] = "OcamlLexer.initializer ::= . `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_752] = "";
		lhsL[ART_L_OcamlLexer_initializer_752] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_752] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_752] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_753] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_753] = "";
		lhsL[ART_L_OcamlLexer_initializer_753] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_753] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_754] = "OcamlLexer.initializer ::= `i. `n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_754] = "";
		lhsL[ART_L_OcamlLexer_initializer_754] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_754] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_initializer_754] = true;
		popD[ART_L_OcamlLexer_initializer_754] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_755] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_755] = "";
		lhsL[ART_L_OcamlLexer_initializer_755] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_755] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_756] = "OcamlLexer.initializer ::= `i`n. `i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_756] = "";
		lhsL[ART_L_OcamlLexer_initializer_756] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_756] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_756] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_757] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_757] = "";
		lhsL[ART_L_OcamlLexer_initializer_757] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_757] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_758] = "OcamlLexer.initializer ::= `i`n`i. `t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_758] = "";
		lhsL[ART_L_OcamlLexer_initializer_758] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_758] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_758] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_759] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_759] = "";
		lhsL[ART_L_OcamlLexer_initializer_759] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_759] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_760] = "OcamlLexer.initializer ::= `i`n`i`t. `i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_760] = "";
		lhsL[ART_L_OcamlLexer_initializer_760] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_760] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_760] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_761] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_761] = "";
		lhsL[ART_L_OcamlLexer_initializer_761] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_761] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_762] = "OcamlLexer.initializer ::= `i`n`i`t`i. `a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_762] = "";
		lhsL[ART_L_OcamlLexer_initializer_762] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_762] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_762] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_763] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_763] = "";
		lhsL[ART_L_OcamlLexer_initializer_763] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_763] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_764] = "OcamlLexer.initializer ::= `i`n`i`t`i`a. `l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_764] = "";
		lhsL[ART_L_OcamlLexer_initializer_764] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_764] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_764] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_765] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_765] = "";
		lhsL[ART_L_OcamlLexer_initializer_765] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_765] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_766] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l. `i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_766] = "";
		lhsL[ART_L_OcamlLexer_initializer_766] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_766] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_766] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_767] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_767] = "";
		lhsL[ART_L_OcamlLexer_initializer_767] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_767] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_768] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i. `z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_768] = "";
		lhsL[ART_L_OcamlLexer_initializer_768] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_768] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_768] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_769] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_769] = "";
		lhsL[ART_L_OcamlLexer_initializer_769] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_769] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_770] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z. `e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_770] = "";
		lhsL[ART_L_OcamlLexer_initializer_770] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_770] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_770] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_771] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_771] = "";
		lhsL[ART_L_OcamlLexer_initializer_771] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_771] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_772] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e. `r";
		artLabelStrings[ART_L_OcamlLexer_initializer_772] = "";
		lhsL[ART_L_OcamlLexer_initializer_772] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_772] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_initializer_772] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_773] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r";
		artLabelStrings[ART_L_OcamlLexer_initializer_773] = "";
		lhsL[ART_L_OcamlLexer_initializer_773] = ART_L_OcamlLexer_initializer;
		popD[ART_L_OcamlLexer_initializer_773] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_initializer_774] = "OcamlLexer.initializer ::= `i`n`i`t`i`a`l`i`z`e`r. ";
		artLabelStrings[ART_L_OcamlLexer_initializer_774] = "";
		lhsL[ART_L_OcamlLexer_initializer_774] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_initializer_774] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_initializer_774] = true;
		eoR_pL[ART_L_OcamlLexer_initializer_774] = true;
		popD[ART_L_OcamlLexer_initializer_774] = true;
	}

	public void artTableInitialiser_162() {
		artLabelInternalStrings[ART_L_OcamlLexer_input] = "OcamlLexer.input ";
		artLabelStrings[ART_L_OcamlLexer_input] = "input";
		artKindOfs[ART_L_OcamlLexer_input] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_input_5] = "OcamlLexer.input ::= . ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_5] = "";
		lhsL[ART_L_OcamlLexer_input_5] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_5] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_input_6] = ART_L_OcamlLexer_input;
		artLabelInternalStrings[ART_L_OcamlLexer_input_7] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_7] = "";
		lhsL[ART_A_OcamlLexer_input_7] = ART_L_OcamlLexer_input;
		artLabelInternalStrings[ART_L_OcamlLexer_input_9] = "OcamlLexer.input ::= ( . OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_9] = "";
		lhsL[ART_L_OcamlLexer_input_9] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_9] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_11] = "OcamlLexer.input ::= ( OcamlLexer.ident . | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_11] = "";
		lhsL[ART_L_OcamlLexer_input_11] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_11] = ART_L_OcamlLexer_ident;
		artKindOfs[ART_L_OcamlLexer_input_11] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_11] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_11] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_11] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_13] = "OcamlLexer.input ::= ( OcamlLexer.ident | . OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_13] = "";
		lhsL[ART_L_OcamlLexer_input_13] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_13] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_15] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident . | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_15] = "";
		lhsL[ART_L_OcamlLexer_input_15] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_15] = ART_L_OcamlLexer_capitalized_ident;
		artKindOfs[ART_L_OcamlLexer_input_15] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_15] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_15] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_15] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_17] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | . OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_17] = "";
		lhsL[ART_L_OcamlLexer_input_17] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_17] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_19] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident . | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_19] = "";
		lhsL[ART_L_OcamlLexer_input_19] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_19] = ART_L_OcamlLexer_lowercase_ident;
		artKindOfs[ART_L_OcamlLexer_input_19] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_19] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_19] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_19] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_21] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | . OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_21] = "";
		lhsL[ART_L_OcamlLexer_input_21] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_21] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_23] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment . | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_23] = "";
		lhsL[ART_L_OcamlLexer_input_23] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_23] = ART_L_OcamlLexer_comment;
		artKindOfs[ART_L_OcamlLexer_input_23] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_23] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_23] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_23] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_25] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | . OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_25] = "";
		lhsL[ART_L_OcamlLexer_input_25] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_25] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_27] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace . | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_27] = "";
		lhsL[ART_L_OcamlLexer_input_27] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_27] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_input_27] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_27] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_27] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_27] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_29] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | . OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_29] = "";
		lhsL[ART_L_OcamlLexer_input_29] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_29] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_31] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal . | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_31] = "";
		lhsL[ART_L_OcamlLexer_input_31] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_31] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_input_31] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_31] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_31] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_31] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_33] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | . OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_33] = "";
		lhsL[ART_L_OcamlLexer_input_33] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_33] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_35] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal . | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_35] = "";
		lhsL[ART_L_OcamlLexer_input_35] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_35] = ART_L_OcamlLexer_float_literal;
		artKindOfs[ART_L_OcamlLexer_input_35] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_35] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_35] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_35] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_37] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | . OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_37] = "";
		lhsL[ART_L_OcamlLexer_input_37] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_37] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_39] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal . | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_39] = "";
		lhsL[ART_L_OcamlLexer_input_39] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_39] = ART_L_OcamlLexer_char_literal;
		artKindOfs[ART_L_OcamlLexer_input_39] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_39] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_39] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_39] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_41] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | . OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_41] = "";
		lhsL[ART_L_OcamlLexer_input_41] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_41] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_43] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal . | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_43] = "";
		lhsL[ART_L_OcamlLexer_input_43] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_43] = ART_L_OcamlLexer_string_literal;
		artKindOfs[ART_L_OcamlLexer_input_43] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_43] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_43] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_43] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_45] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | . OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_45] = "";
		lhsL[ART_L_OcamlLexer_input_45] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_45] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_47] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label . | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_47] = "";
		lhsL[ART_L_OcamlLexer_input_47] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_47] = ART_L_OcamlLexer_label;
		artKindOfs[ART_L_OcamlLexer_input_47] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_47] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_47] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_47] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_49] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | . OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_49] = "";
		lhsL[ART_L_OcamlLexer_input_49] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_49] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_51] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel . | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_51] = "";
		lhsL[ART_L_OcamlLexer_input_51] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_51] = ART_L_OcamlLexer_optlabel;
		artKindOfs[ART_L_OcamlLexer_input_51] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_51] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_51] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_51] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_53] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | . OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_53] = "";
		lhsL[ART_L_OcamlLexer_input_53] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_53] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_55] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol . | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_55] = "";
		lhsL[ART_L_OcamlLexer_input_55] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_55] = ART_L_OcamlLexer_infix_symbol;
		artKindOfs[ART_L_OcamlLexer_input_55] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_55] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_55] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_55] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_57] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | . OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_57] = "";
		lhsL[ART_L_OcamlLexer_input_57] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_57] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_59] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol . | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_59] = "";
		lhsL[ART_L_OcamlLexer_input_59] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_59] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_input_59] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_59] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_59] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_59] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_61] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | . OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_61] = "";
		lhsL[ART_L_OcamlLexer_input_61] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_61] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_63] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and . | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_63] = "";
		lhsL[ART_L_OcamlLexer_input_63] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_63] = ART_L_OcamlLexer_and;
		artKindOfs[ART_L_OcamlLexer_input_63] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_63] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_63] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_63] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_65] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | . OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_65] = "";
		lhsL[ART_L_OcamlLexer_input_65] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_65] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_67] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as . | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_67] = "";
		lhsL[ART_L_OcamlLexer_input_67] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_67] = ART_L_OcamlLexer_as;
		artKindOfs[ART_L_OcamlLexer_input_67] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_67] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_67] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_67] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_69] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | . OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_69] = "";
		lhsL[ART_L_OcamlLexer_input_69] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_69] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_71] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert . | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_71] = "";
		lhsL[ART_L_OcamlLexer_input_71] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_71] = ART_L_OcamlLexer_assert;
		artKindOfs[ART_L_OcamlLexer_input_71] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_71] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_71] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_71] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_73] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | . OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_73] = "";
		lhsL[ART_L_OcamlLexer_input_73] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_73] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_75] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr . | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_75] = "";
		lhsL[ART_L_OcamlLexer_input_75] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_75] = ART_L_OcamlLexer_asr;
		artKindOfs[ART_L_OcamlLexer_input_75] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_75] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_75] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_75] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_77] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | . OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_77] = "";
		lhsL[ART_L_OcamlLexer_input_77] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_77] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_79] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin . | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_79] = "";
		lhsL[ART_L_OcamlLexer_input_79] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_79] = ART_L_OcamlLexer_begin;
		artKindOfs[ART_L_OcamlLexer_input_79] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_79] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_79] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_79] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_81] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | . OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_81] = "";
		lhsL[ART_L_OcamlLexer_input_81] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_81] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_83] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class . | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_83] = "";
		lhsL[ART_L_OcamlLexer_input_83] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_83] = ART_L_OcamlLexer_class;
		artKindOfs[ART_L_OcamlLexer_input_83] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_83] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_83] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_83] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_85] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | . OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_85] = "";
		lhsL[ART_L_OcamlLexer_input_85] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_85] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_87] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint . | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_87] = "";
		lhsL[ART_L_OcamlLexer_input_87] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_87] = ART_L_OcamlLexer_constraint;
		artKindOfs[ART_L_OcamlLexer_input_87] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_87] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_87] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_87] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_89] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | . OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_89] = "";
		lhsL[ART_L_OcamlLexer_input_89] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_89] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_91] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do . | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_91] = "";
		lhsL[ART_L_OcamlLexer_input_91] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_91] = ART_L_OcamlLexer_do;
		artKindOfs[ART_L_OcamlLexer_input_91] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_91] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_91] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_91] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_93] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | . OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_93] = "";
		lhsL[ART_L_OcamlLexer_input_93] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_93] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_95] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done . | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_95] = "";
		lhsL[ART_L_OcamlLexer_input_95] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_95] = ART_L_OcamlLexer_done;
		artKindOfs[ART_L_OcamlLexer_input_95] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_95] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_95] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_95] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_97] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | . OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_97] = "";
		lhsL[ART_L_OcamlLexer_input_97] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_97] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_99] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto . | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_99] = "";
		lhsL[ART_L_OcamlLexer_input_99] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_99] = ART_L_OcamlLexer_downto;
		artKindOfs[ART_L_OcamlLexer_input_99] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_99] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_99] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_99] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_101] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | . OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_101] = "";
		lhsL[ART_L_OcamlLexer_input_101] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_101] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_103] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else . | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_103] = "";
		lhsL[ART_L_OcamlLexer_input_103] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_103] = ART_L_OcamlLexer_else;
		artKindOfs[ART_L_OcamlLexer_input_103] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_103] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_103] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_103] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_105] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | . OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_105] = "";
		lhsL[ART_L_OcamlLexer_input_105] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_105] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_107] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end . | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_107] = "";
		lhsL[ART_L_OcamlLexer_input_107] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_107] = ART_L_OcamlLexer_end;
		artKindOfs[ART_L_OcamlLexer_input_107] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_107] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_107] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_107] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_109] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | . OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_109] = "";
		lhsL[ART_L_OcamlLexer_input_109] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_109] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_111] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception . | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_111] = "";
		lhsL[ART_L_OcamlLexer_input_111] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_111] = ART_L_OcamlLexer_exception;
		artKindOfs[ART_L_OcamlLexer_input_111] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_111] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_111] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_111] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_113] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | . OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_113] = "";
		lhsL[ART_L_OcamlLexer_input_113] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_113] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_115] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external . | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_115] = "";
		lhsL[ART_L_OcamlLexer_input_115] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_115] = ART_L_OcamlLexer_external;
		artKindOfs[ART_L_OcamlLexer_input_115] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_115] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_115] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_115] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_117] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | . OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_117] = "";
		lhsL[ART_L_OcamlLexer_input_117] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_117] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_119] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false . | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_119] = "";
		lhsL[ART_L_OcamlLexer_input_119] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_119] = ART_L_OcamlLexer_false;
		artKindOfs[ART_L_OcamlLexer_input_119] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_119] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_119] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_119] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_121] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | . OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_121] = "";
		lhsL[ART_L_OcamlLexer_input_121] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_121] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_123] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for . | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_123] = "";
		lhsL[ART_L_OcamlLexer_input_123] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_123] = ART_L_OcamlLexer_for;
		artKindOfs[ART_L_OcamlLexer_input_123] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_123] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_123] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_123] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_125] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | . OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_125] = "";
		lhsL[ART_L_OcamlLexer_input_125] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_125] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_127] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun . | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_127] = "";
		lhsL[ART_L_OcamlLexer_input_127] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_127] = ART_L_OcamlLexer_fun;
		artKindOfs[ART_L_OcamlLexer_input_127] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_127] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_127] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_127] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_129] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | . OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_129] = "";
		lhsL[ART_L_OcamlLexer_input_129] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_129] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_131] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function . | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_131] = "";
		lhsL[ART_L_OcamlLexer_input_131] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_131] = ART_L_OcamlLexer_function;
		artKindOfs[ART_L_OcamlLexer_input_131] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_131] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_131] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_131] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_133] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | . OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_133] = "";
		lhsL[ART_L_OcamlLexer_input_133] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_133] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_135] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor . | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_135] = "";
		lhsL[ART_L_OcamlLexer_input_135] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_135] = ART_L_OcamlLexer_functor;
		artKindOfs[ART_L_OcamlLexer_input_135] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_135] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_135] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_135] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_137] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | . OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_137] = "";
		lhsL[ART_L_OcamlLexer_input_137] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_137] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_139] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if . | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_139] = "";
		lhsL[ART_L_OcamlLexer_input_139] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_139] = ART_L_OcamlLexer_if;
		artKindOfs[ART_L_OcamlLexer_input_139] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_139] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_139] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_139] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_141] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | . OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_141] = "";
		lhsL[ART_L_OcamlLexer_input_141] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_141] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_143] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in . | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_143] = "";
		lhsL[ART_L_OcamlLexer_input_143] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_143] = ART_L_OcamlLexer_in;
		artKindOfs[ART_L_OcamlLexer_input_143] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_143] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_143] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_143] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_145] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | . OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_145] = "";
		lhsL[ART_L_OcamlLexer_input_145] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_145] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_147] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include . | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_147] = "";
		lhsL[ART_L_OcamlLexer_input_147] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_147] = ART_L_OcamlLexer_include;
		artKindOfs[ART_L_OcamlLexer_input_147] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_147] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_147] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_147] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_149] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | . OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_149] = "";
		lhsL[ART_L_OcamlLexer_input_149] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_149] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_151] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit . | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_151] = "";
		lhsL[ART_L_OcamlLexer_input_151] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_151] = ART_L_OcamlLexer_inherit;
		artKindOfs[ART_L_OcamlLexer_input_151] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_151] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_151] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_151] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_153] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | . OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_153] = "";
		lhsL[ART_L_OcamlLexer_input_153] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_153] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_155] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer . | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_155] = "";
		lhsL[ART_L_OcamlLexer_input_155] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_155] = ART_L_OcamlLexer_initializer;
		artKindOfs[ART_L_OcamlLexer_input_155] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_155] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_155] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_155] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_157] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | . OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_157] = "";
		lhsL[ART_L_OcamlLexer_input_157] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_157] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_159] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land . | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_159] = "";
		lhsL[ART_L_OcamlLexer_input_159] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_159] = ART_L_OcamlLexer_land;
		artKindOfs[ART_L_OcamlLexer_input_159] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_159] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_159] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_159] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_161] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | . OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_161] = "";
		lhsL[ART_L_OcamlLexer_input_161] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_161] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_163] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy . | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_163] = "";
		lhsL[ART_L_OcamlLexer_input_163] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_163] = ART_L_OcamlLexer_lazy;
		artKindOfs[ART_L_OcamlLexer_input_163] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_163] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_163] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_163] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_165] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | . OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_165] = "";
		lhsL[ART_L_OcamlLexer_input_165] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_165] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_167] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let . | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_167] = "";
		lhsL[ART_L_OcamlLexer_input_167] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_167] = ART_L_OcamlLexer_let;
		artKindOfs[ART_L_OcamlLexer_input_167] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_167] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_167] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_167] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_169] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | . OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_169] = "";
		lhsL[ART_L_OcamlLexer_input_169] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_169] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_171] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor . | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_171] = "";
		lhsL[ART_L_OcamlLexer_input_171] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_171] = ART_L_OcamlLexer_lor;
		artKindOfs[ART_L_OcamlLexer_input_171] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_171] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_171] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_171] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_173] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | . OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_173] = "";
		lhsL[ART_L_OcamlLexer_input_173] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_173] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_175] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl . | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_175] = "";
		lhsL[ART_L_OcamlLexer_input_175] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_175] = ART_L_OcamlLexer_lsl;
		artKindOfs[ART_L_OcamlLexer_input_175] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_175] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_175] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_175] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_177] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | . OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_177] = "";
		lhsL[ART_L_OcamlLexer_input_177] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_177] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_179] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr . | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_179] = "";
		lhsL[ART_L_OcamlLexer_input_179] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_179] = ART_L_OcamlLexer_lsr;
		artKindOfs[ART_L_OcamlLexer_input_179] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_179] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_179] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_179] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_181] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | . OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_181] = "";
		lhsL[ART_L_OcamlLexer_input_181] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_181] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_183] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor . | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_183] = "";
		lhsL[ART_L_OcamlLexer_input_183] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_183] = ART_L_OcamlLexer_lxor;
		artKindOfs[ART_L_OcamlLexer_input_183] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_183] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_183] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_183] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_185] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | . OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_185] = "";
		lhsL[ART_L_OcamlLexer_input_185] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_185] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_187] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match . | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_187] = "";
		lhsL[ART_L_OcamlLexer_input_187] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_187] = ART_L_OcamlLexer_match;
		artKindOfs[ART_L_OcamlLexer_input_187] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_187] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_187] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_187] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_189] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | . OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_189] = "";
		lhsL[ART_L_OcamlLexer_input_189] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_189] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_191] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method . | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_191] = "";
		lhsL[ART_L_OcamlLexer_input_191] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_191] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_input_191] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_191] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_191] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_191] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_193] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | . OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_193] = "";
		lhsL[ART_L_OcamlLexer_input_193] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_193] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_195] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod . | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_195] = "";
		lhsL[ART_L_OcamlLexer_input_195] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_195] = ART_L_OcamlLexer_mod;
		artKindOfs[ART_L_OcamlLexer_input_195] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_195] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_195] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_195] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_197] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | . OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_197] = "";
		lhsL[ART_L_OcamlLexer_input_197] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_197] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_199] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module . | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_199] = "";
		lhsL[ART_L_OcamlLexer_input_199] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_199] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_input_199] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_199] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_199] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_199] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_201] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | . OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_201] = "";
		lhsL[ART_L_OcamlLexer_input_201] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_201] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_203] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable . | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_203] = "";
		lhsL[ART_L_OcamlLexer_input_203] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_203] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_input_203] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_203] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_203] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_203] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_205] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | . OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_205] = "";
		lhsL[ART_L_OcamlLexer_input_205] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_205] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_207] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new . | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_207] = "";
		lhsL[ART_L_OcamlLexer_input_207] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_207] = ART_L_OcamlLexer_new;
		artKindOfs[ART_L_OcamlLexer_input_207] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_207] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_207] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_207] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_209] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | . OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_209] = "";
		lhsL[ART_L_OcamlLexer_input_209] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_209] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_211] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object . | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_211] = "";
		lhsL[ART_L_OcamlLexer_input_211] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_211] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_input_211] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_211] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_211] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_211] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_213] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | . OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_213] = "";
		lhsL[ART_L_OcamlLexer_input_213] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_213] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_215] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of . | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_215] = "";
		lhsL[ART_L_OcamlLexer_input_215] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_215] = ART_L_OcamlLexer_of;
		artKindOfs[ART_L_OcamlLexer_input_215] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_215] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_215] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_215] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_217] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | . OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_217] = "";
		lhsL[ART_L_OcamlLexer_input_217] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_217] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_219] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open . | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_219] = "";
		lhsL[ART_L_OcamlLexer_input_219] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_219] = ART_L_OcamlLexer_open;
		artKindOfs[ART_L_OcamlLexer_input_219] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_219] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_219] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_219] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_221] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | . OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_221] = "";
		lhsL[ART_L_OcamlLexer_input_221] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_221] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_223] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or . | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_223] = "";
		lhsL[ART_L_OcamlLexer_input_223] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_223] = ART_L_OcamlLexer_or;
		artKindOfs[ART_L_OcamlLexer_input_223] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_223] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_223] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_223] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_225] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | . OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_225] = "";
		lhsL[ART_L_OcamlLexer_input_225] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_225] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_227] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private . | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_227] = "";
		lhsL[ART_L_OcamlLexer_input_227] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_227] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_input_227] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_227] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_227] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_227] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_229] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | . OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_229] = "";
		lhsL[ART_L_OcamlLexer_input_229] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_229] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_231] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec . | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_231] = "";
		lhsL[ART_L_OcamlLexer_input_231] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_231] = ART_L_OcamlLexer_rec;
		artKindOfs[ART_L_OcamlLexer_input_231] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_231] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_231] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_231] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_233] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | . OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_233] = "";
		lhsL[ART_L_OcamlLexer_input_233] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_233] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_235] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig . | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_235] = "";
		lhsL[ART_L_OcamlLexer_input_235] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_235] = ART_L_OcamlLexer_sig;
		artKindOfs[ART_L_OcamlLexer_input_235] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_235] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_235] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_235] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_237] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | . OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_237] = "";
		lhsL[ART_L_OcamlLexer_input_237] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_237] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_239] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct . | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_239] = "";
		lhsL[ART_L_OcamlLexer_input_239] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_239] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_input_239] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_239] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_239] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_239] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_241] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | . OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_241] = "";
		lhsL[ART_L_OcamlLexer_input_241] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_241] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_243] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then . | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_243] = "";
		lhsL[ART_L_OcamlLexer_input_243] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_243] = ART_L_OcamlLexer_then;
		artKindOfs[ART_L_OcamlLexer_input_243] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_243] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_243] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_243] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_245] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | . OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_245] = "";
		lhsL[ART_L_OcamlLexer_input_245] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_245] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_247] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to . | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_247] = "";
		lhsL[ART_L_OcamlLexer_input_247] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_247] = ART_L_OcamlLexer_to;
		artKindOfs[ART_L_OcamlLexer_input_247] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_247] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_247] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_247] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_249] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | . OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_249] = "";
		lhsL[ART_L_OcamlLexer_input_249] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_249] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_251] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true . | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_251] = "";
		lhsL[ART_L_OcamlLexer_input_251] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_251] = ART_L_OcamlLexer_true;
		artKindOfs[ART_L_OcamlLexer_input_251] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_251] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_251] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_251] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_253] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | . OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_253] = "";
		lhsL[ART_L_OcamlLexer_input_253] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_253] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_255] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try . | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_255] = "";
		lhsL[ART_L_OcamlLexer_input_255] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_255] = ART_L_OcamlLexer_try;
		artKindOfs[ART_L_OcamlLexer_input_255] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_255] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_255] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_255] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_257] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | . OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_257] = "";
		lhsL[ART_L_OcamlLexer_input_257] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_257] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_259] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type . | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_259] = "";
		lhsL[ART_L_OcamlLexer_input_259] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_259] = ART_L_OcamlLexer_type;
		artKindOfs[ART_L_OcamlLexer_input_259] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_259] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_259] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_259] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_261] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | . OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_261] = "";
		lhsL[ART_L_OcamlLexer_input_261] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_261] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_263] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val . | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_263] = "";
		lhsL[ART_L_OcamlLexer_input_263] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_263] = ART_L_OcamlLexer_val;
		artKindOfs[ART_L_OcamlLexer_input_263] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_263] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_263] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_263] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_265] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | . OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_265] = "";
		lhsL[ART_L_OcamlLexer_input_265] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_265] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_267] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual . | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_267] = "";
		lhsL[ART_L_OcamlLexer_input_267] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_267] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_input_267] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_267] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_267] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_267] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_269] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | . OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_269] = "";
		lhsL[ART_L_OcamlLexer_input_269] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_269] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_271] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when . | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_271] = "";
		lhsL[ART_L_OcamlLexer_input_271] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_271] = ART_L_OcamlLexer_when;
		artKindOfs[ART_L_OcamlLexer_input_271] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_271] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_271] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_271] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_273] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | . OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_273] = "";
		lhsL[ART_L_OcamlLexer_input_273] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_273] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_275] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while . | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_275] = "";
		lhsL[ART_L_OcamlLexer_input_275] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_275] = ART_L_OcamlLexer_while;
		artKindOfs[ART_L_OcamlLexer_input_275] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_275] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_275] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_275] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_277] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | . OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_277] = "";
		lhsL[ART_L_OcamlLexer_input_277] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_277] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_279] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with . | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_279] = "";
		lhsL[ART_L_OcamlLexer_input_279] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_279] = ART_L_OcamlLexer_with;
		artKindOfs[ART_L_OcamlLexer_input_279] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_279] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_279] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_279] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_281] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | . OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_281] = "";
		lhsL[ART_L_OcamlLexer_input_281] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_281] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_283] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals . | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_283] = "";
		lhsL[ART_L_OcamlLexer_input_283] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_283] = ART_L_OcamlLexer_bangequals;
		artKindOfs[ART_L_OcamlLexer_input_283] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_283] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_283] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_283] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_285] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | . OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_285] = "";
		lhsL[ART_L_OcamlLexer_input_285] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_285] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_287] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash . | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_287] = "";
		lhsL[ART_L_OcamlLexer_input_287] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_287] = ART_L_OcamlLexer_hash;
		artKindOfs[ART_L_OcamlLexer_input_287] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_287] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_287] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_287] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_289] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | . OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_289] = "";
		lhsL[ART_L_OcamlLexer_input_289] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_289] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_291] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper . | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_291] = "";
		lhsL[ART_L_OcamlLexer_input_291] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_291] = ART_L_OcamlLexer_amper;
		artKindOfs[ART_L_OcamlLexer_input_291] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_291] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_291] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_291] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_293] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | . OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_293] = "";
		lhsL[ART_L_OcamlLexer_input_293] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_293] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_295] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper . | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_295] = "";
		lhsL[ART_L_OcamlLexer_input_295] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_295] = ART_L_OcamlLexer_amperamper;
		artKindOfs[ART_L_OcamlLexer_input_295] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_295] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_295] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_295] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_297] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | . OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_297] = "";
		lhsL[ART_L_OcamlLexer_input_297] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_297] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_299] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote . | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_299] = "";
		lhsL[ART_L_OcamlLexer_input_299] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_299] = ART_L_OcamlLexer_squote;
		artKindOfs[ART_L_OcamlLexer_input_299] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_299] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_299] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_299] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_301] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | . OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_301] = "";
		lhsL[ART_L_OcamlLexer_input_301] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_301] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_303] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen . | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_303] = "";
		lhsL[ART_L_OcamlLexer_input_303] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_303] = ART_L_OcamlLexer_lparen;
		artKindOfs[ART_L_OcamlLexer_input_303] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_303] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_303] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_303] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_305] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | . OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_305] = "";
		lhsL[ART_L_OcamlLexer_input_305] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_305] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_307] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen . | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_307] = "";
		lhsL[ART_L_OcamlLexer_input_307] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_307] = ART_L_OcamlLexer_rparen;
		artKindOfs[ART_L_OcamlLexer_input_307] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_307] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_307] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_307] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_309] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | . OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_309] = "";
		lhsL[ART_L_OcamlLexer_input_309] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_309] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_311] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star . | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_311] = "";
		lhsL[ART_L_OcamlLexer_input_311] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_311] = ART_L_OcamlLexer_star;
		artKindOfs[ART_L_OcamlLexer_input_311] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_311] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_311] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_311] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_313] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | . OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_313] = "";
		lhsL[ART_L_OcamlLexer_input_313] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_313] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_315] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus . | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_315] = "";
		lhsL[ART_L_OcamlLexer_input_315] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_315] = ART_L_OcamlLexer_plus;
		artKindOfs[ART_L_OcamlLexer_input_315] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_315] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_315] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_315] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_317] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | . OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_317] = "";
		lhsL[ART_L_OcamlLexer_input_317] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_317] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_319] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma . | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_319] = "";
		lhsL[ART_L_OcamlLexer_input_319] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_319] = ART_L_OcamlLexer_comma;
		artKindOfs[ART_L_OcamlLexer_input_319] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_319] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_319] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_319] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_321] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | . OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_321] = "";
		lhsL[ART_L_OcamlLexer_input_321] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_321] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_323] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen . | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_323] = "";
		lhsL[ART_L_OcamlLexer_input_323] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_323] = ART_L_OcamlLexer_hyphen;
		artKindOfs[ART_L_OcamlLexer_input_323] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_323] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_323] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_323] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_325] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | . OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_325] = "";
		lhsL[ART_L_OcamlLexer_input_325] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_325] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_327] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot . | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_327] = "";
		lhsL[ART_L_OcamlLexer_input_327] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_327] = ART_L_OcamlLexer_hyphendot;
		artKindOfs[ART_L_OcamlLexer_input_327] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_327] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_327] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_327] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_329] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | . OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_329] = "";
		lhsL[ART_L_OcamlLexer_input_329] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_329] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_331] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater . | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_331] = "";
		lhsL[ART_L_OcamlLexer_input_331] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_331] = ART_L_OcamlLexer_hyphengreater;
		artKindOfs[ART_L_OcamlLexer_input_331] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_331] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_331] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_331] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_333] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | . OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_333] = "";
		lhsL[ART_L_OcamlLexer_input_333] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_333] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_335] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot . | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_335] = "";
		lhsL[ART_L_OcamlLexer_input_335] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_335] = ART_L_OcamlLexer_dot;
		artKindOfs[ART_L_OcamlLexer_input_335] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_335] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_335] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_335] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_337] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | . OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_337] = "";
		lhsL[ART_L_OcamlLexer_input_337] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_337] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_339] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot . | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_339] = "";
		lhsL[ART_L_OcamlLexer_input_339] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_339] = ART_L_OcamlLexer_dotdot;
		artKindOfs[ART_L_OcamlLexer_input_339] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_339] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_339] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_339] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_341] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | . OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_341] = "";
		lhsL[ART_L_OcamlLexer_input_341] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_341] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_343] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon . | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_343] = "";
		lhsL[ART_L_OcamlLexer_input_343] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_343] = ART_L_OcamlLexer_colon;
		artKindOfs[ART_L_OcamlLexer_input_343] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_343] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_343] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_343] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_345] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | . OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_345] = "";
		lhsL[ART_L_OcamlLexer_input_345] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_345] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_347] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon . | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_347] = "";
		lhsL[ART_L_OcamlLexer_input_347] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_347] = ART_L_OcamlLexer_coloncolon;
		artKindOfs[ART_L_OcamlLexer_input_347] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_347] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_347] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_347] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_349] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | . OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_349] = "";
		lhsL[ART_L_OcamlLexer_input_349] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_349] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_351] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals . | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_351] = "";
		lhsL[ART_L_OcamlLexer_input_351] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_351] = ART_L_OcamlLexer_colonequals;
		artKindOfs[ART_L_OcamlLexer_input_351] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_351] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_351] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_351] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_353] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | . OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_353] = "";
		lhsL[ART_L_OcamlLexer_input_353] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_353] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_355] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater . | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_355] = "";
		lhsL[ART_L_OcamlLexer_input_355] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_355] = ART_L_OcamlLexer_colongreater;
		artKindOfs[ART_L_OcamlLexer_input_355] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_355] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_355] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_355] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_357] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | . OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_357] = "";
		lhsL[ART_L_OcamlLexer_input_357] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_357] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_359] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi . | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_359] = "";
		lhsL[ART_L_OcamlLexer_input_359] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_359] = ART_L_OcamlLexer_semi;
		artKindOfs[ART_L_OcamlLexer_input_359] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_359] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_359] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_359] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_361] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | . OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_361] = "";
		lhsL[ART_L_OcamlLexer_input_361] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_361] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_363] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi . | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_363] = "";
		lhsL[ART_L_OcamlLexer_input_363] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_363] = ART_L_OcamlLexer_semisemi;
		artKindOfs[ART_L_OcamlLexer_input_363] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_363] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_363] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_363] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_365] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | . OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_365] = "";
		lhsL[ART_L_OcamlLexer_input_365] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_365] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_367] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less . | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_367] = "";
		lhsL[ART_L_OcamlLexer_input_367] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_367] = ART_L_OcamlLexer_less;
		artKindOfs[ART_L_OcamlLexer_input_367] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_367] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_367] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_367] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_369] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | . OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_369] = "";
		lhsL[ART_L_OcamlLexer_input_369] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_369] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_371] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen . | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_371] = "";
		lhsL[ART_L_OcamlLexer_input_371] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_371] = ART_L_OcamlLexer_lesshyphen;
		artKindOfs[ART_L_OcamlLexer_input_371] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_371] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_371] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_371] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_373] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | . OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_373] = "";
		lhsL[ART_L_OcamlLexer_input_373] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_373] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_375] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal . | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_375] = "";
		lhsL[ART_L_OcamlLexer_input_375] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_375] = ART_L_OcamlLexer_equal;
		artKindOfs[ART_L_OcamlLexer_input_375] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_375] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_375] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_375] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_377] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | . OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_377] = "";
		lhsL[ART_L_OcamlLexer_input_377] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_377] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_379] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater . | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_379] = "";
		lhsL[ART_L_OcamlLexer_input_379] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_379] = ART_L_OcamlLexer_greater;
		artKindOfs[ART_L_OcamlLexer_input_379] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_379] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_379] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_379] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_381] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | . OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_381] = "";
		lhsL[ART_L_OcamlLexer_input_381] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_381] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_383] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket . | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_383] = "";
		lhsL[ART_L_OcamlLexer_input_383] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_383] = ART_L_OcamlLexer_greaterrbracket;
		artKindOfs[ART_L_OcamlLexer_input_383] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_383] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_383] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_383] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_385] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | . OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_385] = "";
		lhsL[ART_L_OcamlLexer_input_385] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_385] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_387] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace . | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_387] = "";
		lhsL[ART_L_OcamlLexer_input_387] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_387] = ART_L_OcamlLexer_greaterrbrace;
		artKindOfs[ART_L_OcamlLexer_input_387] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_387] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_387] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_387] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_389] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | . OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_389] = "";
		lhsL[ART_L_OcamlLexer_input_389] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_389] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_391] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question . | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_391] = "";
		lhsL[ART_L_OcamlLexer_input_391] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_391] = ART_L_OcamlLexer_question;
		artKindOfs[ART_L_OcamlLexer_input_391] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_391] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_391] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_391] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_393] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | . OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_393] = "";
		lhsL[ART_L_OcamlLexer_input_393] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_393] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_395] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket . | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_395] = "";
		lhsL[ART_L_OcamlLexer_input_395] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_395] = ART_L_OcamlLexer_lbracket;
		artKindOfs[ART_L_OcamlLexer_input_395] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_395] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_395] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_395] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_397] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | . OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_397] = "";
		lhsL[ART_L_OcamlLexer_input_397] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_397] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_399] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless . | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_399] = "";
		lhsL[ART_L_OcamlLexer_input_399] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_399] = ART_L_OcamlLexer_lbracketless;
		artKindOfs[ART_L_OcamlLexer_input_399] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_399] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_399] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_399] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_401] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | . OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_401] = "";
		lhsL[ART_L_OcamlLexer_input_401] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_401] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_403] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater . | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_403] = "";
		lhsL[ART_L_OcamlLexer_input_403] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_403] = ART_L_OcamlLexer_lbracketgreater;
		artKindOfs[ART_L_OcamlLexer_input_403] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_403] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_403] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_403] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_405] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | . OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_405] = "";
		lhsL[ART_L_OcamlLexer_input_405] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_405] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_407] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar . | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_407] = "";
		lhsL[ART_L_OcamlLexer_input_407] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_407] = ART_L_OcamlLexer_lbracketbar;
		artKindOfs[ART_L_OcamlLexer_input_407] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_407] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_407] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_407] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_409] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | . OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_409] = "";
		lhsL[ART_L_OcamlLexer_input_409] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_409] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_411] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket . | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_411] = "";
		lhsL[ART_L_OcamlLexer_input_411] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_411] = ART_L_OcamlLexer_rbracket;
		artKindOfs[ART_L_OcamlLexer_input_411] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_411] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_411] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_411] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_413] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | . OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_413] = "";
		lhsL[ART_L_OcamlLexer_input_413] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_413] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_415] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore . | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_415] = "";
		lhsL[ART_L_OcamlLexer_input_415] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_415] = ART_L_OcamlLexer_underscore;
		artKindOfs[ART_L_OcamlLexer_input_415] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_415] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_415] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_415] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_417] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | . OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_417] = "";
		lhsL[ART_L_OcamlLexer_input_417] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_417] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_419] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote . | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_419] = "";
		lhsL[ART_L_OcamlLexer_input_419] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_419] = ART_L_OcamlLexer_backquote;
		artKindOfs[ART_L_OcamlLexer_input_419] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_419] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_419] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_419] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_421] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | . OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_421] = "";
		lhsL[ART_L_OcamlLexer_input_421] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_421] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_423] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace . | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_423] = "";
		lhsL[ART_L_OcamlLexer_input_423] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_423] = ART_L_OcamlLexer_lbrace;
		artKindOfs[ART_L_OcamlLexer_input_423] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_423] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_423] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_423] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_425] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | . OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_425] = "";
		lhsL[ART_L_OcamlLexer_input_425] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_425] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_427] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless . | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_427] = "";
		lhsL[ART_L_OcamlLexer_input_427] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_427] = ART_L_OcamlLexer_lbraceless;
		artKindOfs[ART_L_OcamlLexer_input_427] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_427] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_427] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_427] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_429] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | . OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_429] = "";
		lhsL[ART_L_OcamlLexer_input_429] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_429] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_431] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar . | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_431] = "";
		lhsL[ART_L_OcamlLexer_input_431] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_431] = ART_L_OcamlLexer_bar;
		artKindOfs[ART_L_OcamlLexer_input_431] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_431] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_431] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_431] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_433] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | . OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_433] = "";
		lhsL[ART_L_OcamlLexer_input_433] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_433] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_435] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket . | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_435] = "";
		lhsL[ART_L_OcamlLexer_input_435] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_435] = ART_L_OcamlLexer_barrbracket;
		artKindOfs[ART_L_OcamlLexer_input_435] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_435] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_435] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_435] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_437] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | . OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_437] = "";
		lhsL[ART_L_OcamlLexer_input_437] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_437] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_439] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar . | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_439] = "";
		lhsL[ART_L_OcamlLexer_input_439] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_439] = ART_L_OcamlLexer_barbar;
		artKindOfs[ART_L_OcamlLexer_input_439] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_439] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_439] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_439] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_441] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | . OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_441] = "";
		lhsL[ART_L_OcamlLexer_input_441] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_441] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_443] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace . | OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_443] = "";
		lhsL[ART_L_OcamlLexer_input_443] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_443] = ART_L_OcamlLexer_rbrace;
		artKindOfs[ART_L_OcamlLexer_input_443] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_443] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_443] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_443] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_445] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | . OcamlLexer.tilde | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_445] = "";
		lhsL[ART_L_OcamlLexer_input_445] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_445] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_447] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde . | OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_447] = "";
		lhsL[ART_L_OcamlLexer_input_447] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_447] = ART_L_OcamlLexer_tilde;
		artKindOfs[ART_L_OcamlLexer_input_447] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_input_447] = ART_L_OcamlLexer_input_451;
		aL[ART_L_OcamlLexer_input_447] = ART_L_OcamlLexer_input_451;
		popD[ART_L_OcamlLexer_input_447] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_449] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | . OcamlLexer.linenum_directive )* ";
		artLabelStrings[ART_L_OcamlLexer_input_449] = "";
		lhsL[ART_L_OcamlLexer_input_449] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_449] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_input_451] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive . )* ";
		artLabelStrings[ART_L_OcamlLexer_input_451] = "";
		lhsL[ART_L_OcamlLexer_input_451] = ART_L_OcamlLexer_input;
		artSlotInstanceOfs[ART_L_OcamlLexer_input_451] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_input_451] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_input_451] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_input_452] = "OcamlLexer.input ::= ( OcamlLexer.ident | OcamlLexer.capitalized_ident | OcamlLexer.lowercase_ident | OcamlLexer.comment | OcamlLexer.whitespace | OcamlLexer.integer_literal | OcamlLexer.float_literal | OcamlLexer.char_literal | OcamlLexer.string_literal | OcamlLexer.label | OcamlLexer.optlabel | OcamlLexer.infix_symbol | OcamlLexer.prefix_symbol | OcamlLexer.and | OcamlLexer.as | OcamlLexer.assert | OcamlLexer.asr | OcamlLexer.begin | OcamlLexer.class | OcamlLexer.constraint | OcamlLexer.do | OcamlLexer.done | OcamlLexer.downto | OcamlLexer.else | OcamlLexer.end | OcamlLexer.exception | OcamlLexer.external | OcamlLexer.false | OcamlLexer.for | OcamlLexer.fun | OcamlLexer.function | OcamlLexer.functor | OcamlLexer.if | OcamlLexer.in | OcamlLexer.include | OcamlLexer.inherit | OcamlLexer.initializer | OcamlLexer.land | OcamlLexer.lazy | OcamlLexer.let | OcamlLexer.lor | OcamlLexer.lsl | OcamlLexer.lsr | OcamlLexer.lxor | OcamlLexer.match | OcamlLexer.method | OcamlLexer.mod | OcamlLexer.module | OcamlLexer.mutable | OcamlLexer.new | OcamlLexer.object | OcamlLexer.of | OcamlLexer.open | OcamlLexer.or | OcamlLexer.private | OcamlLexer.rec | OcamlLexer.sig | OcamlLexer.struct | OcamlLexer.then | OcamlLexer.to | OcamlLexer.true | OcamlLexer.try | OcamlLexer.type | OcamlLexer.val | OcamlLexer.virtual | OcamlLexer.when | OcamlLexer.while | OcamlLexer.with | OcamlLexer.bangequals | OcamlLexer.hash | OcamlLexer.amper | OcamlLexer.amperamper | OcamlLexer.squote | OcamlLexer.lparen | OcamlLexer.rparen | OcamlLexer.star | OcamlLexer.plus | OcamlLexer.comma | OcamlLexer.hyphen | OcamlLexer.hyphendot | OcamlLexer.hyphengreater | OcamlLexer.dot | OcamlLexer.dotdot | OcamlLexer.colon | OcamlLexer.coloncolon | OcamlLexer.colonequals | OcamlLexer.colongreater | OcamlLexer.semi | OcamlLexer.semisemi | OcamlLexer.less | OcamlLexer.lesshyphen | OcamlLexer.equal | OcamlLexer.greater | OcamlLexer.greaterrbracket | OcamlLexer.greaterrbrace | OcamlLexer.question | OcamlLexer.lbracket | OcamlLexer.lbracketless | OcamlLexer.lbracketgreater | OcamlLexer.lbracketbar | OcamlLexer.rbracket | OcamlLexer.underscore | OcamlLexer.backquote | OcamlLexer.lbrace | OcamlLexer.lbraceless | OcamlLexer.bar | OcamlLexer.barrbracket | OcamlLexer.barbar | OcamlLexer.rbrace | OcamlLexer.tilde | OcamlLexer.linenum_directive )* . ";
		artLabelStrings[ART_L_OcamlLexer_input_452] = "";
		lhsL[ART_L_OcamlLexer_input_452] = ART_L_OcamlLexer_input;
		artKindOfs[ART_L_OcamlLexer_input_452] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_input_452] = true;
		eoR_pL[ART_L_OcamlLexer_input_452] = true;
		popD[ART_L_OcamlLexer_input_452] = true;
	}

	public void artTableInitialiser_163() {
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal] = "OcamlLexer.integer_literal ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal] = "integer_literal";
		artKindOfs[ART_L_OcamlLexer_integer_literal] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3811] = "OcamlLexer.integer_literal ::= . ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3811] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3811] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3811] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3815] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3815] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3815] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3815] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3816] = "OcamlLexer.integer_literal ::= ( `-. )? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3816] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3816] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3816] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3816] = ART_L_OcamlLexer_integer_literal_3817;
		eoOPL[ART_L_OcamlLexer_integer_literal_3816] = true;
		popD[ART_L_OcamlLexer_integer_literal_3816] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3817] = "OcamlLexer.integer_literal ::= ( `-)? . OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3817] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3817] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3817] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3819] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit . ( OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3819] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3819] = ART_L_OcamlLexer_integer_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_integer_literal_3819] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3819] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_integer_literal_3820] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3821] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3821] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3821] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3823] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( . OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3823] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3823] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3823] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3825] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit . | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3825] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3825] = ART_L_OcamlLexer_integer_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_integer_literal_3825] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3825] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3825] = ART_L_OcamlLexer_integer_literal_3829;
		aL[ART_L_OcamlLexer_integer_literal_3825] = ART_L_OcamlLexer_integer_literal_3829;
		popD[ART_L_OcamlLexer_integer_literal_3825] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3827] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | . `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3827] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3827] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3827] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3827] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3828] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3828] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3828] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3828] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3829] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_. )* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3829] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3829] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3829] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3829] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3830] = "OcamlLexer.integer_literal ::= ( `-)? OcamlLexer.dec_digit ( OcamlLexer.dec_digit | `_)* . ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3830] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3830] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3830] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_integer_literal_3830] = true;
		eoR_pL[ART_L_OcamlLexer_integer_literal_3830] = true;
		popD[ART_L_OcamlLexer_integer_literal_3830] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3832] = "OcamlLexer.integer_literal ::= . ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3832] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3832] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3832] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3836] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3836] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3836] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3836] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3837] = "OcamlLexer.integer_literal ::= ( `-. )? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3837] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3837] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3837] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3837] = ART_L_OcamlLexer_integer_literal_3838;
		eoOPL[ART_L_OcamlLexer_integer_literal_3837] = true;
		popD[ART_L_OcamlLexer_integer_literal_3837] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3838] = "OcamlLexer.integer_literal ::= ( `-)? . ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3838] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3838] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3838] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3840] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3840] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3840] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3842] = "OcamlLexer.integer_literal ::= ( `-)? ( . `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3842] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3842] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3842] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3842] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3843] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3843] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3843] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3843] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3844] = "OcamlLexer.integer_literal ::= ( `-)? ( `0. `x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3844] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3844] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3844] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3844] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3845] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3845] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3845] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3845] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3846] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x. | `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3846] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3846] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3846] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3846] = ART_L_OcamlLexer_integer_literal_3853;
		aL[ART_L_OcamlLexer_integer_literal_3846] = ART_L_OcamlLexer_integer_literal_3852;
		eoOPL[ART_L_OcamlLexer_integer_literal_3846] = true;
		popD[ART_L_OcamlLexer_integer_literal_3846] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3848] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| . `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3848] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3848] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3848] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3848] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3849] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3849] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3849] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3849] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3850] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0. `X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3850] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3850] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3850] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3850] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3851] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3851] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3851] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3851] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3852] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X. ) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3852] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3852] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3852] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3852] = ART_L_OcamlLexer_integer_literal_3853;
		eoOPL[ART_L_OcamlLexer_integer_literal_3852] = true;
		popD[ART_L_OcamlLexer_integer_literal_3852] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3853] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) . OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3853] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3853] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3853] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3855] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit . ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3855] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3855] = ART_L_OcamlLexer_integer_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_integer_literal_3855] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3855] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_integer_literal_3856] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3857] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3857] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3857] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3859] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( . OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3859] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3859] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3859] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3861] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit . | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3861] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3861] = ART_L_OcamlLexer_integer_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_integer_literal_3861] = ART_L_OcamlLexer_hex_digit;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3861] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3861] = ART_L_OcamlLexer_integer_literal_3865;
		aL[ART_L_OcamlLexer_integer_literal_3861] = ART_L_OcamlLexer_integer_literal_3865;
		popD[ART_L_OcamlLexer_integer_literal_3861] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3863] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | . `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3863] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3863] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3863] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3863] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3864] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3864] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3864] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3864] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3865] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_. )* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3865] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3865] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3865] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3865] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3866] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`x| `0`X) OcamlLexer.hex_digit ( OcamlLexer.hex_digit | `_)* . ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3866] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3866] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3866] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_integer_literal_3866] = true;
		eoR_pL[ART_L_OcamlLexer_integer_literal_3866] = true;
		popD[ART_L_OcamlLexer_integer_literal_3866] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3868] = "OcamlLexer.integer_literal ::= . ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3868] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3868] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3868] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3872] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3872] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3872] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3872] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3873] = "OcamlLexer.integer_literal ::= ( `-. )? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3873] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3873] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3873] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3873] = ART_L_OcamlLexer_integer_literal_3874;
		eoOPL[ART_L_OcamlLexer_integer_literal_3873] = true;
		popD[ART_L_OcamlLexer_integer_literal_3873] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3874] = "OcamlLexer.integer_literal ::= ( `-)? . ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3874] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3874] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3874] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3876] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3876] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3876] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3878] = "OcamlLexer.integer_literal ::= ( `-)? ( . `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3878] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3878] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3878] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3878] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3879] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3879] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3879] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3879] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3880] = "OcamlLexer.integer_literal ::= ( `-)? ( `0. `o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3880] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3880] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3880] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3880] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3881] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3881] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3881] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3881] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3882] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o. | `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3882] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3882] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3882] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3882] = ART_L_OcamlLexer_integer_literal_3889;
		aL[ART_L_OcamlLexer_integer_literal_3882] = ART_L_OcamlLexer_integer_literal_3888;
		eoOPL[ART_L_OcamlLexer_integer_literal_3882] = true;
		popD[ART_L_OcamlLexer_integer_literal_3882] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3884] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| . `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3884] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3884] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3884] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3884] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3885] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3885] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3885] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3885] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3886] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0. `O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3886] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3886] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3886] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3886] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3887] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3887] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3887] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3887] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3888] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O. ) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3888] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3888] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3888] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3888] = ART_L_OcamlLexer_integer_literal_3889;
		eoOPL[ART_L_OcamlLexer_integer_literal_3888] = true;
		popD[ART_L_OcamlLexer_integer_literal_3888] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3889] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) . OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3889] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3889] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3889] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3891] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit . ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3891] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3891] = ART_L_OcamlLexer_integer_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_integer_literal_3891] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3891] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_integer_literal_3892] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3893] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3893] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3893] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3895] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( . OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3895] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3895] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3895] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3897] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit . | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3897] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3897] = ART_L_OcamlLexer_integer_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_integer_literal_3897] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3897] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3897] = ART_L_OcamlLexer_integer_literal_3901;
		aL[ART_L_OcamlLexer_integer_literal_3897] = ART_L_OcamlLexer_integer_literal_3901;
		popD[ART_L_OcamlLexer_integer_literal_3897] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3899] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | . `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3899] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3899] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3899] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3899] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3900] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3900] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3900] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3900] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3901] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_. )* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3901] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3901] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3901] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3901] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3902] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`o| `0`O) OcamlLexer.oct_digit ( OcamlLexer.oct_digit | `_)* . ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3902] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3902] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3902] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_integer_literal_3902] = true;
		eoR_pL[ART_L_OcamlLexer_integer_literal_3902] = true;
		popD[ART_L_OcamlLexer_integer_literal_3902] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3904] = "OcamlLexer.integer_literal ::= . ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3904] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3904] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3904] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3908] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3908] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3908] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3908] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3909] = "OcamlLexer.integer_literal ::= ( `-. )? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3909] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3909] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3909] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3909] = ART_L_OcamlLexer_integer_literal_3910;
		eoOPL[ART_L_OcamlLexer_integer_literal_3909] = true;
		popD[ART_L_OcamlLexer_integer_literal_3909] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3910] = "OcamlLexer.integer_literal ::= ( `-)? . ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3910] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3910] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3910] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3912] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3912] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3912] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3914] = "OcamlLexer.integer_literal ::= ( `-)? ( . `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3914] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3914] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3914] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3914] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3915] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3915] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3915] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3915] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3916] = "OcamlLexer.integer_literal ::= ( `-)? ( `0. `b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3916] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3916] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3916] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3916] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3917] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3917] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3917] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3917] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3918] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b. | `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3918] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3918] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3918] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3918] = ART_L_OcamlLexer_integer_literal_3925;
		aL[ART_L_OcamlLexer_integer_literal_3918] = ART_L_OcamlLexer_integer_literal_3924;
		eoOPL[ART_L_OcamlLexer_integer_literal_3918] = true;
		popD[ART_L_OcamlLexer_integer_literal_3918] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3920] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| . `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3920] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3920] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3920] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3920] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3921] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3921] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3921] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3921] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3922] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0. `B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3922] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3922] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3922] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3922] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3923] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3923] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3923] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3923] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3924] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B. ) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3924] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3924] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3924] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3924] = ART_L_OcamlLexer_integer_literal_3925;
		eoOPL[ART_L_OcamlLexer_integer_literal_3924] = true;
		popD[ART_L_OcamlLexer_integer_literal_3924] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3925] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) . ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3925] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3925] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3925] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3927] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3927] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3927] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3929] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( . `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3929] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3929] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3929] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3929] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3930] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3930] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3930] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3930] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3931] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0. | `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3931] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3931] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3931] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3931] = ART_L_OcamlLexer_integer_literal_3936;
		aL[ART_L_OcamlLexer_integer_literal_3931] = ART_L_OcamlLexer_integer_literal_3935;
		eoOPL[ART_L_OcamlLexer_integer_literal_3931] = true;
		popD[ART_L_OcamlLexer_integer_literal_3931] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3933] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| . `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3933] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3933] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3933] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3933] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3934] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3934] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3934] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3934] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3935] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1. ) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3935] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3935] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3935] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3935] = ART_L_OcamlLexer_integer_literal_3936;
		eoOPL[ART_L_OcamlLexer_integer_literal_3935] = true;
		popD[ART_L_OcamlLexer_integer_literal_3935] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3936] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) . ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3936] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3936] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3936] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_integer_literal_3937] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3938] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3938] = "";
		lhsL[ART_A_OcamlLexer_integer_literal_3938] = ART_L_OcamlLexer_integer_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3940] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( . `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3940] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3940] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3940] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3940] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3941] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3941] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3941] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3941] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3942] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0. | `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3942] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3942] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3942] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3942] = ART_L_OcamlLexer_integer_literal_3950;
		aL[ART_L_OcamlLexer_integer_literal_3942] = ART_L_OcamlLexer_integer_literal_3950;
		popD[ART_L_OcamlLexer_integer_literal_3942] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3944] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| . `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3944] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3944] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3944] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3944] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3945] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3945] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3945] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3945] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3946] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1. | `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3946] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3946] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3946] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_integer_literal_3946] = ART_L_OcamlLexer_integer_literal_3950;
		aL[ART_L_OcamlLexer_integer_literal_3946] = ART_L_OcamlLexer_integer_literal_3950;
		popD[ART_L_OcamlLexer_integer_literal_3946] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3948] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| . `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3948] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3948] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3948] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3948] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3949] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3949] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3949] = ART_L_OcamlLexer_integer_literal;
		popD[ART_L_OcamlLexer_integer_literal_3949] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3950] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_. )* ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3950] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3950] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3950] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_integer_literal_3950] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_integer_literal_3951] = "OcamlLexer.integer_literal ::= ( `-)? ( `0`b| `0`B) ( `0| `1) ( `0| `1| `_)* . ";
		artLabelStrings[ART_L_OcamlLexer_integer_literal_3951] = "";
		lhsL[ART_L_OcamlLexer_integer_literal_3951] = ART_L_OcamlLexer_integer_literal;
		artKindOfs[ART_L_OcamlLexer_integer_literal_3951] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_integer_literal_3951] = true;
		eoR_pL[ART_L_OcamlLexer_integer_literal_3951] = true;
		popD[ART_L_OcamlLexer_integer_literal_3951] = true;
	}

	public void artTableInitialiser_164() {
		artLabelInternalStrings[ART_L_OcamlLexer_label] = "OcamlLexer.label ";
		artLabelStrings[ART_L_OcamlLexer_label] = "label";
		artKindOfs[ART_L_OcamlLexer_label] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_label_5110] = "OcamlLexer.label ::= . `~OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_label_5110] = "";
		lhsL[ART_L_OcamlLexer_label_5110] = ART_L_OcamlLexer_label;
		artKindOfs[ART_L_OcamlLexer_label_5110] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_label_5111] = "OcamlLexer.label ::= `~OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_label_5111] = "";
		lhsL[ART_L_OcamlLexer_label_5111] = ART_L_OcamlLexer_label;
		artLabelInternalStrings[ART_L_OcamlLexer_label_5112] = "OcamlLexer.label ::= `~. OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_label_5112] = "";
		lhsL[ART_L_OcamlLexer_label_5112] = ART_L_OcamlLexer_label;
		artKindOfs[ART_L_OcamlLexer_label_5112] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_label_5112] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_label_5114] = "OcamlLexer.label ::= `~OcamlLexer.label_name . `:";
		artLabelStrings[ART_L_OcamlLexer_label_5114] = "";
		lhsL[ART_L_OcamlLexer_label_5114] = ART_L_OcamlLexer_label;
		artSlotInstanceOfs[ART_L_OcamlLexer_label_5114] = ART_L_OcamlLexer_label_name;
		artKindOfs[ART_L_OcamlLexer_label_5114] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_label_5114] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_label_5115] = "OcamlLexer.label ::= `~OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_label_5115] = "";
		lhsL[ART_L_OcamlLexer_label_5115] = ART_L_OcamlLexer_label;
		popD[ART_L_OcamlLexer_label_5115] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_label_5116] = "OcamlLexer.label ::= `~OcamlLexer.label_name `:. ";
		artLabelStrings[ART_L_OcamlLexer_label_5116] = "";
		lhsL[ART_L_OcamlLexer_label_5116] = ART_L_OcamlLexer_label;
		artKindOfs[ART_L_OcamlLexer_label_5116] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_label_5116] = true;
		eoR_pL[ART_L_OcamlLexer_label_5116] = true;
		popD[ART_L_OcamlLexer_label_5116] = true;
	}

	public void artTableInitialiser_165() {
		artLabelInternalStrings[ART_L_OcamlLexer_label_name] = "OcamlLexer.label_name ";
		artLabelStrings[ART_L_OcamlLexer_label_name] = "label_name";
		artKindOfs[ART_L_OcamlLexer_label_name] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_label_name_5105] = "OcamlLexer.label_name ::= . OcamlLexer.lowercase_ident ";
		artLabelStrings[ART_L_OcamlLexer_label_name_5105] = "";
		lhsL[ART_L_OcamlLexer_label_name_5105] = ART_L_OcamlLexer_label_name;
		artKindOfs[ART_L_OcamlLexer_label_name_5105] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_label_name_5107] = "OcamlLexer.label_name ::= OcamlLexer.lowercase_ident . ";
		artLabelStrings[ART_L_OcamlLexer_label_name_5107] = "";
		lhsL[ART_L_OcamlLexer_label_name_5107] = ART_L_OcamlLexer_label_name;
		artSlotInstanceOfs[ART_L_OcamlLexer_label_name_5107] = ART_L_OcamlLexer_lowercase_ident;
		artKindOfs[ART_L_OcamlLexer_label_name_5107] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_label_name_5107] = true;
		eoR_pL[ART_L_OcamlLexer_label_name_5107] = true;
		popD[ART_L_OcamlLexer_label_name_5107] = true;
	}

	public void artTableInitialiser_166() {
		artLabelInternalStrings[ART_L_OcamlLexer_land] = "OcamlLexer.land ";
		artLabelStrings[ART_L_OcamlLexer_land] = "land";
		artKindOfs[ART_L_OcamlLexer_land] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_land_777] = "OcamlLexer.land ::= . `l`a`n`d";
		artLabelStrings[ART_L_OcamlLexer_land_777] = "";
		lhsL[ART_L_OcamlLexer_land_777] = ART_L_OcamlLexer_land;
		artKindOfs[ART_L_OcamlLexer_land_777] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_land_777] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_778] = "OcamlLexer.land ::= `l`a`n`d";
		artLabelStrings[ART_L_OcamlLexer_land_778] = "";
		lhsL[ART_L_OcamlLexer_land_778] = ART_L_OcamlLexer_land;
		popD[ART_L_OcamlLexer_land_778] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_779] = "OcamlLexer.land ::= `l. `a`n`d";
		artLabelStrings[ART_L_OcamlLexer_land_779] = "";
		lhsL[ART_L_OcamlLexer_land_779] = ART_L_OcamlLexer_land;
		artKindOfs[ART_L_OcamlLexer_land_779] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_land_779] = true;
		popD[ART_L_OcamlLexer_land_779] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_780] = "OcamlLexer.land ::= `l`a`n`d";
		artLabelStrings[ART_L_OcamlLexer_land_780] = "";
		lhsL[ART_L_OcamlLexer_land_780] = ART_L_OcamlLexer_land;
		popD[ART_L_OcamlLexer_land_780] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_781] = "OcamlLexer.land ::= `l`a. `n`d";
		artLabelStrings[ART_L_OcamlLexer_land_781] = "";
		lhsL[ART_L_OcamlLexer_land_781] = ART_L_OcamlLexer_land;
		artKindOfs[ART_L_OcamlLexer_land_781] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_land_781] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_782] = "OcamlLexer.land ::= `l`a`n`d";
		artLabelStrings[ART_L_OcamlLexer_land_782] = "";
		lhsL[ART_L_OcamlLexer_land_782] = ART_L_OcamlLexer_land;
		popD[ART_L_OcamlLexer_land_782] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_783] = "OcamlLexer.land ::= `l`a`n. `d";
		artLabelStrings[ART_L_OcamlLexer_land_783] = "";
		lhsL[ART_L_OcamlLexer_land_783] = ART_L_OcamlLexer_land;
		artKindOfs[ART_L_OcamlLexer_land_783] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_land_783] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_784] = "OcamlLexer.land ::= `l`a`n`d";
		artLabelStrings[ART_L_OcamlLexer_land_784] = "";
		lhsL[ART_L_OcamlLexer_land_784] = ART_L_OcamlLexer_land;
		popD[ART_L_OcamlLexer_land_784] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_land_785] = "OcamlLexer.land ::= `l`a`n`d. ";
		artLabelStrings[ART_L_OcamlLexer_land_785] = "";
		lhsL[ART_L_OcamlLexer_land_785] = ART_L_OcamlLexer_land;
		artKindOfs[ART_L_OcamlLexer_land_785] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_land_785] = true;
		eoR_pL[ART_L_OcamlLexer_land_785] = true;
		popD[ART_L_OcamlLexer_land_785] = true;
	}

	public void artTableInitialiser_167() {
		artLabelInternalStrings[ART_L_OcamlLexer_lazy] = "OcamlLexer.lazy ";
		artLabelStrings[ART_L_OcamlLexer_lazy] = "lazy";
		artKindOfs[ART_L_OcamlLexer_lazy] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_788] = "OcamlLexer.lazy ::= . `l`a`z`y";
		artLabelStrings[ART_L_OcamlLexer_lazy_788] = "";
		lhsL[ART_L_OcamlLexer_lazy_788] = ART_L_OcamlLexer_lazy;
		artKindOfs[ART_L_OcamlLexer_lazy_788] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lazy_788] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_789] = "OcamlLexer.lazy ::= `l`a`z`y";
		artLabelStrings[ART_L_OcamlLexer_lazy_789] = "";
		lhsL[ART_L_OcamlLexer_lazy_789] = ART_L_OcamlLexer_lazy;
		popD[ART_L_OcamlLexer_lazy_789] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_790] = "OcamlLexer.lazy ::= `l. `a`z`y";
		artLabelStrings[ART_L_OcamlLexer_lazy_790] = "";
		lhsL[ART_L_OcamlLexer_lazy_790] = ART_L_OcamlLexer_lazy;
		artKindOfs[ART_L_OcamlLexer_lazy_790] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lazy_790] = true;
		popD[ART_L_OcamlLexer_lazy_790] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_791] = "OcamlLexer.lazy ::= `l`a`z`y";
		artLabelStrings[ART_L_OcamlLexer_lazy_791] = "";
		lhsL[ART_L_OcamlLexer_lazy_791] = ART_L_OcamlLexer_lazy;
		popD[ART_L_OcamlLexer_lazy_791] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_792] = "OcamlLexer.lazy ::= `l`a. `z`y";
		artLabelStrings[ART_L_OcamlLexer_lazy_792] = "";
		lhsL[ART_L_OcamlLexer_lazy_792] = ART_L_OcamlLexer_lazy;
		artKindOfs[ART_L_OcamlLexer_lazy_792] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lazy_792] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_793] = "OcamlLexer.lazy ::= `l`a`z`y";
		artLabelStrings[ART_L_OcamlLexer_lazy_793] = "";
		lhsL[ART_L_OcamlLexer_lazy_793] = ART_L_OcamlLexer_lazy;
		popD[ART_L_OcamlLexer_lazy_793] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_794] = "OcamlLexer.lazy ::= `l`a`z. `y";
		artLabelStrings[ART_L_OcamlLexer_lazy_794] = "";
		lhsL[ART_L_OcamlLexer_lazy_794] = ART_L_OcamlLexer_lazy;
		artKindOfs[ART_L_OcamlLexer_lazy_794] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lazy_794] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_795] = "OcamlLexer.lazy ::= `l`a`z`y";
		artLabelStrings[ART_L_OcamlLexer_lazy_795] = "";
		lhsL[ART_L_OcamlLexer_lazy_795] = ART_L_OcamlLexer_lazy;
		popD[ART_L_OcamlLexer_lazy_795] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lazy_796] = "OcamlLexer.lazy ::= `l`a`z`y. ";
		artLabelStrings[ART_L_OcamlLexer_lazy_796] = "";
		lhsL[ART_L_OcamlLexer_lazy_796] = ART_L_OcamlLexer_lazy;
		artKindOfs[ART_L_OcamlLexer_lazy_796] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lazy_796] = true;
		eoR_pL[ART_L_OcamlLexer_lazy_796] = true;
		popD[ART_L_OcamlLexer_lazy_796] = true;
	}

	public void artTableInitialiser_168() {
		artLabelInternalStrings[ART_L_OcamlLexer_lbrace] = "OcamlLexer.lbrace ";
		artLabelStrings[ART_L_OcamlLexer_lbrace] = "lbrace";
		artKindOfs[ART_L_OcamlLexer_lbrace] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lbrace_1329] = "OcamlLexer.lbrace ::= . `{";
		artLabelStrings[ART_L_OcamlLexer_lbrace_1329] = "";
		lhsL[ART_L_OcamlLexer_lbrace_1329] = ART_L_OcamlLexer_lbrace;
		artKindOfs[ART_L_OcamlLexer_lbrace_1329] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lbrace_1329] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbrace_1330] = "OcamlLexer.lbrace ::= `{";
		artLabelStrings[ART_L_OcamlLexer_lbrace_1330] = "";
		lhsL[ART_L_OcamlLexer_lbrace_1330] = ART_L_OcamlLexer_lbrace;
		popD[ART_L_OcamlLexer_lbrace_1330] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbrace_1331] = "OcamlLexer.lbrace ::= `{. ";
		artLabelStrings[ART_L_OcamlLexer_lbrace_1331] = "";
		lhsL[ART_L_OcamlLexer_lbrace_1331] = ART_L_OcamlLexer_lbrace;
		artKindOfs[ART_L_OcamlLexer_lbrace_1331] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lbrace_1331] = true;
		eoR_pL[ART_L_OcamlLexer_lbrace_1331] = true;
		popD[ART_L_OcamlLexer_lbrace_1331] = true;
	}

	public void artTableInitialiser_169() {
		artLabelInternalStrings[ART_L_OcamlLexer_lbraceless] = "OcamlLexer.lbraceless ";
		artLabelStrings[ART_L_OcamlLexer_lbraceless] = "lbraceless";
		artKindOfs[ART_L_OcamlLexer_lbraceless] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lbraceless_1334] = "OcamlLexer.lbraceless ::= . `{`<";
		artLabelStrings[ART_L_OcamlLexer_lbraceless_1334] = "";
		lhsL[ART_L_OcamlLexer_lbraceless_1334] = ART_L_OcamlLexer_lbraceless;
		artKindOfs[ART_L_OcamlLexer_lbraceless_1334] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lbraceless_1334] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbraceless_1335] = "OcamlLexer.lbraceless ::= `{`<";
		artLabelStrings[ART_L_OcamlLexer_lbraceless_1335] = "";
		lhsL[ART_L_OcamlLexer_lbraceless_1335] = ART_L_OcamlLexer_lbraceless;
		popD[ART_L_OcamlLexer_lbraceless_1335] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbraceless_1336] = "OcamlLexer.lbraceless ::= `{. `<";
		artLabelStrings[ART_L_OcamlLexer_lbraceless_1336] = "";
		lhsL[ART_L_OcamlLexer_lbraceless_1336] = ART_L_OcamlLexer_lbraceless;
		artKindOfs[ART_L_OcamlLexer_lbraceless_1336] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lbraceless_1336] = true;
		popD[ART_L_OcamlLexer_lbraceless_1336] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbraceless_1337] = "OcamlLexer.lbraceless ::= `{`<";
		artLabelStrings[ART_L_OcamlLexer_lbraceless_1337] = "";
		lhsL[ART_L_OcamlLexer_lbraceless_1337] = ART_L_OcamlLexer_lbraceless;
		popD[ART_L_OcamlLexer_lbraceless_1337] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbraceless_1338] = "OcamlLexer.lbraceless ::= `{`<. ";
		artLabelStrings[ART_L_OcamlLexer_lbraceless_1338] = "";
		lhsL[ART_L_OcamlLexer_lbraceless_1338] = ART_L_OcamlLexer_lbraceless;
		artKindOfs[ART_L_OcamlLexer_lbraceless_1338] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lbraceless_1338] = true;
		eoR_pL[ART_L_OcamlLexer_lbraceless_1338] = true;
		popD[ART_L_OcamlLexer_lbraceless_1338] = true;
	}

	public void artTableInitialiser_170() {
		artLabelInternalStrings[ART_L_OcamlLexer_lbracket] = "OcamlLexer.lbracket ";
		artLabelStrings[ART_L_OcamlLexer_lbracket] = "lbracket";
		artKindOfs[ART_L_OcamlLexer_lbracket] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracket_1288] = "OcamlLexer.lbracket ::= . `[";
		artLabelStrings[ART_L_OcamlLexer_lbracket_1288] = "";
		lhsL[ART_L_OcamlLexer_lbracket_1288] = ART_L_OcamlLexer_lbracket;
		artKindOfs[ART_L_OcamlLexer_lbracket_1288] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lbracket_1288] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracket_1289] = "OcamlLexer.lbracket ::= `[";
		artLabelStrings[ART_L_OcamlLexer_lbracket_1289] = "";
		lhsL[ART_L_OcamlLexer_lbracket_1289] = ART_L_OcamlLexer_lbracket;
		popD[ART_L_OcamlLexer_lbracket_1289] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracket_1290] = "OcamlLexer.lbracket ::= `[. ";
		artLabelStrings[ART_L_OcamlLexer_lbracket_1290] = "";
		lhsL[ART_L_OcamlLexer_lbracket_1290] = ART_L_OcamlLexer_lbracket;
		artKindOfs[ART_L_OcamlLexer_lbracket_1290] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lbracket_1290] = true;
		eoR_pL[ART_L_OcamlLexer_lbracket_1290] = true;
		popD[ART_L_OcamlLexer_lbracket_1290] = true;
	}

	public void artTableInitialiser_171() {
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketbar] = "OcamlLexer.lbracketbar ";
		artLabelStrings[ART_L_OcamlLexer_lbracketbar] = "lbracketbar";
		artKindOfs[ART_L_OcamlLexer_lbracketbar] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketbar_1307] = "OcamlLexer.lbracketbar ::= . `[`|";
		artLabelStrings[ART_L_OcamlLexer_lbracketbar_1307] = "";
		lhsL[ART_L_OcamlLexer_lbracketbar_1307] = ART_L_OcamlLexer_lbracketbar;
		artKindOfs[ART_L_OcamlLexer_lbracketbar_1307] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lbracketbar_1307] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketbar_1308] = "OcamlLexer.lbracketbar ::= `[`|";
		artLabelStrings[ART_L_OcamlLexer_lbracketbar_1308] = "";
		lhsL[ART_L_OcamlLexer_lbracketbar_1308] = ART_L_OcamlLexer_lbracketbar;
		popD[ART_L_OcamlLexer_lbracketbar_1308] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketbar_1309] = "OcamlLexer.lbracketbar ::= `[. `|";
		artLabelStrings[ART_L_OcamlLexer_lbracketbar_1309] = "";
		lhsL[ART_L_OcamlLexer_lbracketbar_1309] = ART_L_OcamlLexer_lbracketbar;
		artKindOfs[ART_L_OcamlLexer_lbracketbar_1309] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lbracketbar_1309] = true;
		popD[ART_L_OcamlLexer_lbracketbar_1309] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketbar_1310] = "OcamlLexer.lbracketbar ::= `[`|";
		artLabelStrings[ART_L_OcamlLexer_lbracketbar_1310] = "";
		lhsL[ART_L_OcamlLexer_lbracketbar_1310] = ART_L_OcamlLexer_lbracketbar;
		popD[ART_L_OcamlLexer_lbracketbar_1310] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketbar_1311] = "OcamlLexer.lbracketbar ::= `[`|. ";
		artLabelStrings[ART_L_OcamlLexer_lbracketbar_1311] = "";
		lhsL[ART_L_OcamlLexer_lbracketbar_1311] = ART_L_OcamlLexer_lbracketbar;
		artKindOfs[ART_L_OcamlLexer_lbracketbar_1311] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lbracketbar_1311] = true;
		eoR_pL[ART_L_OcamlLexer_lbracketbar_1311] = true;
		popD[ART_L_OcamlLexer_lbracketbar_1311] = true;
	}

	public void artTableInitialiser_172() {
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketgreater] = "OcamlLexer.lbracketgreater ";
		artLabelStrings[ART_L_OcamlLexer_lbracketgreater] = "lbracketgreater";
		artKindOfs[ART_L_OcamlLexer_lbracketgreater] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketgreater_1300] = "OcamlLexer.lbracketgreater ::= . `[`>";
		artLabelStrings[ART_L_OcamlLexer_lbracketgreater_1300] = "";
		lhsL[ART_L_OcamlLexer_lbracketgreater_1300] = ART_L_OcamlLexer_lbracketgreater;
		artKindOfs[ART_L_OcamlLexer_lbracketgreater_1300] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lbracketgreater_1300] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketgreater_1301] = "OcamlLexer.lbracketgreater ::= `[`>";
		artLabelStrings[ART_L_OcamlLexer_lbracketgreater_1301] = "";
		lhsL[ART_L_OcamlLexer_lbracketgreater_1301] = ART_L_OcamlLexer_lbracketgreater;
		popD[ART_L_OcamlLexer_lbracketgreater_1301] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketgreater_1302] = "OcamlLexer.lbracketgreater ::= `[. `>";
		artLabelStrings[ART_L_OcamlLexer_lbracketgreater_1302] = "";
		lhsL[ART_L_OcamlLexer_lbracketgreater_1302] = ART_L_OcamlLexer_lbracketgreater;
		artKindOfs[ART_L_OcamlLexer_lbracketgreater_1302] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lbracketgreater_1302] = true;
		popD[ART_L_OcamlLexer_lbracketgreater_1302] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketgreater_1303] = "OcamlLexer.lbracketgreater ::= `[`>";
		artLabelStrings[ART_L_OcamlLexer_lbracketgreater_1303] = "";
		lhsL[ART_L_OcamlLexer_lbracketgreater_1303] = ART_L_OcamlLexer_lbracketgreater;
		popD[ART_L_OcamlLexer_lbracketgreater_1303] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketgreater_1304] = "OcamlLexer.lbracketgreater ::= `[`>. ";
		artLabelStrings[ART_L_OcamlLexer_lbracketgreater_1304] = "";
		lhsL[ART_L_OcamlLexer_lbracketgreater_1304] = ART_L_OcamlLexer_lbracketgreater;
		artKindOfs[ART_L_OcamlLexer_lbracketgreater_1304] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lbracketgreater_1304] = true;
		eoR_pL[ART_L_OcamlLexer_lbracketgreater_1304] = true;
		popD[ART_L_OcamlLexer_lbracketgreater_1304] = true;
	}

	public void artTableInitialiser_173() {
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketless] = "OcamlLexer.lbracketless ";
		artLabelStrings[ART_L_OcamlLexer_lbracketless] = "lbracketless";
		artKindOfs[ART_L_OcamlLexer_lbracketless] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketless_1293] = "OcamlLexer.lbracketless ::= . `[`<";
		artLabelStrings[ART_L_OcamlLexer_lbracketless_1293] = "";
		lhsL[ART_L_OcamlLexer_lbracketless_1293] = ART_L_OcamlLexer_lbracketless;
		artKindOfs[ART_L_OcamlLexer_lbracketless_1293] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lbracketless_1293] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketless_1294] = "OcamlLexer.lbracketless ::= `[`<";
		artLabelStrings[ART_L_OcamlLexer_lbracketless_1294] = "";
		lhsL[ART_L_OcamlLexer_lbracketless_1294] = ART_L_OcamlLexer_lbracketless;
		popD[ART_L_OcamlLexer_lbracketless_1294] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketless_1295] = "OcamlLexer.lbracketless ::= `[. `<";
		artLabelStrings[ART_L_OcamlLexer_lbracketless_1295] = "";
		lhsL[ART_L_OcamlLexer_lbracketless_1295] = ART_L_OcamlLexer_lbracketless;
		artKindOfs[ART_L_OcamlLexer_lbracketless_1295] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lbracketless_1295] = true;
		popD[ART_L_OcamlLexer_lbracketless_1295] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketless_1296] = "OcamlLexer.lbracketless ::= `[`<";
		artLabelStrings[ART_L_OcamlLexer_lbracketless_1296] = "";
		lhsL[ART_L_OcamlLexer_lbracketless_1296] = ART_L_OcamlLexer_lbracketless;
		popD[ART_L_OcamlLexer_lbracketless_1296] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lbracketless_1297] = "OcamlLexer.lbracketless ::= `[`<. ";
		artLabelStrings[ART_L_OcamlLexer_lbracketless_1297] = "";
		lhsL[ART_L_OcamlLexer_lbracketless_1297] = ART_L_OcamlLexer_lbracketless;
		artKindOfs[ART_L_OcamlLexer_lbracketless_1297] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lbracketless_1297] = true;
		eoR_pL[ART_L_OcamlLexer_lbracketless_1297] = true;
		popD[ART_L_OcamlLexer_lbracketless_1297] = true;
	}

	public void artTableInitialiser_174() {
		artLabelInternalStrings[ART_L_OcamlLexer_less] = "OcamlLexer.less ";
		artLabelStrings[ART_L_OcamlLexer_less] = "less";
		artKindOfs[ART_L_OcamlLexer_less] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_less_1247] = "OcamlLexer.less ::= . `<";
		artLabelStrings[ART_L_OcamlLexer_less_1247] = "";
		lhsL[ART_L_OcamlLexer_less_1247] = ART_L_OcamlLexer_less;
		artKindOfs[ART_L_OcamlLexer_less_1247] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_less_1247] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_less_1248] = "OcamlLexer.less ::= `<";
		artLabelStrings[ART_L_OcamlLexer_less_1248] = "";
		lhsL[ART_L_OcamlLexer_less_1248] = ART_L_OcamlLexer_less;
		popD[ART_L_OcamlLexer_less_1248] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_less_1249] = "OcamlLexer.less ::= `<. ";
		artLabelStrings[ART_L_OcamlLexer_less_1249] = "";
		lhsL[ART_L_OcamlLexer_less_1249] = ART_L_OcamlLexer_less;
		artKindOfs[ART_L_OcamlLexer_less_1249] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_less_1249] = true;
		eoR_pL[ART_L_OcamlLexer_less_1249] = true;
		popD[ART_L_OcamlLexer_less_1249] = true;
	}

	public void artTableInitialiser_175() {
		artLabelInternalStrings[ART_L_OcamlLexer_lesshyphen] = "OcamlLexer.lesshyphen ";
		artLabelStrings[ART_L_OcamlLexer_lesshyphen] = "lesshyphen";
		artKindOfs[ART_L_OcamlLexer_lesshyphen] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lesshyphen_1252] = "OcamlLexer.lesshyphen ::= . `<`-";
		artLabelStrings[ART_L_OcamlLexer_lesshyphen_1252] = "";
		lhsL[ART_L_OcamlLexer_lesshyphen_1252] = ART_L_OcamlLexer_lesshyphen;
		artKindOfs[ART_L_OcamlLexer_lesshyphen_1252] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lesshyphen_1252] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lesshyphen_1253] = "OcamlLexer.lesshyphen ::= `<`-";
		artLabelStrings[ART_L_OcamlLexer_lesshyphen_1253] = "";
		lhsL[ART_L_OcamlLexer_lesshyphen_1253] = ART_L_OcamlLexer_lesshyphen;
		popD[ART_L_OcamlLexer_lesshyphen_1253] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lesshyphen_1254] = "OcamlLexer.lesshyphen ::= `<. `-";
		artLabelStrings[ART_L_OcamlLexer_lesshyphen_1254] = "";
		lhsL[ART_L_OcamlLexer_lesshyphen_1254] = ART_L_OcamlLexer_lesshyphen;
		artKindOfs[ART_L_OcamlLexer_lesshyphen_1254] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lesshyphen_1254] = true;
		popD[ART_L_OcamlLexer_lesshyphen_1254] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lesshyphen_1255] = "OcamlLexer.lesshyphen ::= `<`-";
		artLabelStrings[ART_L_OcamlLexer_lesshyphen_1255] = "";
		lhsL[ART_L_OcamlLexer_lesshyphen_1255] = ART_L_OcamlLexer_lesshyphen;
		popD[ART_L_OcamlLexer_lesshyphen_1255] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lesshyphen_1256] = "OcamlLexer.lesshyphen ::= `<`-. ";
		artLabelStrings[ART_L_OcamlLexer_lesshyphen_1256] = "";
		lhsL[ART_L_OcamlLexer_lesshyphen_1256] = ART_L_OcamlLexer_lesshyphen;
		artKindOfs[ART_L_OcamlLexer_lesshyphen_1256] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lesshyphen_1256] = true;
		eoR_pL[ART_L_OcamlLexer_lesshyphen_1256] = true;
		popD[ART_L_OcamlLexer_lesshyphen_1256] = true;
	}

	public void artTableInitialiser_176() {
		artLabelInternalStrings[ART_L_OcamlLexer_let] = "OcamlLexer.let ";
		artLabelStrings[ART_L_OcamlLexer_let] = "let";
		artKindOfs[ART_L_OcamlLexer_let] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_let_799] = "OcamlLexer.let ::= . `l`e`t";
		artLabelStrings[ART_L_OcamlLexer_let_799] = "";
		lhsL[ART_L_OcamlLexer_let_799] = ART_L_OcamlLexer_let;
		artKindOfs[ART_L_OcamlLexer_let_799] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_let_799] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_let_800] = "OcamlLexer.let ::= `l`e`t";
		artLabelStrings[ART_L_OcamlLexer_let_800] = "";
		lhsL[ART_L_OcamlLexer_let_800] = ART_L_OcamlLexer_let;
		popD[ART_L_OcamlLexer_let_800] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_let_801] = "OcamlLexer.let ::= `l. `e`t";
		artLabelStrings[ART_L_OcamlLexer_let_801] = "";
		lhsL[ART_L_OcamlLexer_let_801] = ART_L_OcamlLexer_let;
		artKindOfs[ART_L_OcamlLexer_let_801] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_let_801] = true;
		popD[ART_L_OcamlLexer_let_801] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_let_802] = "OcamlLexer.let ::= `l`e`t";
		artLabelStrings[ART_L_OcamlLexer_let_802] = "";
		lhsL[ART_L_OcamlLexer_let_802] = ART_L_OcamlLexer_let;
		popD[ART_L_OcamlLexer_let_802] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_let_803] = "OcamlLexer.let ::= `l`e. `t";
		artLabelStrings[ART_L_OcamlLexer_let_803] = "";
		lhsL[ART_L_OcamlLexer_let_803] = ART_L_OcamlLexer_let;
		artKindOfs[ART_L_OcamlLexer_let_803] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_let_803] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_let_804] = "OcamlLexer.let ::= `l`e`t";
		artLabelStrings[ART_L_OcamlLexer_let_804] = "";
		lhsL[ART_L_OcamlLexer_let_804] = ART_L_OcamlLexer_let;
		popD[ART_L_OcamlLexer_let_804] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_let_805] = "OcamlLexer.let ::= `l`e`t. ";
		artLabelStrings[ART_L_OcamlLexer_let_805] = "";
		lhsL[ART_L_OcamlLexer_let_805] = ART_L_OcamlLexer_let;
		artKindOfs[ART_L_OcamlLexer_let_805] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_let_805] = true;
		eoR_pL[ART_L_OcamlLexer_let_805] = true;
		popD[ART_L_OcamlLexer_let_805] = true;
	}

	public void artTableInitialiser_177() {
		artLabelInternalStrings[ART_L_OcamlLexer_letter] = "OcamlLexer.letter ";
		artLabelStrings[ART_L_OcamlLexer_letter] = "letter";
		artKindOfs[ART_L_OcamlLexer_letter] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_letter_1390] = "OcamlLexer.letter ::= . OcamlLexer.capital_letter ";
		artLabelStrings[ART_L_OcamlLexer_letter_1390] = "";
		lhsL[ART_L_OcamlLexer_letter_1390] = ART_L_OcamlLexer_letter;
		artKindOfs[ART_L_OcamlLexer_letter_1390] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_letter_1392] = "OcamlLexer.letter ::= OcamlLexer.capital_letter . ";
		artLabelStrings[ART_L_OcamlLexer_letter_1392] = "";
		lhsL[ART_L_OcamlLexer_letter_1392] = ART_L_OcamlLexer_letter;
		artSlotInstanceOfs[ART_L_OcamlLexer_letter_1392] = ART_L_OcamlLexer_capital_letter;
		artKindOfs[ART_L_OcamlLexer_letter_1392] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_letter_1392] = true;
		eoR_pL[ART_L_OcamlLexer_letter_1392] = true;
		popD[ART_L_OcamlLexer_letter_1392] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_letter_1394] = "OcamlLexer.letter ::= . OcamlLexer.lowercase_letter ";
		artLabelStrings[ART_L_OcamlLexer_letter_1394] = "";
		lhsL[ART_L_OcamlLexer_letter_1394] = ART_L_OcamlLexer_letter;
		artKindOfs[ART_L_OcamlLexer_letter_1394] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_letter_1396] = "OcamlLexer.letter ::= OcamlLexer.lowercase_letter . ";
		artLabelStrings[ART_L_OcamlLexer_letter_1396] = "";
		lhsL[ART_L_OcamlLexer_letter_1396] = ART_L_OcamlLexer_letter;
		artSlotInstanceOfs[ART_L_OcamlLexer_letter_1396] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_letter_1396] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_letter_1396] = true;
		eoR_pL[ART_L_OcamlLexer_letter_1396] = true;
		popD[ART_L_OcamlLexer_letter_1396] = true;
	}

	public void artTableInitialiser_178() {
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive] = "OcamlLexer.linenum_directive ";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive] = "linenum_directive";
		artKindOfs[ART_L_OcamlLexer_linenum_directive] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5295] = "OcamlLexer.linenum_directive ::= . `#( OcamlLexer.dec_digit )+ ";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5295] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5295] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5295] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5296] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ ";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5296] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5296] = ART_L_OcamlLexer_linenum_directive;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5297] = "OcamlLexer.linenum_directive ::= `#. ( OcamlLexer.dec_digit )+ ";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5297] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5297] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5297] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_linenum_directive_5297] = true;
		lhsL[ART_C_OcamlLexer_linenum_directive_5298] = ART_L_OcamlLexer_linenum_directive;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5302] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit . )+ ";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5302] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5302] = ART_L_OcamlLexer_linenum_directive;
		artSlotInstanceOfs[ART_L_OcamlLexer_linenum_directive_5302] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5302] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_linenum_directive_5302] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5303] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ . ";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5303] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5303] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5303] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_linenum_directive_5303] = true;
		eoR_pL[ART_L_OcamlLexer_linenum_directive_5303] = true;
		popD[ART_L_OcamlLexer_linenum_directive_5303] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5305] = "OcamlLexer.linenum_directive ::= . `#( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5305] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5305] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5305] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5306] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5306] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5306] = ART_L_OcamlLexer_linenum_directive;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5307] = "OcamlLexer.linenum_directive ::= `#. ( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5307] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5307] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5307] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_linenum_directive_5307] = true;
		lhsL[ART_C_OcamlLexer_linenum_directive_5308] = ART_L_OcamlLexer_linenum_directive;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5312] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit . )+ `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5312] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5312] = ART_L_OcamlLexer_linenum_directive;
		artSlotInstanceOfs[ART_L_OcamlLexer_linenum_directive_5312] = ART_L_OcamlLexer_dec_digit;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5312] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_linenum_directive_5312] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5313] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ . `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5313] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5313] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5313] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5314] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5314] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5314] = ART_L_OcamlLexer_linenum_directive;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5315] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ `\\\". ( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5315] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5315] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5315] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_linenum_directive_5316] = ART_L_OcamlLexer_linenum_directive;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5320] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character . )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5320] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5320] = ART_L_OcamlLexer_linenum_directive;
		artSlotInstanceOfs[ART_L_OcamlLexer_linenum_directive_5320] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5320] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_linenum_directive_5320] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5321] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character )* . `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5321] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5321] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5321] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_linenum_directive_5321] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5322] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5322] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5322] = ART_L_OcamlLexer_linenum_directive;
		popD[ART_L_OcamlLexer_linenum_directive_5322] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_linenum_directive_5323] = "OcamlLexer.linenum_directive ::= `#( OcamlLexer.dec_digit )+ `\\\"( OcamlLexer.string_character )* `\\\". ";
		artLabelStrings[ART_L_OcamlLexer_linenum_directive_5323] = "";
		lhsL[ART_L_OcamlLexer_linenum_directive_5323] = ART_L_OcamlLexer_linenum_directive;
		artKindOfs[ART_L_OcamlLexer_linenum_directive_5323] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_linenum_directive_5323] = true;
		eoR_pL[ART_L_OcamlLexer_linenum_directive_5323] = true;
		popD[ART_L_OcamlLexer_linenum_directive_5323] = true;
	}

	public void artTableInitialiser_179() {
		artLabelInternalStrings[ART_L_OcamlLexer_lor] = "OcamlLexer.lor ";
		artLabelStrings[ART_L_OcamlLexer_lor] = "lor";
		artKindOfs[ART_L_OcamlLexer_lor] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lor_808] = "OcamlLexer.lor ::= . `l`o`r";
		artLabelStrings[ART_L_OcamlLexer_lor_808] = "";
		lhsL[ART_L_OcamlLexer_lor_808] = ART_L_OcamlLexer_lor;
		artKindOfs[ART_L_OcamlLexer_lor_808] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lor_808] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lor_809] = "OcamlLexer.lor ::= `l`o`r";
		artLabelStrings[ART_L_OcamlLexer_lor_809] = "";
		lhsL[ART_L_OcamlLexer_lor_809] = ART_L_OcamlLexer_lor;
		popD[ART_L_OcamlLexer_lor_809] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lor_810] = "OcamlLexer.lor ::= `l. `o`r";
		artLabelStrings[ART_L_OcamlLexer_lor_810] = "";
		lhsL[ART_L_OcamlLexer_lor_810] = ART_L_OcamlLexer_lor;
		artKindOfs[ART_L_OcamlLexer_lor_810] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lor_810] = true;
		popD[ART_L_OcamlLexer_lor_810] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lor_811] = "OcamlLexer.lor ::= `l`o`r";
		artLabelStrings[ART_L_OcamlLexer_lor_811] = "";
		lhsL[ART_L_OcamlLexer_lor_811] = ART_L_OcamlLexer_lor;
		popD[ART_L_OcamlLexer_lor_811] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lor_812] = "OcamlLexer.lor ::= `l`o. `r";
		artLabelStrings[ART_L_OcamlLexer_lor_812] = "";
		lhsL[ART_L_OcamlLexer_lor_812] = ART_L_OcamlLexer_lor;
		artKindOfs[ART_L_OcamlLexer_lor_812] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lor_812] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lor_813] = "OcamlLexer.lor ::= `l`o`r";
		artLabelStrings[ART_L_OcamlLexer_lor_813] = "";
		lhsL[ART_L_OcamlLexer_lor_813] = ART_L_OcamlLexer_lor;
		popD[ART_L_OcamlLexer_lor_813] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lor_814] = "OcamlLexer.lor ::= `l`o`r. ";
		artLabelStrings[ART_L_OcamlLexer_lor_814] = "";
		lhsL[ART_L_OcamlLexer_lor_814] = ART_L_OcamlLexer_lor;
		artKindOfs[ART_L_OcamlLexer_lor_814] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lor_814] = true;
		eoR_pL[ART_L_OcamlLexer_lor_814] = true;
		popD[ART_L_OcamlLexer_lor_814] = true;
	}

	public void artTableInitialiser_180() {
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_ident] = "OcamlLexer.lowercase_ident ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_ident] = "lowercase_ident";
		artKindOfs[ART_L_OcamlLexer_lowercase_ident] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_ident_1772] = "OcamlLexer.lowercase_ident ::= . OcamlLexer.lowercase_letter ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_ident_1772] = "";
		lhsL[ART_L_OcamlLexer_lowercase_ident_1772] = ART_L_OcamlLexer_lowercase_ident;
		artKindOfs[ART_L_OcamlLexer_lowercase_ident_1772] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_ident_1774] = "OcamlLexer.lowercase_ident ::= OcamlLexer.lowercase_letter . ( OcamlLexer.identifier_part_character )* ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_ident_1774] = "";
		lhsL[ART_L_OcamlLexer_lowercase_ident_1774] = ART_L_OcamlLexer_lowercase_ident;
		artSlotInstanceOfs[ART_L_OcamlLexer_lowercase_ident_1774] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_ident_1774] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lowercase_ident_1774] = true;
		lhsL[ART_C_OcamlLexer_lowercase_ident_1775] = ART_L_OcamlLexer_lowercase_ident;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_ident_1779] = "OcamlLexer.lowercase_ident ::= OcamlLexer.lowercase_letter ( OcamlLexer.identifier_part_character . )* ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_ident_1779] = "";
		lhsL[ART_L_OcamlLexer_lowercase_ident_1779] = ART_L_OcamlLexer_lowercase_ident;
		artSlotInstanceOfs[ART_L_OcamlLexer_lowercase_ident_1779] = ART_L_OcamlLexer_identifier_part_character;
		artKindOfs[ART_L_OcamlLexer_lowercase_ident_1779] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_ident_1779] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_ident_1780] = "OcamlLexer.lowercase_ident ::= OcamlLexer.lowercase_letter ( OcamlLexer.identifier_part_character )* . ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_ident_1780] = "";
		lhsL[ART_L_OcamlLexer_lowercase_ident_1780] = ART_L_OcamlLexer_lowercase_ident;
		artKindOfs[ART_L_OcamlLexer_lowercase_ident_1780] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_ident_1780] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_ident_1780] = true;
		popD[ART_L_OcamlLexer_lowercase_ident_1780] = true;
	}

	public void artTableInitialiser_181() {
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter] = "OcamlLexer.lowercase_letter ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter] = "lowercase_letter";
		artKindOfs[ART_L_OcamlLexer_lowercase_letter] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1783] = "OcamlLexer.lowercase_letter ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1783] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1783] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1783] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1783] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1784] = "OcamlLexer.lowercase_letter ::= `a";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1784] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1784] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1784] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1785] = "OcamlLexer.lowercase_letter ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1785] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1785] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1785] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1785] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1785] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1785] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1787] = "OcamlLexer.lowercase_letter ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1787] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1787] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1787] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1787] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1788] = "OcamlLexer.lowercase_letter ::= `b";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1788] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1788] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1788] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1789] = "OcamlLexer.lowercase_letter ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1789] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1789] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1789] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1789] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1789] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1789] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1791] = "OcamlLexer.lowercase_letter ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1791] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1791] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1791] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1791] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1792] = "OcamlLexer.lowercase_letter ::= `c";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1792] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1792] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1792] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1793] = "OcamlLexer.lowercase_letter ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1793] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1793] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1793] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1793] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1793] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1793] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1795] = "OcamlLexer.lowercase_letter ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1795] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1795] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1795] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1795] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1796] = "OcamlLexer.lowercase_letter ::= `d";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1796] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1796] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1796] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1797] = "OcamlLexer.lowercase_letter ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1797] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1797] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1797] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1797] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1797] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1797] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1799] = "OcamlLexer.lowercase_letter ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1799] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1799] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1799] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1799] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1800] = "OcamlLexer.lowercase_letter ::= `e";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1800] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1800] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1800] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1801] = "OcamlLexer.lowercase_letter ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1801] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1801] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1801] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1801] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1801] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1801] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1803] = "OcamlLexer.lowercase_letter ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1803] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1803] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1803] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1803] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1804] = "OcamlLexer.lowercase_letter ::= `f";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1804] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1804] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1804] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1805] = "OcamlLexer.lowercase_letter ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1805] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1805] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1805] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1805] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1805] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1805] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1807] = "OcamlLexer.lowercase_letter ::= . `g";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1807] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1807] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1807] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1807] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1808] = "OcamlLexer.lowercase_letter ::= `g";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1808] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1808] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1808] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1809] = "OcamlLexer.lowercase_letter ::= `g. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1809] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1809] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1809] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1809] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1809] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1809] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1811] = "OcamlLexer.lowercase_letter ::= . `h";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1811] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1811] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1811] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1811] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1812] = "OcamlLexer.lowercase_letter ::= `h";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1812] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1812] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1812] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1813] = "OcamlLexer.lowercase_letter ::= `h. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1813] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1813] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1813] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1813] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1813] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1813] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1815] = "OcamlLexer.lowercase_letter ::= . `i";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1815] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1815] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1815] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1815] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1816] = "OcamlLexer.lowercase_letter ::= `i";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1816] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1816] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1816] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1817] = "OcamlLexer.lowercase_letter ::= `i. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1817] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1817] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1817] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1817] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1817] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1817] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1819] = "OcamlLexer.lowercase_letter ::= . `j";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1819] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1819] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1819] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1819] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1820] = "OcamlLexer.lowercase_letter ::= `j";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1820] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1820] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1820] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1821] = "OcamlLexer.lowercase_letter ::= `j. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1821] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1821] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1821] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1821] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1821] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1821] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1823] = "OcamlLexer.lowercase_letter ::= . `k";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1823] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1823] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1823] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1823] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1824] = "OcamlLexer.lowercase_letter ::= `k";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1824] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1824] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1824] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1825] = "OcamlLexer.lowercase_letter ::= `k. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1825] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1825] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1825] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1825] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1825] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1825] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1827] = "OcamlLexer.lowercase_letter ::= . `l";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1827] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1827] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1827] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1827] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1828] = "OcamlLexer.lowercase_letter ::= `l";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1828] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1828] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1828] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1829] = "OcamlLexer.lowercase_letter ::= `l. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1829] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1829] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1829] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1829] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1829] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1829] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1831] = "OcamlLexer.lowercase_letter ::= . `m";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1831] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1831] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1831] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1831] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1832] = "OcamlLexer.lowercase_letter ::= `m";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1832] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1832] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1832] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1833] = "OcamlLexer.lowercase_letter ::= `m. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1833] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1833] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1833] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1833] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1833] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1833] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1835] = "OcamlLexer.lowercase_letter ::= . `n";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1835] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1835] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1835] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1835] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1836] = "OcamlLexer.lowercase_letter ::= `n";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1836] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1836] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1836] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1837] = "OcamlLexer.lowercase_letter ::= `n. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1837] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1837] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1837] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1837] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1837] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1837] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1839] = "OcamlLexer.lowercase_letter ::= . `o";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1839] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1839] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1839] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1839] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1840] = "OcamlLexer.lowercase_letter ::= `o";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1840] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1840] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1840] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1841] = "OcamlLexer.lowercase_letter ::= `o. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1841] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1841] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1841] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1841] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1841] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1841] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1843] = "OcamlLexer.lowercase_letter ::= . `p";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1843] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1843] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1843] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1843] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1844] = "OcamlLexer.lowercase_letter ::= `p";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1844] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1844] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1844] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1845] = "OcamlLexer.lowercase_letter ::= `p. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1845] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1845] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1845] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1845] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1845] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1845] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1847] = "OcamlLexer.lowercase_letter ::= . `q";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1847] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1847] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1847] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1847] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1848] = "OcamlLexer.lowercase_letter ::= `q";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1848] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1848] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1848] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1849] = "OcamlLexer.lowercase_letter ::= `q. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1849] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1849] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1849] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1849] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1849] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1849] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1851] = "OcamlLexer.lowercase_letter ::= . `r";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1851] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1851] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1851] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1851] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1852] = "OcamlLexer.lowercase_letter ::= `r";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1852] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1852] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1852] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1853] = "OcamlLexer.lowercase_letter ::= `r. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1853] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1853] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1853] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1853] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1853] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1853] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1855] = "OcamlLexer.lowercase_letter ::= . `s";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1855] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1855] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1855] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1855] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1856] = "OcamlLexer.lowercase_letter ::= `s";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1856] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1856] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1856] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1857] = "OcamlLexer.lowercase_letter ::= `s. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1857] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1857] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1857] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1857] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1857] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1857] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1859] = "OcamlLexer.lowercase_letter ::= . `t";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1859] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1859] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1859] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1859] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1860] = "OcamlLexer.lowercase_letter ::= `t";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1860] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1860] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1860] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1861] = "OcamlLexer.lowercase_letter ::= `t. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1861] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1861] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1861] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1861] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1861] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1861] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1863] = "OcamlLexer.lowercase_letter ::= . `u";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1863] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1863] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1863] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1863] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1864] = "OcamlLexer.lowercase_letter ::= `u";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1864] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1864] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1864] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1865] = "OcamlLexer.lowercase_letter ::= `u. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1865] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1865] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1865] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1865] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1865] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1865] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1867] = "OcamlLexer.lowercase_letter ::= . `v";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1867] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1867] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1867] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1867] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1868] = "OcamlLexer.lowercase_letter ::= `v";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1868] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1868] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1868] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1869] = "OcamlLexer.lowercase_letter ::= `v. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1869] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1869] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1869] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1869] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1869] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1869] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1871] = "OcamlLexer.lowercase_letter ::= . `w";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1871] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1871] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1871] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1871] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1872] = "OcamlLexer.lowercase_letter ::= `w";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1872] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1872] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1872] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1873] = "OcamlLexer.lowercase_letter ::= `w. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1873] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1873] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1873] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1873] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1873] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1873] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1875] = "OcamlLexer.lowercase_letter ::= . `x";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1875] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1875] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1875] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1875] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1876] = "OcamlLexer.lowercase_letter ::= `x";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1876] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1876] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1876] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1877] = "OcamlLexer.lowercase_letter ::= `x. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1877] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1877] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1877] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1877] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1877] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1877] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1879] = "OcamlLexer.lowercase_letter ::= . `y";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1879] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1879] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1879] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1879] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1880] = "OcamlLexer.lowercase_letter ::= `y";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1880] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1880] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1880] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1881] = "OcamlLexer.lowercase_letter ::= `y. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1881] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1881] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1881] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1881] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1881] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1881] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1883] = "OcamlLexer.lowercase_letter ::= . `z";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1883] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1883] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1883] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1883] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1884] = "OcamlLexer.lowercase_letter ::= `z";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1884] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1884] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1884] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1885] = "OcamlLexer.lowercase_letter ::= `z. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1885] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1885] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1885] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1885] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1885] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1885] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1887] = "OcamlLexer.lowercase_letter ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1887] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1887] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1887] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lowercase_letter_1887] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1888] = "OcamlLexer.lowercase_letter ::= `_";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1888] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1888] = ART_L_OcamlLexer_lowercase_letter;
		popD[ART_L_OcamlLexer_lowercase_letter_1888] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lowercase_letter_1889] = "OcamlLexer.lowercase_letter ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_lowercase_letter_1889] = "";
		lhsL[ART_L_OcamlLexer_lowercase_letter_1889] = ART_L_OcamlLexer_lowercase_letter;
		artKindOfs[ART_L_OcamlLexer_lowercase_letter_1889] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lowercase_letter_1889] = true;
		eoR_pL[ART_L_OcamlLexer_lowercase_letter_1889] = true;
		popD[ART_L_OcamlLexer_lowercase_letter_1889] = true;
	}

	public void artTableInitialiser_182() {
		artLabelInternalStrings[ART_L_OcamlLexer_lparen] = "OcamlLexer.lparen ";
		artLabelStrings[ART_L_OcamlLexer_lparen] = "lparen";
		artKindOfs[ART_L_OcamlLexer_lparen] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lparen_1153] = "OcamlLexer.lparen ::= . `(";
		artLabelStrings[ART_L_OcamlLexer_lparen_1153] = "";
		lhsL[ART_L_OcamlLexer_lparen_1153] = ART_L_OcamlLexer_lparen;
		artKindOfs[ART_L_OcamlLexer_lparen_1153] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lparen_1153] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lparen_1154] = "OcamlLexer.lparen ::= `(";
		artLabelStrings[ART_L_OcamlLexer_lparen_1154] = "";
		lhsL[ART_L_OcamlLexer_lparen_1154] = ART_L_OcamlLexer_lparen;
		popD[ART_L_OcamlLexer_lparen_1154] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lparen_1155] = "OcamlLexer.lparen ::= `(. ";
		artLabelStrings[ART_L_OcamlLexer_lparen_1155] = "";
		lhsL[ART_L_OcamlLexer_lparen_1155] = ART_L_OcamlLexer_lparen;
		artKindOfs[ART_L_OcamlLexer_lparen_1155] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lparen_1155] = true;
		eoR_pL[ART_L_OcamlLexer_lparen_1155] = true;
		popD[ART_L_OcamlLexer_lparen_1155] = true;
	}

	public void artTableInitialiser_183() {
		artLabelInternalStrings[ART_L_OcamlLexer_lsl] = "OcamlLexer.lsl ";
		artLabelStrings[ART_L_OcamlLexer_lsl] = "lsl";
		artKindOfs[ART_L_OcamlLexer_lsl] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lsl_817] = "OcamlLexer.lsl ::= . `l`s`l";
		artLabelStrings[ART_L_OcamlLexer_lsl_817] = "";
		lhsL[ART_L_OcamlLexer_lsl_817] = ART_L_OcamlLexer_lsl;
		artKindOfs[ART_L_OcamlLexer_lsl_817] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lsl_817] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsl_818] = "OcamlLexer.lsl ::= `l`s`l";
		artLabelStrings[ART_L_OcamlLexer_lsl_818] = "";
		lhsL[ART_L_OcamlLexer_lsl_818] = ART_L_OcamlLexer_lsl;
		popD[ART_L_OcamlLexer_lsl_818] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsl_819] = "OcamlLexer.lsl ::= `l. `s`l";
		artLabelStrings[ART_L_OcamlLexer_lsl_819] = "";
		lhsL[ART_L_OcamlLexer_lsl_819] = ART_L_OcamlLexer_lsl;
		artKindOfs[ART_L_OcamlLexer_lsl_819] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lsl_819] = true;
		popD[ART_L_OcamlLexer_lsl_819] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsl_820] = "OcamlLexer.lsl ::= `l`s`l";
		artLabelStrings[ART_L_OcamlLexer_lsl_820] = "";
		lhsL[ART_L_OcamlLexer_lsl_820] = ART_L_OcamlLexer_lsl;
		popD[ART_L_OcamlLexer_lsl_820] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsl_821] = "OcamlLexer.lsl ::= `l`s. `l";
		artLabelStrings[ART_L_OcamlLexer_lsl_821] = "";
		lhsL[ART_L_OcamlLexer_lsl_821] = ART_L_OcamlLexer_lsl;
		artKindOfs[ART_L_OcamlLexer_lsl_821] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lsl_821] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsl_822] = "OcamlLexer.lsl ::= `l`s`l";
		artLabelStrings[ART_L_OcamlLexer_lsl_822] = "";
		lhsL[ART_L_OcamlLexer_lsl_822] = ART_L_OcamlLexer_lsl;
		popD[ART_L_OcamlLexer_lsl_822] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsl_823] = "OcamlLexer.lsl ::= `l`s`l. ";
		artLabelStrings[ART_L_OcamlLexer_lsl_823] = "";
		lhsL[ART_L_OcamlLexer_lsl_823] = ART_L_OcamlLexer_lsl;
		artKindOfs[ART_L_OcamlLexer_lsl_823] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lsl_823] = true;
		eoR_pL[ART_L_OcamlLexer_lsl_823] = true;
		popD[ART_L_OcamlLexer_lsl_823] = true;
	}

	public void artTableInitialiser_184() {
		artLabelInternalStrings[ART_L_OcamlLexer_lsr] = "OcamlLexer.lsr ";
		artLabelStrings[ART_L_OcamlLexer_lsr] = "lsr";
		artKindOfs[ART_L_OcamlLexer_lsr] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lsr_826] = "OcamlLexer.lsr ::= . `l`s`r";
		artLabelStrings[ART_L_OcamlLexer_lsr_826] = "";
		lhsL[ART_L_OcamlLexer_lsr_826] = ART_L_OcamlLexer_lsr;
		artKindOfs[ART_L_OcamlLexer_lsr_826] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lsr_826] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsr_827] = "OcamlLexer.lsr ::= `l`s`r";
		artLabelStrings[ART_L_OcamlLexer_lsr_827] = "";
		lhsL[ART_L_OcamlLexer_lsr_827] = ART_L_OcamlLexer_lsr;
		popD[ART_L_OcamlLexer_lsr_827] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsr_828] = "OcamlLexer.lsr ::= `l. `s`r";
		artLabelStrings[ART_L_OcamlLexer_lsr_828] = "";
		lhsL[ART_L_OcamlLexer_lsr_828] = ART_L_OcamlLexer_lsr;
		artKindOfs[ART_L_OcamlLexer_lsr_828] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lsr_828] = true;
		popD[ART_L_OcamlLexer_lsr_828] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsr_829] = "OcamlLexer.lsr ::= `l`s`r";
		artLabelStrings[ART_L_OcamlLexer_lsr_829] = "";
		lhsL[ART_L_OcamlLexer_lsr_829] = ART_L_OcamlLexer_lsr;
		popD[ART_L_OcamlLexer_lsr_829] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsr_830] = "OcamlLexer.lsr ::= `l`s. `r";
		artLabelStrings[ART_L_OcamlLexer_lsr_830] = "";
		lhsL[ART_L_OcamlLexer_lsr_830] = ART_L_OcamlLexer_lsr;
		artKindOfs[ART_L_OcamlLexer_lsr_830] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lsr_830] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsr_831] = "OcamlLexer.lsr ::= `l`s`r";
		artLabelStrings[ART_L_OcamlLexer_lsr_831] = "";
		lhsL[ART_L_OcamlLexer_lsr_831] = ART_L_OcamlLexer_lsr;
		popD[ART_L_OcamlLexer_lsr_831] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lsr_832] = "OcamlLexer.lsr ::= `l`s`r. ";
		artLabelStrings[ART_L_OcamlLexer_lsr_832] = "";
		lhsL[ART_L_OcamlLexer_lsr_832] = ART_L_OcamlLexer_lsr;
		artKindOfs[ART_L_OcamlLexer_lsr_832] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lsr_832] = true;
		eoR_pL[ART_L_OcamlLexer_lsr_832] = true;
		popD[ART_L_OcamlLexer_lsr_832] = true;
	}

	public void artTableInitialiser_185() {
		artLabelInternalStrings[ART_L_OcamlLexer_lxor] = "OcamlLexer.lxor ";
		artLabelStrings[ART_L_OcamlLexer_lxor] = "lxor";
		artKindOfs[ART_L_OcamlLexer_lxor] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_835] = "OcamlLexer.lxor ::= . `l`x`o`r";
		artLabelStrings[ART_L_OcamlLexer_lxor_835] = "";
		lhsL[ART_L_OcamlLexer_lxor_835] = ART_L_OcamlLexer_lxor;
		artKindOfs[ART_L_OcamlLexer_lxor_835] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lxor_835] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_836] = "OcamlLexer.lxor ::= `l`x`o`r";
		artLabelStrings[ART_L_OcamlLexer_lxor_836] = "";
		lhsL[ART_L_OcamlLexer_lxor_836] = ART_L_OcamlLexer_lxor;
		popD[ART_L_OcamlLexer_lxor_836] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_837] = "OcamlLexer.lxor ::= `l. `x`o`r";
		artLabelStrings[ART_L_OcamlLexer_lxor_837] = "";
		lhsL[ART_L_OcamlLexer_lxor_837] = ART_L_OcamlLexer_lxor;
		artKindOfs[ART_L_OcamlLexer_lxor_837] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_lxor_837] = true;
		popD[ART_L_OcamlLexer_lxor_837] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_838] = "OcamlLexer.lxor ::= `l`x`o`r";
		artLabelStrings[ART_L_OcamlLexer_lxor_838] = "";
		lhsL[ART_L_OcamlLexer_lxor_838] = ART_L_OcamlLexer_lxor;
		popD[ART_L_OcamlLexer_lxor_838] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_839] = "OcamlLexer.lxor ::= `l`x. `o`r";
		artLabelStrings[ART_L_OcamlLexer_lxor_839] = "";
		lhsL[ART_L_OcamlLexer_lxor_839] = ART_L_OcamlLexer_lxor;
		artKindOfs[ART_L_OcamlLexer_lxor_839] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lxor_839] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_840] = "OcamlLexer.lxor ::= `l`x`o`r";
		artLabelStrings[ART_L_OcamlLexer_lxor_840] = "";
		lhsL[ART_L_OcamlLexer_lxor_840] = ART_L_OcamlLexer_lxor;
		popD[ART_L_OcamlLexer_lxor_840] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_841] = "OcamlLexer.lxor ::= `l`x`o. `r";
		artLabelStrings[ART_L_OcamlLexer_lxor_841] = "";
		lhsL[ART_L_OcamlLexer_lxor_841] = ART_L_OcamlLexer_lxor;
		artKindOfs[ART_L_OcamlLexer_lxor_841] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_lxor_841] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_842] = "OcamlLexer.lxor ::= `l`x`o`r";
		artLabelStrings[ART_L_OcamlLexer_lxor_842] = "";
		lhsL[ART_L_OcamlLexer_lxor_842] = ART_L_OcamlLexer_lxor;
		popD[ART_L_OcamlLexer_lxor_842] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_lxor_843] = "OcamlLexer.lxor ::= `l`x`o`r. ";
		artLabelStrings[ART_L_OcamlLexer_lxor_843] = "";
		lhsL[ART_L_OcamlLexer_lxor_843] = ART_L_OcamlLexer_lxor;
		artKindOfs[ART_L_OcamlLexer_lxor_843] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_lxor_843] = true;
		eoR_pL[ART_L_OcamlLexer_lxor_843] = true;
		popD[ART_L_OcamlLexer_lxor_843] = true;
	}

	public void artTableInitialiser_186() {
		artLabelInternalStrings[ART_L_OcamlLexer_match] = "OcamlLexer.match ";
		artLabelStrings[ART_L_OcamlLexer_match] = "match";
		artKindOfs[ART_L_OcamlLexer_match] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_match_846] = "OcamlLexer.match ::= . `m`a`t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_846] = "";
		lhsL[ART_L_OcamlLexer_match_846] = ART_L_OcamlLexer_match;
		artKindOfs[ART_L_OcamlLexer_match_846] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_match_846] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_847] = "OcamlLexer.match ::= `m`a`t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_847] = "";
		lhsL[ART_L_OcamlLexer_match_847] = ART_L_OcamlLexer_match;
		popD[ART_L_OcamlLexer_match_847] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_848] = "OcamlLexer.match ::= `m. `a`t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_848] = "";
		lhsL[ART_L_OcamlLexer_match_848] = ART_L_OcamlLexer_match;
		artKindOfs[ART_L_OcamlLexer_match_848] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_match_848] = true;
		popD[ART_L_OcamlLexer_match_848] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_849] = "OcamlLexer.match ::= `m`a`t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_849] = "";
		lhsL[ART_L_OcamlLexer_match_849] = ART_L_OcamlLexer_match;
		popD[ART_L_OcamlLexer_match_849] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_850] = "OcamlLexer.match ::= `m`a. `t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_850] = "";
		lhsL[ART_L_OcamlLexer_match_850] = ART_L_OcamlLexer_match;
		artKindOfs[ART_L_OcamlLexer_match_850] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_match_850] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_851] = "OcamlLexer.match ::= `m`a`t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_851] = "";
		lhsL[ART_L_OcamlLexer_match_851] = ART_L_OcamlLexer_match;
		popD[ART_L_OcamlLexer_match_851] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_852] = "OcamlLexer.match ::= `m`a`t. `c`h";
		artLabelStrings[ART_L_OcamlLexer_match_852] = "";
		lhsL[ART_L_OcamlLexer_match_852] = ART_L_OcamlLexer_match;
		artKindOfs[ART_L_OcamlLexer_match_852] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_match_852] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_853] = "OcamlLexer.match ::= `m`a`t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_853] = "";
		lhsL[ART_L_OcamlLexer_match_853] = ART_L_OcamlLexer_match;
		popD[ART_L_OcamlLexer_match_853] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_854] = "OcamlLexer.match ::= `m`a`t`c. `h";
		artLabelStrings[ART_L_OcamlLexer_match_854] = "";
		lhsL[ART_L_OcamlLexer_match_854] = ART_L_OcamlLexer_match;
		artKindOfs[ART_L_OcamlLexer_match_854] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_match_854] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_855] = "OcamlLexer.match ::= `m`a`t`c`h";
		artLabelStrings[ART_L_OcamlLexer_match_855] = "";
		lhsL[ART_L_OcamlLexer_match_855] = ART_L_OcamlLexer_match;
		popD[ART_L_OcamlLexer_match_855] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_match_856] = "OcamlLexer.match ::= `m`a`t`c`h. ";
		artLabelStrings[ART_L_OcamlLexer_match_856] = "";
		lhsL[ART_L_OcamlLexer_match_856] = ART_L_OcamlLexer_match;
		artKindOfs[ART_L_OcamlLexer_match_856] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_match_856] = true;
		eoR_pL[ART_L_OcamlLexer_match_856] = true;
		popD[ART_L_OcamlLexer_match_856] = true;
	}

	public void artTableInitialiser_187() {
		artLabelInternalStrings[ART_L_OcamlLexer_method] = "OcamlLexer.method ";
		artLabelStrings[ART_L_OcamlLexer_method] = "method";
		artKindOfs[ART_L_OcamlLexer_method] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_method_859] = "OcamlLexer.method ::= . `m`e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_859] = "";
		lhsL[ART_L_OcamlLexer_method_859] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_method_859] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_method_859] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_860] = "OcamlLexer.method ::= `m`e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_860] = "";
		lhsL[ART_L_OcamlLexer_method_860] = ART_L_OcamlLexer_method;
		popD[ART_L_OcamlLexer_method_860] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_861] = "OcamlLexer.method ::= `m. `e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_861] = "";
		lhsL[ART_L_OcamlLexer_method_861] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_method_861] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_method_861] = true;
		popD[ART_L_OcamlLexer_method_861] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_862] = "OcamlLexer.method ::= `m`e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_862] = "";
		lhsL[ART_L_OcamlLexer_method_862] = ART_L_OcamlLexer_method;
		popD[ART_L_OcamlLexer_method_862] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_863] = "OcamlLexer.method ::= `m`e. `t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_863] = "";
		lhsL[ART_L_OcamlLexer_method_863] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_method_863] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_method_863] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_864] = "OcamlLexer.method ::= `m`e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_864] = "";
		lhsL[ART_L_OcamlLexer_method_864] = ART_L_OcamlLexer_method;
		popD[ART_L_OcamlLexer_method_864] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_865] = "OcamlLexer.method ::= `m`e`t. `h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_865] = "";
		lhsL[ART_L_OcamlLexer_method_865] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_method_865] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_method_865] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_866] = "OcamlLexer.method ::= `m`e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_866] = "";
		lhsL[ART_L_OcamlLexer_method_866] = ART_L_OcamlLexer_method;
		popD[ART_L_OcamlLexer_method_866] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_867] = "OcamlLexer.method ::= `m`e`t`h. `o`d";
		artLabelStrings[ART_L_OcamlLexer_method_867] = "";
		lhsL[ART_L_OcamlLexer_method_867] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_method_867] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_method_867] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_868] = "OcamlLexer.method ::= `m`e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_868] = "";
		lhsL[ART_L_OcamlLexer_method_868] = ART_L_OcamlLexer_method;
		popD[ART_L_OcamlLexer_method_868] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_869] = "OcamlLexer.method ::= `m`e`t`h`o. `d";
		artLabelStrings[ART_L_OcamlLexer_method_869] = "";
		lhsL[ART_L_OcamlLexer_method_869] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_method_869] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_method_869] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_870] = "OcamlLexer.method ::= `m`e`t`h`o`d";
		artLabelStrings[ART_L_OcamlLexer_method_870] = "";
		lhsL[ART_L_OcamlLexer_method_870] = ART_L_OcamlLexer_method;
		popD[ART_L_OcamlLexer_method_870] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_method_871] = "OcamlLexer.method ::= `m`e`t`h`o`d. ";
		artLabelStrings[ART_L_OcamlLexer_method_871] = "";
		lhsL[ART_L_OcamlLexer_method_871] = ART_L_OcamlLexer_method;
		artKindOfs[ART_L_OcamlLexer_method_871] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_method_871] = true;
		eoR_pL[ART_L_OcamlLexer_method_871] = true;
		popD[ART_L_OcamlLexer_method_871] = true;
	}

	public void artTableInitialiser_188() {
		artLabelInternalStrings[ART_L_OcamlLexer_mod] = "OcamlLexer.mod ";
		artLabelStrings[ART_L_OcamlLexer_mod] = "mod";
		artKindOfs[ART_L_OcamlLexer_mod] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_mod_874] = "OcamlLexer.mod ::= . `m`o`d";
		artLabelStrings[ART_L_OcamlLexer_mod_874] = "";
		lhsL[ART_L_OcamlLexer_mod_874] = ART_L_OcamlLexer_mod;
		artKindOfs[ART_L_OcamlLexer_mod_874] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mod_874] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mod_875] = "OcamlLexer.mod ::= `m`o`d";
		artLabelStrings[ART_L_OcamlLexer_mod_875] = "";
		lhsL[ART_L_OcamlLexer_mod_875] = ART_L_OcamlLexer_mod;
		popD[ART_L_OcamlLexer_mod_875] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mod_876] = "OcamlLexer.mod ::= `m. `o`d";
		artLabelStrings[ART_L_OcamlLexer_mod_876] = "";
		lhsL[ART_L_OcamlLexer_mod_876] = ART_L_OcamlLexer_mod;
		artKindOfs[ART_L_OcamlLexer_mod_876] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_mod_876] = true;
		popD[ART_L_OcamlLexer_mod_876] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mod_877] = "OcamlLexer.mod ::= `m`o`d";
		artLabelStrings[ART_L_OcamlLexer_mod_877] = "";
		lhsL[ART_L_OcamlLexer_mod_877] = ART_L_OcamlLexer_mod;
		popD[ART_L_OcamlLexer_mod_877] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mod_878] = "OcamlLexer.mod ::= `m`o. `d";
		artLabelStrings[ART_L_OcamlLexer_mod_878] = "";
		lhsL[ART_L_OcamlLexer_mod_878] = ART_L_OcamlLexer_mod;
		artKindOfs[ART_L_OcamlLexer_mod_878] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mod_878] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mod_879] = "OcamlLexer.mod ::= `m`o`d";
		artLabelStrings[ART_L_OcamlLexer_mod_879] = "";
		lhsL[ART_L_OcamlLexer_mod_879] = ART_L_OcamlLexer_mod;
		popD[ART_L_OcamlLexer_mod_879] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mod_880] = "OcamlLexer.mod ::= `m`o`d. ";
		artLabelStrings[ART_L_OcamlLexer_mod_880] = "";
		lhsL[ART_L_OcamlLexer_mod_880] = ART_L_OcamlLexer_mod;
		artKindOfs[ART_L_OcamlLexer_mod_880] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_mod_880] = true;
		eoR_pL[ART_L_OcamlLexer_mod_880] = true;
		popD[ART_L_OcamlLexer_mod_880] = true;
	}

	public void artTableInitialiser_189() {
		artLabelInternalStrings[ART_L_OcamlLexer_module] = "OcamlLexer.module ";
		artLabelStrings[ART_L_OcamlLexer_module] = "module";
		artKindOfs[ART_L_OcamlLexer_module] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_module_883] = "OcamlLexer.module ::= . `m`o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_883] = "";
		lhsL[ART_L_OcamlLexer_module_883] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_module_883] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_module_883] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_884] = "OcamlLexer.module ::= `m`o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_884] = "";
		lhsL[ART_L_OcamlLexer_module_884] = ART_L_OcamlLexer_module;
		popD[ART_L_OcamlLexer_module_884] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_885] = "OcamlLexer.module ::= `m. `o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_885] = "";
		lhsL[ART_L_OcamlLexer_module_885] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_module_885] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_module_885] = true;
		popD[ART_L_OcamlLexer_module_885] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_886] = "OcamlLexer.module ::= `m`o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_886] = "";
		lhsL[ART_L_OcamlLexer_module_886] = ART_L_OcamlLexer_module;
		popD[ART_L_OcamlLexer_module_886] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_887] = "OcamlLexer.module ::= `m`o. `d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_887] = "";
		lhsL[ART_L_OcamlLexer_module_887] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_module_887] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_module_887] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_888] = "OcamlLexer.module ::= `m`o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_888] = "";
		lhsL[ART_L_OcamlLexer_module_888] = ART_L_OcamlLexer_module;
		popD[ART_L_OcamlLexer_module_888] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_889] = "OcamlLexer.module ::= `m`o`d. `u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_889] = "";
		lhsL[ART_L_OcamlLexer_module_889] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_module_889] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_module_889] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_890] = "OcamlLexer.module ::= `m`o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_890] = "";
		lhsL[ART_L_OcamlLexer_module_890] = ART_L_OcamlLexer_module;
		popD[ART_L_OcamlLexer_module_890] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_891] = "OcamlLexer.module ::= `m`o`d`u. `l`e";
		artLabelStrings[ART_L_OcamlLexer_module_891] = "";
		lhsL[ART_L_OcamlLexer_module_891] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_module_891] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_module_891] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_892] = "OcamlLexer.module ::= `m`o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_892] = "";
		lhsL[ART_L_OcamlLexer_module_892] = ART_L_OcamlLexer_module;
		popD[ART_L_OcamlLexer_module_892] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_893] = "OcamlLexer.module ::= `m`o`d`u`l. `e";
		artLabelStrings[ART_L_OcamlLexer_module_893] = "";
		lhsL[ART_L_OcamlLexer_module_893] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_module_893] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_module_893] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_894] = "OcamlLexer.module ::= `m`o`d`u`l`e";
		artLabelStrings[ART_L_OcamlLexer_module_894] = "";
		lhsL[ART_L_OcamlLexer_module_894] = ART_L_OcamlLexer_module;
		popD[ART_L_OcamlLexer_module_894] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_module_895] = "OcamlLexer.module ::= `m`o`d`u`l`e. ";
		artLabelStrings[ART_L_OcamlLexer_module_895] = "";
		lhsL[ART_L_OcamlLexer_module_895] = ART_L_OcamlLexer_module;
		artKindOfs[ART_L_OcamlLexer_module_895] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_module_895] = true;
		eoR_pL[ART_L_OcamlLexer_module_895] = true;
		popD[ART_L_OcamlLexer_module_895] = true;
	}

	public void artTableInitialiser_190() {
		artLabelInternalStrings[ART_L_OcamlLexer_mutable] = "OcamlLexer.mutable ";
		artLabelStrings[ART_L_OcamlLexer_mutable] = "mutable";
		artKindOfs[ART_L_OcamlLexer_mutable] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_898] = "OcamlLexer.mutable ::= . `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_898] = "";
		lhsL[ART_L_OcamlLexer_mutable_898] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_898] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mutable_898] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_899] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_899] = "";
		lhsL[ART_L_OcamlLexer_mutable_899] = ART_L_OcamlLexer_mutable;
		popD[ART_L_OcamlLexer_mutable_899] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_900] = "OcamlLexer.mutable ::= `m. `u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_900] = "";
		lhsL[ART_L_OcamlLexer_mutable_900] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_900] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_mutable_900] = true;
		popD[ART_L_OcamlLexer_mutable_900] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_901] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_901] = "";
		lhsL[ART_L_OcamlLexer_mutable_901] = ART_L_OcamlLexer_mutable;
		popD[ART_L_OcamlLexer_mutable_901] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_902] = "OcamlLexer.mutable ::= `m`u. `t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_902] = "";
		lhsL[ART_L_OcamlLexer_mutable_902] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_902] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mutable_902] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_903] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_903] = "";
		lhsL[ART_L_OcamlLexer_mutable_903] = ART_L_OcamlLexer_mutable;
		popD[ART_L_OcamlLexer_mutable_903] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_904] = "OcamlLexer.mutable ::= `m`u`t. `a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_904] = "";
		lhsL[ART_L_OcamlLexer_mutable_904] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_904] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mutable_904] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_905] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_905] = "";
		lhsL[ART_L_OcamlLexer_mutable_905] = ART_L_OcamlLexer_mutable;
		popD[ART_L_OcamlLexer_mutable_905] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_906] = "OcamlLexer.mutable ::= `m`u`t`a. `b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_906] = "";
		lhsL[ART_L_OcamlLexer_mutable_906] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_906] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mutable_906] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_907] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_907] = "";
		lhsL[ART_L_OcamlLexer_mutable_907] = ART_L_OcamlLexer_mutable;
		popD[ART_L_OcamlLexer_mutable_907] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_908] = "OcamlLexer.mutable ::= `m`u`t`a`b. `l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_908] = "";
		lhsL[ART_L_OcamlLexer_mutable_908] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_908] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mutable_908] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_909] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_909] = "";
		lhsL[ART_L_OcamlLexer_mutable_909] = ART_L_OcamlLexer_mutable;
		popD[ART_L_OcamlLexer_mutable_909] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_910] = "OcamlLexer.mutable ::= `m`u`t`a`b`l. `e";
		artLabelStrings[ART_L_OcamlLexer_mutable_910] = "";
		lhsL[ART_L_OcamlLexer_mutable_910] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_910] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_mutable_910] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_911] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e";
		artLabelStrings[ART_L_OcamlLexer_mutable_911] = "";
		lhsL[ART_L_OcamlLexer_mutable_911] = ART_L_OcamlLexer_mutable;
		popD[ART_L_OcamlLexer_mutable_911] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_mutable_912] = "OcamlLexer.mutable ::= `m`u`t`a`b`l`e. ";
		artLabelStrings[ART_L_OcamlLexer_mutable_912] = "";
		lhsL[ART_L_OcamlLexer_mutable_912] = ART_L_OcamlLexer_mutable;
		artKindOfs[ART_L_OcamlLexer_mutable_912] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_mutable_912] = true;
		eoR_pL[ART_L_OcamlLexer_mutable_912] = true;
		popD[ART_L_OcamlLexer_mutable_912] = true;
	}

	public void artTableInitialiser_191() {
		artLabelInternalStrings[ART_L_OcamlLexer_new] = "OcamlLexer.new ";
		artLabelStrings[ART_L_OcamlLexer_new] = "new";
		artKindOfs[ART_L_OcamlLexer_new] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_new_915] = "OcamlLexer.new ::= . `n`e`w";
		artLabelStrings[ART_L_OcamlLexer_new_915] = "";
		lhsL[ART_L_OcamlLexer_new_915] = ART_L_OcamlLexer_new;
		artKindOfs[ART_L_OcamlLexer_new_915] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_new_915] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_new_916] = "OcamlLexer.new ::= `n`e`w";
		artLabelStrings[ART_L_OcamlLexer_new_916] = "";
		lhsL[ART_L_OcamlLexer_new_916] = ART_L_OcamlLexer_new;
		popD[ART_L_OcamlLexer_new_916] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_new_917] = "OcamlLexer.new ::= `n. `e`w";
		artLabelStrings[ART_L_OcamlLexer_new_917] = "";
		lhsL[ART_L_OcamlLexer_new_917] = ART_L_OcamlLexer_new;
		artKindOfs[ART_L_OcamlLexer_new_917] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_new_917] = true;
		popD[ART_L_OcamlLexer_new_917] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_new_918] = "OcamlLexer.new ::= `n`e`w";
		artLabelStrings[ART_L_OcamlLexer_new_918] = "";
		lhsL[ART_L_OcamlLexer_new_918] = ART_L_OcamlLexer_new;
		popD[ART_L_OcamlLexer_new_918] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_new_919] = "OcamlLexer.new ::= `n`e. `w";
		artLabelStrings[ART_L_OcamlLexer_new_919] = "";
		lhsL[ART_L_OcamlLexer_new_919] = ART_L_OcamlLexer_new;
		artKindOfs[ART_L_OcamlLexer_new_919] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_new_919] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_new_920] = "OcamlLexer.new ::= `n`e`w";
		artLabelStrings[ART_L_OcamlLexer_new_920] = "";
		lhsL[ART_L_OcamlLexer_new_920] = ART_L_OcamlLexer_new;
		popD[ART_L_OcamlLexer_new_920] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_new_921] = "OcamlLexer.new ::= `n`e`w. ";
		artLabelStrings[ART_L_OcamlLexer_new_921] = "";
		lhsL[ART_L_OcamlLexer_new_921] = ART_L_OcamlLexer_new;
		artKindOfs[ART_L_OcamlLexer_new_921] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_new_921] = true;
		eoR_pL[ART_L_OcamlLexer_new_921] = true;
		popD[ART_L_OcamlLexer_new_921] = true;
	}

	public void artTableInitialiser_192() {
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk] = "OcamlLexer.not_asterisk ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk] = "not_asterisk";
		artKindOfs[ART_L_OcamlLexer_not_asterisk] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2584] = "OcamlLexer.not_asterisk ::= . `";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2584] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2584] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2584] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2584] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2585] = "OcamlLexer.not_asterisk ::= `";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2585] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2585] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2585] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2586] = "OcamlLexer.not_asterisk ::= `. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2586] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2586] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2586] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2586] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2586] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2586] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2588] = "OcamlLexer.not_asterisk ::= . `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2588] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2588] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2588] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2588] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2589] = "OcamlLexer.not_asterisk ::= `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2589] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2589] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2589] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2590] = "OcamlLexer.not_asterisk ::= `\\\\007. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2590] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2590] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2590] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2590] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2590] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2590] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2592] = "OcamlLexer.not_asterisk ::= . `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2592] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2592] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2592] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2592] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2593] = "OcamlLexer.not_asterisk ::= `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2593] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2593] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2593] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2594] = "OcamlLexer.not_asterisk ::= `\\\\010. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2594] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2594] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2594] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2594] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2594] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2594] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2596] = "OcamlLexer.not_asterisk ::= . `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2596] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2596] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2596] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2596] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2597] = "OcamlLexer.not_asterisk ::= `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2597] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2597] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2597] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2598] = "OcamlLexer.not_asterisk ::= `\\\\t. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2598] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2598] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2598] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2598] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2598] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2598] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2600] = "OcamlLexer.not_asterisk ::= . `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2600] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2600] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2600] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2600] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2601] = "OcamlLexer.not_asterisk ::= `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2601] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2601] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2601] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2602] = "OcamlLexer.not_asterisk ::= `\\\\013. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2602] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2602] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2602] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2602] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2602] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2602] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2604] = "OcamlLexer.not_asterisk ::= . `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2604] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2604] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2604] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2604] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2605] = "OcamlLexer.not_asterisk ::= `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2605] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2605] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2605] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2606] = "OcamlLexer.not_asterisk ::= `\\\\014. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2606] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2606] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2606] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2606] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2606] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2606] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2608] = "OcamlLexer.not_asterisk ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2608] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2608] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2608] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2608] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2609] = "OcamlLexer.not_asterisk ::= `e";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2609] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2609] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2609] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2610] = "OcamlLexer.not_asterisk ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2610] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2610] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2610] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2610] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2610] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2610] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2612] = "OcamlLexer.not_asterisk ::= . ` ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2612] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2612] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2612] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2612] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2613] = "OcamlLexer.not_asterisk ::= ` ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2613] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2613] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2613] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2614] = "OcamlLexer.not_asterisk ::= ` . ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2614] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2614] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2614] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2614] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2614] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2614] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2616] = "OcamlLexer.not_asterisk ::= . `!";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2616] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2616] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2616] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2616] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2617] = "OcamlLexer.not_asterisk ::= `!";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2617] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2617] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2617] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2618] = "OcamlLexer.not_asterisk ::= `!. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2618] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2618] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2618] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2618] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2618] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2618] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2620] = "OcamlLexer.not_asterisk ::= . `\\\"";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2620] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2620] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2620] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2620] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2621] = "OcamlLexer.not_asterisk ::= `\\\"";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2621] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2621] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2621] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2622] = "OcamlLexer.not_asterisk ::= `\\\". ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2622] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2622] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2622] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2622] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2622] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2622] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2624] = "OcamlLexer.not_asterisk ::= . `#";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2624] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2624] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2624] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2624] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2625] = "OcamlLexer.not_asterisk ::= `#";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2625] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2625] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2625] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2626] = "OcamlLexer.not_asterisk ::= `#. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2626] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2626] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2626] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2626] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2626] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2626] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2628] = "OcamlLexer.not_asterisk ::= . `$";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2628] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2628] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2628] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2628] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2629] = "OcamlLexer.not_asterisk ::= `$";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2629] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2629] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2629] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2630] = "OcamlLexer.not_asterisk ::= `$. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2630] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2630] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2630] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2630] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2630] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2630] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2632] = "OcamlLexer.not_asterisk ::= . `%";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2632] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2632] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2632] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2632] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2633] = "OcamlLexer.not_asterisk ::= `%";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2633] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2633] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2633] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2634] = "OcamlLexer.not_asterisk ::= `%. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2634] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2634] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2634] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2634] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2634] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2634] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2636] = "OcamlLexer.not_asterisk ::= . `&";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2636] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2636] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2636] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2636] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2637] = "OcamlLexer.not_asterisk ::= `&";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2637] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2637] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2637] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2638] = "OcamlLexer.not_asterisk ::= `&. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2638] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2638] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2638] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2638] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2638] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2638] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2640] = "OcamlLexer.not_asterisk ::= . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2640] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2640] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2640] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2640] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2641] = "OcamlLexer.not_asterisk ::= `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2641] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2641] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2641] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2642] = "OcamlLexer.not_asterisk ::= `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2642] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2642] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2642] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2642] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2642] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2642] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2644] = "OcamlLexer.not_asterisk ::= . `(";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2644] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2644] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2644] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2644] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2645] = "OcamlLexer.not_asterisk ::= `(";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2645] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2645] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2645] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2646] = "OcamlLexer.not_asterisk ::= `(. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2646] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2646] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2646] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2646] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2646] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2646] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2648] = "OcamlLexer.not_asterisk ::= . `)";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2648] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2648] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2648] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2648] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2649] = "OcamlLexer.not_asterisk ::= `)";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2649] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2649] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2649] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2650] = "OcamlLexer.not_asterisk ::= `). ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2650] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2650] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2650] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2650] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2650] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2650] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2652] = "OcamlLexer.not_asterisk ::= . `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2652] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2652] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2652] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2652] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2653] = "OcamlLexer.not_asterisk ::= `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2653] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2653] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2653] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2654] = "OcamlLexer.not_asterisk ::= `\\\\r. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2654] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2654] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2654] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2654] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2654] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2654] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2656] = "OcamlLexer.not_asterisk ::= . `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2656] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2656] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2656] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2656] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2657] = "OcamlLexer.not_asterisk ::= `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2657] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2657] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2657] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2658] = "OcamlLexer.not_asterisk ::= `\\\\n. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2658] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2658] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2658] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2658] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2658] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2658] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2660] = "OcamlLexer.not_asterisk ::= . `+";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2660] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2660] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2660] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2660] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2661] = "OcamlLexer.not_asterisk ::= `+";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2661] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2661] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2661] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2662] = "OcamlLexer.not_asterisk ::= `+. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2662] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2662] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2662] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2662] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2662] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2662] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2664] = "OcamlLexer.not_asterisk ::= . `,";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2664] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2664] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2664] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2664] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2665] = "OcamlLexer.not_asterisk ::= `,";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2665] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2665] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2665] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2666] = "OcamlLexer.not_asterisk ::= `,. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2666] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2666] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2666] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2666] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2666] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2666] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2668] = "OcamlLexer.not_asterisk ::= . `-";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2668] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2668] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2668] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2668] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2669] = "OcamlLexer.not_asterisk ::= `-";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2669] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2669] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2669] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2670] = "OcamlLexer.not_asterisk ::= `-. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2670] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2670] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2670] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2670] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2670] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2670] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2672] = "OcamlLexer.not_asterisk ::= . `.";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2672] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2672] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2672] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2672] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2673] = "OcamlLexer.not_asterisk ::= `.";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2673] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2673] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2673] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2674] = "OcamlLexer.not_asterisk ::= `.. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2674] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2674] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2674] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2674] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2674] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2674] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2676] = "OcamlLexer.not_asterisk ::= . `/";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2676] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2676] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2676] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2676] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2677] = "OcamlLexer.not_asterisk ::= `/";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2677] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2677] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2677] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2678] = "OcamlLexer.not_asterisk ::= `/. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2678] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2678] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2678] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2678] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2678] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2678] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2680] = "OcamlLexer.not_asterisk ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2680] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2680] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2680] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2680] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2681] = "OcamlLexer.not_asterisk ::= `0";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2681] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2681] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2681] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2682] = "OcamlLexer.not_asterisk ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2682] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2682] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2682] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2682] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2682] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2682] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2684] = "OcamlLexer.not_asterisk ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2684] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2684] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2684] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2684] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2685] = "OcamlLexer.not_asterisk ::= `1";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2685] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2685] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2685] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2686] = "OcamlLexer.not_asterisk ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2686] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2686] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2686] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2686] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2686] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2686] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2688] = "OcamlLexer.not_asterisk ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2688] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2688] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2688] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2688] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2689] = "OcamlLexer.not_asterisk ::= `2";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2689] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2689] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2689] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2690] = "OcamlLexer.not_asterisk ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2690] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2690] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2690] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2690] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2690] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2690] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2692] = "OcamlLexer.not_asterisk ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2692] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2692] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2692] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2692] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2693] = "OcamlLexer.not_asterisk ::= `3";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2693] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2693] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2693] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2694] = "OcamlLexer.not_asterisk ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2694] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2694] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2694] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2694] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2694] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2694] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2696] = "OcamlLexer.not_asterisk ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2696] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2696] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2696] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2696] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2697] = "OcamlLexer.not_asterisk ::= `4";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2697] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2697] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2697] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2698] = "OcamlLexer.not_asterisk ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2698] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2698] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2698] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2698] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2698] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2698] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2700] = "OcamlLexer.not_asterisk ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2700] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2700] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2700] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2700] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2701] = "OcamlLexer.not_asterisk ::= `5";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2701] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2701] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2701] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2702] = "OcamlLexer.not_asterisk ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2702] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2702] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2702] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2702] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2702] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2702] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2704] = "OcamlLexer.not_asterisk ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2704] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2704] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2704] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2704] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2705] = "OcamlLexer.not_asterisk ::= `6";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2705] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2705] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2705] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2706] = "OcamlLexer.not_asterisk ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2706] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2706] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2706] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2706] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2706] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2706] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2708] = "OcamlLexer.not_asterisk ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2708] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2708] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2708] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2708] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2709] = "OcamlLexer.not_asterisk ::= `7";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2709] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2709] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2709] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2710] = "OcamlLexer.not_asterisk ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2710] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2710] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2710] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2710] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2710] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2710] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2712] = "OcamlLexer.not_asterisk ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2712] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2712] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2712] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2712] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2713] = "OcamlLexer.not_asterisk ::= `8";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2713] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2713] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2713] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2714] = "OcamlLexer.not_asterisk ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2714] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2714] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2714] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2714] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2714] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2714] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2716] = "OcamlLexer.not_asterisk ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2716] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2716] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2716] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2716] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2717] = "OcamlLexer.not_asterisk ::= `9";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2717] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2717] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2717] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2718] = "OcamlLexer.not_asterisk ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2718] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2718] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2718] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2718] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2718] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2718] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2720] = "OcamlLexer.not_asterisk ::= . `:";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2720] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2720] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2720] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2720] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2721] = "OcamlLexer.not_asterisk ::= `:";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2721] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2721] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2721] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2722] = "OcamlLexer.not_asterisk ::= `:. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2722] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2722] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2722] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2722] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2722] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2722] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2724] = "OcamlLexer.not_asterisk ::= . `;";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2724] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2724] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2724] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2724] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2725] = "OcamlLexer.not_asterisk ::= `;";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2725] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2725] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2725] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2726] = "OcamlLexer.not_asterisk ::= `;. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2726] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2726] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2726] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2726] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2726] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2726] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2728] = "OcamlLexer.not_asterisk ::= . `<";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2728] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2728] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2728] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2728] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2729] = "OcamlLexer.not_asterisk ::= `<";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2729] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2729] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2729] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2730] = "OcamlLexer.not_asterisk ::= `<. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2730] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2730] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2730] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2730] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2730] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2730] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2732] = "OcamlLexer.not_asterisk ::= . `=";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2732] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2732] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2732] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2732] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2733] = "OcamlLexer.not_asterisk ::= `=";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2733] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2733] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2733] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2734] = "OcamlLexer.not_asterisk ::= `=. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2734] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2734] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2734] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2734] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2734] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2734] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2736] = "OcamlLexer.not_asterisk ::= . `>";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2736] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2736] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2736] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2736] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2737] = "OcamlLexer.not_asterisk ::= `>";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2737] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2737] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2737] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2738] = "OcamlLexer.not_asterisk ::= `>. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2738] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2738] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2738] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2738] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2738] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2738] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2740] = "OcamlLexer.not_asterisk ::= . `?";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2740] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2740] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2740] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2740] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2741] = "OcamlLexer.not_asterisk ::= `?";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2741] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2741] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2741] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2742] = "OcamlLexer.not_asterisk ::= `?. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2742] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2742] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2742] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2742] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2742] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2742] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2744] = "OcamlLexer.not_asterisk ::= . `@";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2744] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2744] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2744] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2744] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2745] = "OcamlLexer.not_asterisk ::= `@";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2745] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2745] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2745] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2746] = "OcamlLexer.not_asterisk ::= `@. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2746] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2746] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2746] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2746] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2746] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2746] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2748] = "OcamlLexer.not_asterisk ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2748] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2748] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2748] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2748] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2749] = "OcamlLexer.not_asterisk ::= `A";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2749] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2749] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2749] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2750] = "OcamlLexer.not_asterisk ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2750] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2750] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2750] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2750] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2750] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2750] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2752] = "OcamlLexer.not_asterisk ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2752] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2752] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2752] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2752] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2753] = "OcamlLexer.not_asterisk ::= `B";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2753] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2753] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2753] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2754] = "OcamlLexer.not_asterisk ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2754] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2754] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2754] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2754] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2754] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2754] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2756] = "OcamlLexer.not_asterisk ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2756] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2756] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2756] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2756] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2757] = "OcamlLexer.not_asterisk ::= `C";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2757] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2757] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2757] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2758] = "OcamlLexer.not_asterisk ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2758] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2758] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2758] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2758] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2758] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2758] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2760] = "OcamlLexer.not_asterisk ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2760] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2760] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2760] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2760] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2761] = "OcamlLexer.not_asterisk ::= `D";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2761] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2761] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2761] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2762] = "OcamlLexer.not_asterisk ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2762] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2762] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2762] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2762] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2762] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2762] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2764] = "OcamlLexer.not_asterisk ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2764] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2764] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2764] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2764] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2765] = "OcamlLexer.not_asterisk ::= `E";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2765] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2765] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2765] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2766] = "OcamlLexer.not_asterisk ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2766] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2766] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2766] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2766] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2766] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2766] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2768] = "OcamlLexer.not_asterisk ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2768] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2768] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2768] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2768] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2769] = "OcamlLexer.not_asterisk ::= `F";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2769] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2769] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2769] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2770] = "OcamlLexer.not_asterisk ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2770] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2770] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2770] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2770] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2770] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2770] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2772] = "OcamlLexer.not_asterisk ::= . `G";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2772] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2772] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2772] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2772] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2773] = "OcamlLexer.not_asterisk ::= `G";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2773] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2773] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2773] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2774] = "OcamlLexer.not_asterisk ::= `G. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2774] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2774] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2774] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2774] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2774] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2774] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2776] = "OcamlLexer.not_asterisk ::= . `H";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2776] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2776] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2776] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2776] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2777] = "OcamlLexer.not_asterisk ::= `H";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2777] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2777] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2777] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2778] = "OcamlLexer.not_asterisk ::= `H. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2778] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2778] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2778] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2778] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2778] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2778] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2780] = "OcamlLexer.not_asterisk ::= . `I";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2780] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2780] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2780] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2780] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2781] = "OcamlLexer.not_asterisk ::= `I";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2781] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2781] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2781] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2782] = "OcamlLexer.not_asterisk ::= `I. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2782] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2782] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2782] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2782] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2782] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2782] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2784] = "OcamlLexer.not_asterisk ::= . `J";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2784] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2784] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2784] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2784] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2785] = "OcamlLexer.not_asterisk ::= `J";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2785] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2785] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2785] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2786] = "OcamlLexer.not_asterisk ::= `J. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2786] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2786] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2786] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2786] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2786] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2786] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2788] = "OcamlLexer.not_asterisk ::= . `K";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2788] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2788] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2788] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2788] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2789] = "OcamlLexer.not_asterisk ::= `K";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2789] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2789] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2789] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2790] = "OcamlLexer.not_asterisk ::= `K. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2790] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2790] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2790] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2790] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2790] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2790] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2792] = "OcamlLexer.not_asterisk ::= . `L";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2792] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2792] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2792] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2792] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2793] = "OcamlLexer.not_asterisk ::= `L";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2793] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2793] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2793] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2794] = "OcamlLexer.not_asterisk ::= `L. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2794] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2794] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2794] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2794] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2794] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2794] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2796] = "OcamlLexer.not_asterisk ::= . `M";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2796] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2796] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2796] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2796] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2797] = "OcamlLexer.not_asterisk ::= `M";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2797] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2797] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2797] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2798] = "OcamlLexer.not_asterisk ::= `M. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2798] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2798] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2798] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2798] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2798] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2798] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2800] = "OcamlLexer.not_asterisk ::= . `N";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2800] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2800] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2800] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2800] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2801] = "OcamlLexer.not_asterisk ::= `N";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2801] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2801] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2801] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2802] = "OcamlLexer.not_asterisk ::= `N. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2802] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2802] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2802] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2802] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2802] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2802] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2804] = "OcamlLexer.not_asterisk ::= . `O";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2804] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2804] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2804] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2804] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2805] = "OcamlLexer.not_asterisk ::= `O";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2805] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2805] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2805] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2806] = "OcamlLexer.not_asterisk ::= `O. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2806] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2806] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2806] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2806] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2806] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2806] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2808] = "OcamlLexer.not_asterisk ::= . `P";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2808] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2808] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2808] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2808] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2809] = "OcamlLexer.not_asterisk ::= `P";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2809] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2809] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2809] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2810] = "OcamlLexer.not_asterisk ::= `P. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2810] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2810] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2810] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2810] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2810] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2810] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2812] = "OcamlLexer.not_asterisk ::= . `Q";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2812] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2812] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2812] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2812] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2813] = "OcamlLexer.not_asterisk ::= `Q";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2813] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2813] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2813] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2814] = "OcamlLexer.not_asterisk ::= `Q. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2814] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2814] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2814] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2814] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2814] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2814] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2816] = "OcamlLexer.not_asterisk ::= . `R";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2816] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2816] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2816] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2816] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2817] = "OcamlLexer.not_asterisk ::= `R";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2817] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2817] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2817] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2818] = "OcamlLexer.not_asterisk ::= `R. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2818] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2818] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2818] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2818] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2818] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2818] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2820] = "OcamlLexer.not_asterisk ::= . `S";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2820] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2820] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2820] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2820] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2821] = "OcamlLexer.not_asterisk ::= `S";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2821] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2821] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2821] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2822] = "OcamlLexer.not_asterisk ::= `S. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2822] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2822] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2822] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2822] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2822] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2822] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2824] = "OcamlLexer.not_asterisk ::= . `T";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2824] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2824] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2824] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2824] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2825] = "OcamlLexer.not_asterisk ::= `T";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2825] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2825] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2825] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2826] = "OcamlLexer.not_asterisk ::= `T. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2826] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2826] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2826] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2826] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2826] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2826] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2828] = "OcamlLexer.not_asterisk ::= . `U";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2828] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2828] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2828] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2828] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2829] = "OcamlLexer.not_asterisk ::= `U";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2829] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2829] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2829] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2830] = "OcamlLexer.not_asterisk ::= `U. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2830] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2830] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2830] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2830] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2830] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2830] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2832] = "OcamlLexer.not_asterisk ::= . `V";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2832] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2832] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2832] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2832] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2833] = "OcamlLexer.not_asterisk ::= `V";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2833] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2833] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2833] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2834] = "OcamlLexer.not_asterisk ::= `V. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2834] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2834] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2834] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2834] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2834] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2834] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2836] = "OcamlLexer.not_asterisk ::= . `W";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2836] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2836] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2836] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2836] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2837] = "OcamlLexer.not_asterisk ::= `W";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2837] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2837] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2837] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2838] = "OcamlLexer.not_asterisk ::= `W. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2838] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2838] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2838] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2838] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2838] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2838] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2840] = "OcamlLexer.not_asterisk ::= . `X";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2840] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2840] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2840] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2840] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2841] = "OcamlLexer.not_asterisk ::= `X";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2841] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2841] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2841] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2842] = "OcamlLexer.not_asterisk ::= `X. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2842] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2842] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2842] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2842] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2842] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2842] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2844] = "OcamlLexer.not_asterisk ::= . `Y";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2844] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2844] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2844] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2844] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2845] = "OcamlLexer.not_asterisk ::= `Y";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2845] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2845] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2845] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2846] = "OcamlLexer.not_asterisk ::= `Y. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2846] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2846] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2846] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2846] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2846] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2846] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2848] = "OcamlLexer.not_asterisk ::= . `Z";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2848] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2848] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2848] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2848] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2849] = "OcamlLexer.not_asterisk ::= `Z";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2849] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2849] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2849] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2850] = "OcamlLexer.not_asterisk ::= `Z. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2850] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2850] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2850] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2850] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2850] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2850] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2852] = "OcamlLexer.not_asterisk ::= . `[";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2852] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2852] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2852] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2852] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2853] = "OcamlLexer.not_asterisk ::= `[";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2853] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2853] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2853] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2854] = "OcamlLexer.not_asterisk ::= `[. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2854] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2854] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2854] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2854] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2854] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2854] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2856] = "OcamlLexer.not_asterisk ::= . `\\\\\\\\";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2856] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2856] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2856] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2856] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2857] = "OcamlLexer.not_asterisk ::= `\\\\\\\\";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2857] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2857] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2857] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2858] = "OcamlLexer.not_asterisk ::= `\\\\\\\\. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2858] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2858] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2858] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2858] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2858] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2858] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2860] = "OcamlLexer.not_asterisk ::= . `]";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2860] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2860] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2860] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2860] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2861] = "OcamlLexer.not_asterisk ::= `]";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2861] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2861] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2861] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2862] = "OcamlLexer.not_asterisk ::= `]. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2862] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2862] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2862] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2862] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2862] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2862] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2864] = "OcamlLexer.not_asterisk ::= . `^";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2864] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2864] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2864] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2864] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2865] = "OcamlLexer.not_asterisk ::= `^";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2865] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2865] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2865] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2866] = "OcamlLexer.not_asterisk ::= `^. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2866] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2866] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2866] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2866] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2866] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2866] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2868] = "OcamlLexer.not_asterisk ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2868] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2868] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2868] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2868] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2869] = "OcamlLexer.not_asterisk ::= `_";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2869] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2869] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2869] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2870] = "OcamlLexer.not_asterisk ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2870] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2870] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2870] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2870] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2870] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2870] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2872] = "OcamlLexer.not_asterisk ::= . `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2872] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2872] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2872] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2872] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2873] = "OcamlLexer.not_asterisk ::= `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2873] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2873] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2873] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2874] = "OcamlLexer.not_asterisk ::= `\\\\`. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2874] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2874] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2874] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2874] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2874] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2874] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2876] = "OcamlLexer.not_asterisk ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2876] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2876] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2876] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2876] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2877] = "OcamlLexer.not_asterisk ::= `a";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2877] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2877] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2877] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2878] = "OcamlLexer.not_asterisk ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2878] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2878] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2878] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2878] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2878] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2878] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2880] = "OcamlLexer.not_asterisk ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2880] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2880] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2880] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2880] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2881] = "OcamlLexer.not_asterisk ::= `b";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2881] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2881] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2881] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2882] = "OcamlLexer.not_asterisk ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2882] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2882] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2882] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2882] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2882] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2882] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2884] = "OcamlLexer.not_asterisk ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2884] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2884] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2884] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2884] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2885] = "OcamlLexer.not_asterisk ::= `c";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2885] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2885] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2885] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2886] = "OcamlLexer.not_asterisk ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2886] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2886] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2886] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2886] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2886] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2886] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2888] = "OcamlLexer.not_asterisk ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2888] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2888] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2888] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2888] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2889] = "OcamlLexer.not_asterisk ::= `d";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2889] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2889] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2889] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2890] = "OcamlLexer.not_asterisk ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2890] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2890] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2890] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2890] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2890] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2890] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2892] = "OcamlLexer.not_asterisk ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2892] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2892] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2892] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2892] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2893] = "OcamlLexer.not_asterisk ::= `f";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2893] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2893] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2893] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2894] = "OcamlLexer.not_asterisk ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2894] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2894] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2894] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2894] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2894] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2894] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2896] = "OcamlLexer.not_asterisk ::= . `g";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2896] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2896] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2896] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2896] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2897] = "OcamlLexer.not_asterisk ::= `g";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2897] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2897] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2897] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2898] = "OcamlLexer.not_asterisk ::= `g. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2898] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2898] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2898] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2898] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2898] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2898] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2900] = "OcamlLexer.not_asterisk ::= . `h";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2900] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2900] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2900] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2900] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2901] = "OcamlLexer.not_asterisk ::= `h";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2901] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2901] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2901] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2902] = "OcamlLexer.not_asterisk ::= `h. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2902] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2902] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2902] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2902] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2902] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2902] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2904] = "OcamlLexer.not_asterisk ::= . `i";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2904] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2904] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2904] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2904] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2905] = "OcamlLexer.not_asterisk ::= `i";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2905] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2905] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2905] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2906] = "OcamlLexer.not_asterisk ::= `i. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2906] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2906] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2906] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2906] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2906] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2906] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2908] = "OcamlLexer.not_asterisk ::= . `j";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2908] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2908] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2908] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2908] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2909] = "OcamlLexer.not_asterisk ::= `j";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2909] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2909] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2909] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2910] = "OcamlLexer.not_asterisk ::= `j. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2910] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2910] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2910] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2910] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2910] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2910] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2912] = "OcamlLexer.not_asterisk ::= . `k";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2912] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2912] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2912] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2912] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2913] = "OcamlLexer.not_asterisk ::= `k";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2913] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2913] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2913] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2914] = "OcamlLexer.not_asterisk ::= `k. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2914] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2914] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2914] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2914] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2914] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2914] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2916] = "OcamlLexer.not_asterisk ::= . `l";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2916] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2916] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2916] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2916] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2917] = "OcamlLexer.not_asterisk ::= `l";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2917] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2917] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2917] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2918] = "OcamlLexer.not_asterisk ::= `l. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2918] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2918] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2918] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2918] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2918] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2918] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2920] = "OcamlLexer.not_asterisk ::= . `m";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2920] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2920] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2920] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2920] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2921] = "OcamlLexer.not_asterisk ::= `m";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2921] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2921] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2921] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2922] = "OcamlLexer.not_asterisk ::= `m. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2922] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2922] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2922] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2922] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2922] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2922] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2924] = "OcamlLexer.not_asterisk ::= . `n";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2924] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2924] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2924] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2924] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2925] = "OcamlLexer.not_asterisk ::= `n";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2925] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2925] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2925] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2926] = "OcamlLexer.not_asterisk ::= `n. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2926] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2926] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2926] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2926] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2926] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2926] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2928] = "OcamlLexer.not_asterisk ::= . `o";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2928] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2928] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2928] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2928] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2929] = "OcamlLexer.not_asterisk ::= `o";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2929] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2929] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2929] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2930] = "OcamlLexer.not_asterisk ::= `o. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2930] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2930] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2930] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2930] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2930] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2930] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2932] = "OcamlLexer.not_asterisk ::= . `p";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2932] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2932] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2932] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2932] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2933] = "OcamlLexer.not_asterisk ::= `p";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2933] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2933] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2933] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2934] = "OcamlLexer.not_asterisk ::= `p. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2934] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2934] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2934] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2934] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2934] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2934] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2936] = "OcamlLexer.not_asterisk ::= . `q";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2936] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2936] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2936] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2936] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2937] = "OcamlLexer.not_asterisk ::= `q";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2937] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2937] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2937] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2938] = "OcamlLexer.not_asterisk ::= `q. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2938] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2938] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2938] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2938] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2938] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2938] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2940] = "OcamlLexer.not_asterisk ::= . `r";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2940] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2940] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2940] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2940] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2941] = "OcamlLexer.not_asterisk ::= `r";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2941] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2941] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2941] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2942] = "OcamlLexer.not_asterisk ::= `r. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2942] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2942] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2942] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2942] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2942] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2942] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2944] = "OcamlLexer.not_asterisk ::= . `s";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2944] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2944] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2944] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2944] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2945] = "OcamlLexer.not_asterisk ::= `s";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2945] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2945] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2945] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2946] = "OcamlLexer.not_asterisk ::= `s. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2946] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2946] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2946] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2946] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2946] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2946] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2948] = "OcamlLexer.not_asterisk ::= . `t";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2948] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2948] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2948] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2948] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2949] = "OcamlLexer.not_asterisk ::= `t";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2949] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2949] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2949] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2950] = "OcamlLexer.not_asterisk ::= `t. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2950] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2950] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2950] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2950] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2950] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2950] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2952] = "OcamlLexer.not_asterisk ::= . `u";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2952] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2952] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2952] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2952] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2953] = "OcamlLexer.not_asterisk ::= `u";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2953] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2953] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2953] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2954] = "OcamlLexer.not_asterisk ::= `u. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2954] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2954] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2954] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2954] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2954] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2954] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2956] = "OcamlLexer.not_asterisk ::= . `v";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2956] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2956] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2956] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2956] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2957] = "OcamlLexer.not_asterisk ::= `v";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2957] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2957] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2957] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2958] = "OcamlLexer.not_asterisk ::= `v. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2958] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2958] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2958] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2958] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2958] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2958] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2960] = "OcamlLexer.not_asterisk ::= . `w";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2960] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2960] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2960] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2960] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2961] = "OcamlLexer.not_asterisk ::= `w";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2961] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2961] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2961] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2962] = "OcamlLexer.not_asterisk ::= `w. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2962] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2962] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2962] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2962] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2962] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2962] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2964] = "OcamlLexer.not_asterisk ::= . `x";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2964] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2964] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2964] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2964] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2965] = "OcamlLexer.not_asterisk ::= `x";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2965] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2965] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2965] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2966] = "OcamlLexer.not_asterisk ::= `x. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2966] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2966] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2966] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2966] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2966] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2966] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2968] = "OcamlLexer.not_asterisk ::= . `y";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2968] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2968] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2968] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2968] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2969] = "OcamlLexer.not_asterisk ::= `y";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2969] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2969] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2969] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2970] = "OcamlLexer.not_asterisk ::= `y. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2970] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2970] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2970] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2970] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2970] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2970] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2972] = "OcamlLexer.not_asterisk ::= . `z";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2972] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2972] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2972] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2972] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2973] = "OcamlLexer.not_asterisk ::= `z";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2973] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2973] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2973] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2974] = "OcamlLexer.not_asterisk ::= `z. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2974] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2974] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2974] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2974] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2974] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2974] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2976] = "OcamlLexer.not_asterisk ::= . `{";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2976] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2976] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2976] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2976] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2977] = "OcamlLexer.not_asterisk ::= `{";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2977] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2977] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2977] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2978] = "OcamlLexer.not_asterisk ::= `{. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2978] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2978] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2978] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2978] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2978] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2978] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2980] = "OcamlLexer.not_asterisk ::= . `|";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2980] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2980] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2980] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2980] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2981] = "OcamlLexer.not_asterisk ::= `|";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2981] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2981] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2981] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2982] = "OcamlLexer.not_asterisk ::= `|. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2982] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2982] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2982] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2982] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2982] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2982] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2984] = "OcamlLexer.not_asterisk ::= . `}";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2984] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2984] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2984] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2984] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2985] = "OcamlLexer.not_asterisk ::= `}";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2985] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2985] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2985] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2986] = "OcamlLexer.not_asterisk ::= `}. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2986] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2986] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2986] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2986] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2986] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2986] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2988] = "OcamlLexer.not_asterisk ::= . `~";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2988] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2988] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2988] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_asterisk_2988] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2989] = "OcamlLexer.not_asterisk ::= `~";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2989] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2989] = ART_L_OcamlLexer_not_asterisk;
		popD[ART_L_OcamlLexer_not_asterisk_2989] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_asterisk_2990] = "OcamlLexer.not_asterisk ::= `~. ";
		artLabelStrings[ART_L_OcamlLexer_not_asterisk_2990] = "";
		lhsL[ART_L_OcamlLexer_not_asterisk_2990] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_asterisk_2990] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_asterisk_2990] = true;
		eoR_pL[ART_L_OcamlLexer_not_asterisk_2990] = true;
		popD[ART_L_OcamlLexer_not_asterisk_2990] = true;
	}

	public void artTableInitialiser_193() {
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment] = "OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment] = "not_comment";
		artKindOfs[ART_L_OcamlLexer_not_comment] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1939] = "OcamlLexer.not_comment ::= . `OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1939] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1939] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1939] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1940] = "OcamlLexer.not_comment ::= `OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1940] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1940] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1941] = "OcamlLexer.not_comment ::= `. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1941] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1941] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1941] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1941] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1943] = "OcamlLexer.not_comment ::= `OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1943] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1943] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1943] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1943] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1943] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1943] = true;
		popD[ART_L_OcamlLexer_not_comment_1943] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1945] = "OcamlLexer.not_comment ::= . `\\\\007OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1945] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1945] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1945] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1946] = "OcamlLexer.not_comment ::= `\\\\007OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1946] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1946] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1947] = "OcamlLexer.not_comment ::= `\\\\007. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1947] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1947] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1947] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1947] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1949] = "OcamlLexer.not_comment ::= `\\\\007OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1949] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1949] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1949] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1949] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1949] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1949] = true;
		popD[ART_L_OcamlLexer_not_comment_1949] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1951] = "OcamlLexer.not_comment ::= . `\\\\010OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1951] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1951] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1951] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1952] = "OcamlLexer.not_comment ::= `\\\\010OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1952] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1952] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1953] = "OcamlLexer.not_comment ::= `\\\\010. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1953] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1953] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1953] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1953] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1955] = "OcamlLexer.not_comment ::= `\\\\010OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1955] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1955] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1955] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1955] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1955] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1955] = true;
		popD[ART_L_OcamlLexer_not_comment_1955] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1957] = "OcamlLexer.not_comment ::= . `\\\\tOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1957] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1957] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1957] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1958] = "OcamlLexer.not_comment ::= `\\\\tOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1958] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1958] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1959] = "OcamlLexer.not_comment ::= `\\\\t. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1959] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1959] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1959] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1959] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1961] = "OcamlLexer.not_comment ::= `\\\\tOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1961] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1961] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1961] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1961] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1961] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1961] = true;
		popD[ART_L_OcamlLexer_not_comment_1961] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1963] = "OcamlLexer.not_comment ::= . `\\\\013OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1963] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1963] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1963] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1964] = "OcamlLexer.not_comment ::= `\\\\013OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1964] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1964] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1965] = "OcamlLexer.not_comment ::= `\\\\013. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1965] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1965] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1965] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1965] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1967] = "OcamlLexer.not_comment ::= `\\\\013OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1967] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1967] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1967] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1967] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1967] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1967] = true;
		popD[ART_L_OcamlLexer_not_comment_1967] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1969] = "OcamlLexer.not_comment ::= . `\\\\014OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1969] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1969] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1969] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1970] = "OcamlLexer.not_comment ::= `\\\\014OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1970] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1970] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1971] = "OcamlLexer.not_comment ::= `\\\\014. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1971] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1971] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1971] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1971] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1973] = "OcamlLexer.not_comment ::= `\\\\014OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1973] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1973] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1973] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1973] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1973] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1973] = true;
		popD[ART_L_OcamlLexer_not_comment_1973] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1975] = "OcamlLexer.not_comment ::= . `eOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1975] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1975] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1975] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1976] = "OcamlLexer.not_comment ::= `eOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1976] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1976] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1977] = "OcamlLexer.not_comment ::= `e. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1977] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1977] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1977] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1977] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1979] = "OcamlLexer.not_comment ::= `eOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1979] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1979] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1979] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1979] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1979] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1979] = true;
		popD[ART_L_OcamlLexer_not_comment_1979] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1981] = "OcamlLexer.not_comment ::= . ` OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1981] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1981] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1981] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1982] = "OcamlLexer.not_comment ::= ` OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1982] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1982] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1983] = "OcamlLexer.not_comment ::= ` . OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1983] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1983] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1983] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1983] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1985] = "OcamlLexer.not_comment ::= ` OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1985] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1985] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1985] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1985] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1985] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1985] = true;
		popD[ART_L_OcamlLexer_not_comment_1985] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1987] = "OcamlLexer.not_comment ::= . `!OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1987] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1987] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1987] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1988] = "OcamlLexer.not_comment ::= `!OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1988] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1988] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1989] = "OcamlLexer.not_comment ::= `!. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1989] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1989] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1989] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1989] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1991] = "OcamlLexer.not_comment ::= `!OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1991] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1991] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1991] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1991] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1991] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1991] = true;
		popD[ART_L_OcamlLexer_not_comment_1991] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1993] = "OcamlLexer.not_comment ::= . `\\\"OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1993] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1993] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1993] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1994] = "OcamlLexer.not_comment ::= `\\\"OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1994] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1994] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1995] = "OcamlLexer.not_comment ::= `\\\". OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1995] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1995] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1995] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_1995] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1997] = "OcamlLexer.not_comment ::= `\\\"OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1997] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1997] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_1997] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1997] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_1997] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_1997] = true;
		popD[ART_L_OcamlLexer_not_comment_1997] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_1999] = "OcamlLexer.not_comment ::= . `#OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_1999] = "";
		lhsL[ART_L_OcamlLexer_not_comment_1999] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_1999] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2000] = "OcamlLexer.not_comment ::= `#OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2000] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2000] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2001] = "OcamlLexer.not_comment ::= `#. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2001] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2001] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2001] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2001] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2003] = "OcamlLexer.not_comment ::= `#OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2003] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2003] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2003] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2003] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2003] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2003] = true;
		popD[ART_L_OcamlLexer_not_comment_2003] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2005] = "OcamlLexer.not_comment ::= . `$OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2005] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2005] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2005] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2006] = "OcamlLexer.not_comment ::= `$OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2006] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2006] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2007] = "OcamlLexer.not_comment ::= `$. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2007] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2007] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2007] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2007] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2009] = "OcamlLexer.not_comment ::= `$OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2009] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2009] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2009] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2009] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2009] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2009] = true;
		popD[ART_L_OcamlLexer_not_comment_2009] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2011] = "OcamlLexer.not_comment ::= . `%OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2011] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2011] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2011] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2012] = "OcamlLexer.not_comment ::= `%OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2012] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2012] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2013] = "OcamlLexer.not_comment ::= `%. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2013] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2013] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2013] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2013] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2015] = "OcamlLexer.not_comment ::= `%OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2015] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2015] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2015] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2015] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2015] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2015] = true;
		popD[ART_L_OcamlLexer_not_comment_2015] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2017] = "OcamlLexer.not_comment ::= . `&OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2017] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2017] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2017] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2018] = "OcamlLexer.not_comment ::= `&OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2018] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2018] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2019] = "OcamlLexer.not_comment ::= `&. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2019] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2019] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2019] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2019] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2021] = "OcamlLexer.not_comment ::= `&OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2021] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2021] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2021] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2021] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2021] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2021] = true;
		popD[ART_L_OcamlLexer_not_comment_2021] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2023] = "OcamlLexer.not_comment ::= . `\\\\'OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2023] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2023] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2023] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2024] = "OcamlLexer.not_comment ::= `\\\\'OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2024] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2024] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2025] = "OcamlLexer.not_comment ::= `\\\\'. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2025] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2025] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2025] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2025] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2027] = "OcamlLexer.not_comment ::= `\\\\'OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2027] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2027] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2027] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2027] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2027] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2027] = true;
		popD[ART_L_OcamlLexer_not_comment_2027] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2029] = "OcamlLexer.not_comment ::= . `(( OcamlLexer.not_asterisk OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2029] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2029] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2029] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2030] = "OcamlLexer.not_comment ::= `(( OcamlLexer.not_asterisk OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2030] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2030] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2031] = "OcamlLexer.not_comment ::= `(. ( OcamlLexer.not_asterisk OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2031] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2031] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2031] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2031] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2033] = "OcamlLexer.not_comment ::= `(( OcamlLexer.not_asterisk OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2033] = "";
		lhsL[ART_A_OcamlLexer_not_comment_2033] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2035] = "OcamlLexer.not_comment ::= `(( . OcamlLexer.not_asterisk OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2035] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2035] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2035] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2037] = "OcamlLexer.not_comment ::= `(( OcamlLexer.not_asterisk . OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2037] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2037] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2037] = ART_L_OcamlLexer_not_asterisk;
		artKindOfs[ART_L_OcamlLexer_not_comment_2037] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2039] = "OcamlLexer.not_comment ::= `(( OcamlLexer.not_asterisk OcamlLexer.not_comment . | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2039] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2039] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2039] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2039] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_not_comment_2039] = ART_L_OcamlLexer_not_comment_2044;
		aL[ART_L_OcamlLexer_not_comment_2039] = ART_L_OcamlLexer_not_comment_2043;
		eoOPL[ART_L_OcamlLexer_not_comment_2039] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2039] = true;
		popD[ART_L_OcamlLexer_not_comment_2039] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2041] = "OcamlLexer.not_comment ::= `(( OcamlLexer.not_asterisk OcamlLexer.not_comment | . # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2041] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2041] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2041] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_comment_2041] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2043] = "OcamlLexer.not_comment ::= `(( OcamlLexer.not_asterisk OcamlLexer.not_comment | # . ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2043] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2043] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2043] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_not_comment_2043] = ART_L_OcamlLexer_not_comment_2044;
		eoOPL[ART_L_OcamlLexer_not_comment_2043] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2043] = true;
		popD[ART_L_OcamlLexer_not_comment_2043] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2044] = "OcamlLexer.not_comment ::= `(( OcamlLexer.not_asterisk OcamlLexer.not_comment | # ) . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2044] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2044] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2044] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2044] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2044] = true;
		popD[ART_L_OcamlLexer_not_comment_2044] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2046] = "OcamlLexer.not_comment ::= . `)OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2046] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2046] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2046] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2047] = "OcamlLexer.not_comment ::= `)OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2047] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2047] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2048] = "OcamlLexer.not_comment ::= `). OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2048] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2048] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2048] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2048] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2050] = "OcamlLexer.not_comment ::= `)OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2050] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2050] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2050] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2050] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2050] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2050] = true;
		popD[ART_L_OcamlLexer_not_comment_2050] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2052] = "OcamlLexer.not_comment ::= . `*( OcamlLexer.not_rparen OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2052] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2052] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2052] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2053] = "OcamlLexer.not_comment ::= `*( OcamlLexer.not_rparen OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2053] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2053] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2054] = "OcamlLexer.not_comment ::= `*. ( OcamlLexer.not_rparen OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2054] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2054] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2054] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2054] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2056] = "OcamlLexer.not_comment ::= `*( OcamlLexer.not_rparen OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2056] = "";
		lhsL[ART_A_OcamlLexer_not_comment_2056] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2058] = "OcamlLexer.not_comment ::= `*( . OcamlLexer.not_rparen OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2058] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2058] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2058] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2060] = "OcamlLexer.not_comment ::= `*( OcamlLexer.not_rparen . OcamlLexer.not_comment | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2060] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2060] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2060] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_comment_2060] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2062] = "OcamlLexer.not_comment ::= `*( OcamlLexer.not_rparen OcamlLexer.not_comment . | # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2062] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2062] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2062] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2062] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_not_comment_2062] = ART_L_OcamlLexer_not_comment_2067;
		aL[ART_L_OcamlLexer_not_comment_2062] = ART_L_OcamlLexer_not_comment_2066;
		eoOPL[ART_L_OcamlLexer_not_comment_2062] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2062] = true;
		popD[ART_L_OcamlLexer_not_comment_2062] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2064] = "OcamlLexer.not_comment ::= `*( OcamlLexer.not_rparen OcamlLexer.not_comment | . # ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2064] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2064] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2064] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_comment_2064] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2066] = "OcamlLexer.not_comment ::= `*( OcamlLexer.not_rparen OcamlLexer.not_comment | # . ) ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2066] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2066] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2066] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_not_comment_2066] = ART_L_OcamlLexer_not_comment_2067;
		eoOPL[ART_L_OcamlLexer_not_comment_2066] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2066] = true;
		popD[ART_L_OcamlLexer_not_comment_2066] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2067] = "OcamlLexer.not_comment ::= `*( OcamlLexer.not_rparen OcamlLexer.not_comment | # ) . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2067] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2067] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2067] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2067] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2067] = true;
		popD[ART_L_OcamlLexer_not_comment_2067] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2069] = "OcamlLexer.not_comment ::= . `\\\\rOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2069] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2069] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2069] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2070] = "OcamlLexer.not_comment ::= `\\\\rOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2070] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2070] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2071] = "OcamlLexer.not_comment ::= `\\\\r. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2071] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2071] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2071] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2071] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2073] = "OcamlLexer.not_comment ::= `\\\\rOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2073] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2073] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2073] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2073] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2073] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2073] = true;
		popD[ART_L_OcamlLexer_not_comment_2073] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2075] = "OcamlLexer.not_comment ::= . `\\\\nOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2075] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2075] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2075] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2076] = "OcamlLexer.not_comment ::= `\\\\nOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2076] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2076] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2077] = "OcamlLexer.not_comment ::= `\\\\n. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2077] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2077] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2077] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2077] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2079] = "OcamlLexer.not_comment ::= `\\\\nOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2079] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2079] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2079] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2079] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2079] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2079] = true;
		popD[ART_L_OcamlLexer_not_comment_2079] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2081] = "OcamlLexer.not_comment ::= . `+OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2081] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2081] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2081] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2082] = "OcamlLexer.not_comment ::= `+OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2082] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2082] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2083] = "OcamlLexer.not_comment ::= `+. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2083] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2083] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2083] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2083] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2085] = "OcamlLexer.not_comment ::= `+OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2085] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2085] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2085] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2085] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2085] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2085] = true;
		popD[ART_L_OcamlLexer_not_comment_2085] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2087] = "OcamlLexer.not_comment ::= . `,OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2087] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2087] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2087] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2088] = "OcamlLexer.not_comment ::= `,OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2088] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2088] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2089] = "OcamlLexer.not_comment ::= `,. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2089] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2089] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2089] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2089] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2091] = "OcamlLexer.not_comment ::= `,OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2091] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2091] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2091] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2091] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2091] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2091] = true;
		popD[ART_L_OcamlLexer_not_comment_2091] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2093] = "OcamlLexer.not_comment ::= . `-OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2093] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2093] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2093] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2094] = "OcamlLexer.not_comment ::= `-OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2094] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2094] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2095] = "OcamlLexer.not_comment ::= `-. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2095] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2095] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2095] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2095] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2097] = "OcamlLexer.not_comment ::= `-OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2097] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2097] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2097] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2097] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2097] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2097] = true;
		popD[ART_L_OcamlLexer_not_comment_2097] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2099] = "OcamlLexer.not_comment ::= . `.OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2099] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2099] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2099] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2100] = "OcamlLexer.not_comment ::= `.OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2100] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2100] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2101] = "OcamlLexer.not_comment ::= `.. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2101] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2101] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2101] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2101] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2103] = "OcamlLexer.not_comment ::= `.OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2103] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2103] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2103] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2103] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2103] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2103] = true;
		popD[ART_L_OcamlLexer_not_comment_2103] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2105] = "OcamlLexer.not_comment ::= . `/OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2105] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2105] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2105] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2106] = "OcamlLexer.not_comment ::= `/OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2106] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2106] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2107] = "OcamlLexer.not_comment ::= `/. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2107] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2107] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2107] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2107] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2109] = "OcamlLexer.not_comment ::= `/OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2109] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2109] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2109] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2109] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2109] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2109] = true;
		popD[ART_L_OcamlLexer_not_comment_2109] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2111] = "OcamlLexer.not_comment ::= . `0OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2111] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2111] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2111] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2112] = "OcamlLexer.not_comment ::= `0OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2112] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2112] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2113] = "OcamlLexer.not_comment ::= `0. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2113] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2113] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2113] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2113] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2115] = "OcamlLexer.not_comment ::= `0OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2115] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2115] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2115] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2115] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2115] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2115] = true;
		popD[ART_L_OcamlLexer_not_comment_2115] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2117] = "OcamlLexer.not_comment ::= . `1OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2117] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2117] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2117] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2118] = "OcamlLexer.not_comment ::= `1OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2118] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2118] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2119] = "OcamlLexer.not_comment ::= `1. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2119] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2119] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2119] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2119] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2121] = "OcamlLexer.not_comment ::= `1OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2121] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2121] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2121] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2121] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2121] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2121] = true;
		popD[ART_L_OcamlLexer_not_comment_2121] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2123] = "OcamlLexer.not_comment ::= . `2OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2123] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2123] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2123] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2124] = "OcamlLexer.not_comment ::= `2OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2124] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2124] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2125] = "OcamlLexer.not_comment ::= `2. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2125] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2125] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2125] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2125] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2127] = "OcamlLexer.not_comment ::= `2OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2127] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2127] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2127] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2127] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2127] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2127] = true;
		popD[ART_L_OcamlLexer_not_comment_2127] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2129] = "OcamlLexer.not_comment ::= . `3OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2129] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2129] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2129] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2130] = "OcamlLexer.not_comment ::= `3OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2130] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2130] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2131] = "OcamlLexer.not_comment ::= `3. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2131] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2131] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2131] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2131] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2133] = "OcamlLexer.not_comment ::= `3OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2133] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2133] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2133] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2133] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2133] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2133] = true;
		popD[ART_L_OcamlLexer_not_comment_2133] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2135] = "OcamlLexer.not_comment ::= . `4OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2135] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2135] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2135] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2136] = "OcamlLexer.not_comment ::= `4OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2136] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2136] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2137] = "OcamlLexer.not_comment ::= `4. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2137] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2137] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2137] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2137] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2139] = "OcamlLexer.not_comment ::= `4OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2139] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2139] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2139] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2139] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2139] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2139] = true;
		popD[ART_L_OcamlLexer_not_comment_2139] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2141] = "OcamlLexer.not_comment ::= . `5OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2141] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2141] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2141] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2142] = "OcamlLexer.not_comment ::= `5OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2142] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2142] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2143] = "OcamlLexer.not_comment ::= `5. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2143] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2143] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2143] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2143] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2145] = "OcamlLexer.not_comment ::= `5OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2145] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2145] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2145] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2145] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2145] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2145] = true;
		popD[ART_L_OcamlLexer_not_comment_2145] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2147] = "OcamlLexer.not_comment ::= . `6OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2147] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2147] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2147] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2148] = "OcamlLexer.not_comment ::= `6OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2148] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2148] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2149] = "OcamlLexer.not_comment ::= `6. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2149] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2149] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2149] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2149] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2151] = "OcamlLexer.not_comment ::= `6OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2151] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2151] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2151] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2151] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2151] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2151] = true;
		popD[ART_L_OcamlLexer_not_comment_2151] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2153] = "OcamlLexer.not_comment ::= . `7OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2153] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2153] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2153] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2154] = "OcamlLexer.not_comment ::= `7OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2154] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2154] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2155] = "OcamlLexer.not_comment ::= `7. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2155] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2155] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2155] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2155] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2157] = "OcamlLexer.not_comment ::= `7OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2157] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2157] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2157] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2157] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2157] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2157] = true;
		popD[ART_L_OcamlLexer_not_comment_2157] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2159] = "OcamlLexer.not_comment ::= . `8OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2159] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2159] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2159] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2160] = "OcamlLexer.not_comment ::= `8OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2160] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2160] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2161] = "OcamlLexer.not_comment ::= `8. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2161] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2161] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2161] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2161] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2163] = "OcamlLexer.not_comment ::= `8OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2163] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2163] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2163] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2163] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2163] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2163] = true;
		popD[ART_L_OcamlLexer_not_comment_2163] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2165] = "OcamlLexer.not_comment ::= . `9OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2165] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2165] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2165] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2166] = "OcamlLexer.not_comment ::= `9OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2166] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2166] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2167] = "OcamlLexer.not_comment ::= `9. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2167] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2167] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2167] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2167] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2169] = "OcamlLexer.not_comment ::= `9OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2169] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2169] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2169] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2169] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2169] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2169] = true;
		popD[ART_L_OcamlLexer_not_comment_2169] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2171] = "OcamlLexer.not_comment ::= . `:OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2171] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2171] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2171] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2172] = "OcamlLexer.not_comment ::= `:OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2172] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2172] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2173] = "OcamlLexer.not_comment ::= `:. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2173] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2173] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2173] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2173] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2175] = "OcamlLexer.not_comment ::= `:OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2175] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2175] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2175] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2175] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2175] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2175] = true;
		popD[ART_L_OcamlLexer_not_comment_2175] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2177] = "OcamlLexer.not_comment ::= . `;OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2177] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2177] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2177] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2178] = "OcamlLexer.not_comment ::= `;OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2178] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2178] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2179] = "OcamlLexer.not_comment ::= `;. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2179] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2179] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2179] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2179] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2181] = "OcamlLexer.not_comment ::= `;OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2181] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2181] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2181] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2181] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2181] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2181] = true;
		popD[ART_L_OcamlLexer_not_comment_2181] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2183] = "OcamlLexer.not_comment ::= . `<OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2183] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2183] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2183] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2184] = "OcamlLexer.not_comment ::= `<OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2184] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2184] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2185] = "OcamlLexer.not_comment ::= `<. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2185] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2185] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2185] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2185] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2187] = "OcamlLexer.not_comment ::= `<OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2187] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2187] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2187] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2187] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2187] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2187] = true;
		popD[ART_L_OcamlLexer_not_comment_2187] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2189] = "OcamlLexer.not_comment ::= . `=OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2189] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2189] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2189] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2190] = "OcamlLexer.not_comment ::= `=OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2190] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2190] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2191] = "OcamlLexer.not_comment ::= `=. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2191] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2191] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2191] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2191] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2193] = "OcamlLexer.not_comment ::= `=OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2193] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2193] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2193] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2193] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2193] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2193] = true;
		popD[ART_L_OcamlLexer_not_comment_2193] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2195] = "OcamlLexer.not_comment ::= . `>OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2195] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2195] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2195] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2196] = "OcamlLexer.not_comment ::= `>OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2196] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2196] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2197] = "OcamlLexer.not_comment ::= `>. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2197] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2197] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2197] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2197] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2199] = "OcamlLexer.not_comment ::= `>OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2199] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2199] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2199] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2199] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2199] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2199] = true;
		popD[ART_L_OcamlLexer_not_comment_2199] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2201] = "OcamlLexer.not_comment ::= . `?OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2201] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2201] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2201] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2202] = "OcamlLexer.not_comment ::= `?OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2202] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2202] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2203] = "OcamlLexer.not_comment ::= `?. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2203] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2203] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2203] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2203] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2205] = "OcamlLexer.not_comment ::= `?OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2205] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2205] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2205] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2205] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2205] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2205] = true;
		popD[ART_L_OcamlLexer_not_comment_2205] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2207] = "OcamlLexer.not_comment ::= . `@OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2207] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2207] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2207] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2208] = "OcamlLexer.not_comment ::= `@OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2208] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2208] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2209] = "OcamlLexer.not_comment ::= `@. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2209] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2209] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2209] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2209] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2211] = "OcamlLexer.not_comment ::= `@OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2211] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2211] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2211] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2211] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2211] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2211] = true;
		popD[ART_L_OcamlLexer_not_comment_2211] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2213] = "OcamlLexer.not_comment ::= . `AOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2213] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2213] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2213] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2214] = "OcamlLexer.not_comment ::= `AOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2214] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2214] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2215] = "OcamlLexer.not_comment ::= `A. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2215] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2215] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2215] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2215] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2217] = "OcamlLexer.not_comment ::= `AOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2217] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2217] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2217] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2217] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2217] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2217] = true;
		popD[ART_L_OcamlLexer_not_comment_2217] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2219] = "OcamlLexer.not_comment ::= . `BOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2219] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2219] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2219] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2220] = "OcamlLexer.not_comment ::= `BOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2220] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2220] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2221] = "OcamlLexer.not_comment ::= `B. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2221] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2221] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2221] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2221] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2223] = "OcamlLexer.not_comment ::= `BOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2223] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2223] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2223] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2223] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2223] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2223] = true;
		popD[ART_L_OcamlLexer_not_comment_2223] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2225] = "OcamlLexer.not_comment ::= . `COcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2225] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2225] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2225] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2226] = "OcamlLexer.not_comment ::= `COcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2226] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2226] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2227] = "OcamlLexer.not_comment ::= `C. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2227] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2227] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2227] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2227] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2229] = "OcamlLexer.not_comment ::= `COcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2229] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2229] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2229] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2229] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2229] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2229] = true;
		popD[ART_L_OcamlLexer_not_comment_2229] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2231] = "OcamlLexer.not_comment ::= . `DOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2231] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2231] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2231] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2232] = "OcamlLexer.not_comment ::= `DOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2232] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2232] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2233] = "OcamlLexer.not_comment ::= `D. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2233] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2233] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2233] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2233] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2235] = "OcamlLexer.not_comment ::= `DOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2235] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2235] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2235] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2235] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2235] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2235] = true;
		popD[ART_L_OcamlLexer_not_comment_2235] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2237] = "OcamlLexer.not_comment ::= . `EOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2237] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2237] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2237] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2238] = "OcamlLexer.not_comment ::= `EOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2238] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2238] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2239] = "OcamlLexer.not_comment ::= `E. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2239] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2239] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2239] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2239] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2241] = "OcamlLexer.not_comment ::= `EOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2241] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2241] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2241] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2241] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2241] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2241] = true;
		popD[ART_L_OcamlLexer_not_comment_2241] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2243] = "OcamlLexer.not_comment ::= . `FOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2243] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2243] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2243] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2244] = "OcamlLexer.not_comment ::= `FOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2244] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2244] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2245] = "OcamlLexer.not_comment ::= `F. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2245] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2245] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2245] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2245] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2247] = "OcamlLexer.not_comment ::= `FOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2247] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2247] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2247] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2247] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2247] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2247] = true;
		popD[ART_L_OcamlLexer_not_comment_2247] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2249] = "OcamlLexer.not_comment ::= . `GOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2249] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2249] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2249] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2250] = "OcamlLexer.not_comment ::= `GOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2250] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2250] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2251] = "OcamlLexer.not_comment ::= `G. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2251] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2251] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2251] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2251] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2253] = "OcamlLexer.not_comment ::= `GOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2253] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2253] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2253] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2253] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2253] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2253] = true;
		popD[ART_L_OcamlLexer_not_comment_2253] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2255] = "OcamlLexer.not_comment ::= . `HOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2255] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2255] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2255] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2256] = "OcamlLexer.not_comment ::= `HOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2256] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2256] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2257] = "OcamlLexer.not_comment ::= `H. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2257] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2257] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2257] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2257] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2259] = "OcamlLexer.not_comment ::= `HOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2259] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2259] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2259] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2259] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2259] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2259] = true;
		popD[ART_L_OcamlLexer_not_comment_2259] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2261] = "OcamlLexer.not_comment ::= . `IOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2261] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2261] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2261] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2262] = "OcamlLexer.not_comment ::= `IOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2262] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2262] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2263] = "OcamlLexer.not_comment ::= `I. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2263] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2263] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2263] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2263] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2265] = "OcamlLexer.not_comment ::= `IOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2265] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2265] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2265] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2265] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2265] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2265] = true;
		popD[ART_L_OcamlLexer_not_comment_2265] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2267] = "OcamlLexer.not_comment ::= . `JOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2267] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2267] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2267] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2268] = "OcamlLexer.not_comment ::= `JOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2268] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2268] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2269] = "OcamlLexer.not_comment ::= `J. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2269] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2269] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2269] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2269] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2271] = "OcamlLexer.not_comment ::= `JOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2271] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2271] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2271] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2271] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2271] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2271] = true;
		popD[ART_L_OcamlLexer_not_comment_2271] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2273] = "OcamlLexer.not_comment ::= . `KOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2273] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2273] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2273] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2274] = "OcamlLexer.not_comment ::= `KOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2274] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2274] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2275] = "OcamlLexer.not_comment ::= `K. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2275] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2275] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2275] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2275] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2277] = "OcamlLexer.not_comment ::= `KOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2277] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2277] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2277] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2277] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2277] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2277] = true;
		popD[ART_L_OcamlLexer_not_comment_2277] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2279] = "OcamlLexer.not_comment ::= . `LOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2279] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2279] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2279] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2280] = "OcamlLexer.not_comment ::= `LOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2280] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2280] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2281] = "OcamlLexer.not_comment ::= `L. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2281] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2281] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2281] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2281] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2283] = "OcamlLexer.not_comment ::= `LOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2283] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2283] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2283] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2283] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2283] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2283] = true;
		popD[ART_L_OcamlLexer_not_comment_2283] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2285] = "OcamlLexer.not_comment ::= . `MOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2285] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2285] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2285] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2286] = "OcamlLexer.not_comment ::= `MOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2286] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2286] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2287] = "OcamlLexer.not_comment ::= `M. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2287] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2287] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2287] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2287] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2289] = "OcamlLexer.not_comment ::= `MOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2289] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2289] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2289] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2289] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2289] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2289] = true;
		popD[ART_L_OcamlLexer_not_comment_2289] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2291] = "OcamlLexer.not_comment ::= . `NOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2291] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2291] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2291] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2292] = "OcamlLexer.not_comment ::= `NOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2292] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2292] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2293] = "OcamlLexer.not_comment ::= `N. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2293] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2293] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2293] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2293] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2295] = "OcamlLexer.not_comment ::= `NOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2295] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2295] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2295] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2295] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2295] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2295] = true;
		popD[ART_L_OcamlLexer_not_comment_2295] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2297] = "OcamlLexer.not_comment ::= . `OOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2297] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2297] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2297] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2298] = "OcamlLexer.not_comment ::= `OOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2298] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2298] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2299] = "OcamlLexer.not_comment ::= `O. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2299] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2299] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2299] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2299] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2301] = "OcamlLexer.not_comment ::= `OOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2301] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2301] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2301] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2301] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2301] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2301] = true;
		popD[ART_L_OcamlLexer_not_comment_2301] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2303] = "OcamlLexer.not_comment ::= . `POcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2303] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2303] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2303] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2304] = "OcamlLexer.not_comment ::= `POcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2304] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2304] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2305] = "OcamlLexer.not_comment ::= `P. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2305] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2305] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2305] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2305] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2307] = "OcamlLexer.not_comment ::= `POcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2307] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2307] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2307] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2307] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2307] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2307] = true;
		popD[ART_L_OcamlLexer_not_comment_2307] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2309] = "OcamlLexer.not_comment ::= . `QOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2309] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2309] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2309] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2310] = "OcamlLexer.not_comment ::= `QOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2310] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2310] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2311] = "OcamlLexer.not_comment ::= `Q. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2311] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2311] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2311] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2311] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2313] = "OcamlLexer.not_comment ::= `QOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2313] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2313] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2313] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2313] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2313] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2313] = true;
		popD[ART_L_OcamlLexer_not_comment_2313] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2315] = "OcamlLexer.not_comment ::= . `ROcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2315] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2315] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2315] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2316] = "OcamlLexer.not_comment ::= `ROcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2316] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2316] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2317] = "OcamlLexer.not_comment ::= `R. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2317] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2317] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2317] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2317] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2319] = "OcamlLexer.not_comment ::= `ROcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2319] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2319] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2319] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2319] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2319] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2319] = true;
		popD[ART_L_OcamlLexer_not_comment_2319] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2321] = "OcamlLexer.not_comment ::= . `SOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2321] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2321] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2321] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2322] = "OcamlLexer.not_comment ::= `SOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2322] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2322] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2323] = "OcamlLexer.not_comment ::= `S. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2323] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2323] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2323] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2323] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2325] = "OcamlLexer.not_comment ::= `SOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2325] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2325] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2325] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2325] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2325] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2325] = true;
		popD[ART_L_OcamlLexer_not_comment_2325] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2327] = "OcamlLexer.not_comment ::= . `TOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2327] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2327] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2327] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2328] = "OcamlLexer.not_comment ::= `TOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2328] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2328] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2329] = "OcamlLexer.not_comment ::= `T. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2329] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2329] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2329] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2329] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2331] = "OcamlLexer.not_comment ::= `TOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2331] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2331] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2331] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2331] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2331] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2331] = true;
		popD[ART_L_OcamlLexer_not_comment_2331] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2333] = "OcamlLexer.not_comment ::= . `UOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2333] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2333] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2333] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2334] = "OcamlLexer.not_comment ::= `UOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2334] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2334] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2335] = "OcamlLexer.not_comment ::= `U. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2335] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2335] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2335] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2335] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2337] = "OcamlLexer.not_comment ::= `UOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2337] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2337] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2337] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2337] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2337] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2337] = true;
		popD[ART_L_OcamlLexer_not_comment_2337] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2339] = "OcamlLexer.not_comment ::= . `VOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2339] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2339] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2339] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2340] = "OcamlLexer.not_comment ::= `VOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2340] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2340] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2341] = "OcamlLexer.not_comment ::= `V. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2341] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2341] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2341] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2341] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2343] = "OcamlLexer.not_comment ::= `VOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2343] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2343] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2343] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2343] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2343] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2343] = true;
		popD[ART_L_OcamlLexer_not_comment_2343] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2345] = "OcamlLexer.not_comment ::= . `WOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2345] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2345] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2345] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2346] = "OcamlLexer.not_comment ::= `WOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2346] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2346] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2347] = "OcamlLexer.not_comment ::= `W. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2347] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2347] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2347] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2347] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2349] = "OcamlLexer.not_comment ::= `WOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2349] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2349] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2349] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2349] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2349] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2349] = true;
		popD[ART_L_OcamlLexer_not_comment_2349] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2351] = "OcamlLexer.not_comment ::= . `XOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2351] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2351] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2351] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2352] = "OcamlLexer.not_comment ::= `XOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2352] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2352] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2353] = "OcamlLexer.not_comment ::= `X. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2353] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2353] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2353] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2353] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2355] = "OcamlLexer.not_comment ::= `XOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2355] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2355] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2355] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2355] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2355] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2355] = true;
		popD[ART_L_OcamlLexer_not_comment_2355] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2357] = "OcamlLexer.not_comment ::= . `YOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2357] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2357] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2357] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2358] = "OcamlLexer.not_comment ::= `YOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2358] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2358] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2359] = "OcamlLexer.not_comment ::= `Y. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2359] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2359] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2359] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2359] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2361] = "OcamlLexer.not_comment ::= `YOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2361] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2361] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2361] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2361] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2361] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2361] = true;
		popD[ART_L_OcamlLexer_not_comment_2361] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2363] = "OcamlLexer.not_comment ::= . `ZOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2363] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2363] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2363] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2364] = "OcamlLexer.not_comment ::= `ZOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2364] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2364] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2365] = "OcamlLexer.not_comment ::= `Z. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2365] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2365] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2365] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2365] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2367] = "OcamlLexer.not_comment ::= `ZOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2367] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2367] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2367] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2367] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2367] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2367] = true;
		popD[ART_L_OcamlLexer_not_comment_2367] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2369] = "OcamlLexer.not_comment ::= . `[OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2369] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2369] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2369] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2370] = "OcamlLexer.not_comment ::= `[OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2370] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2370] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2371] = "OcamlLexer.not_comment ::= `[. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2371] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2371] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2371] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2371] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2373] = "OcamlLexer.not_comment ::= `[OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2373] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2373] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2373] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2373] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2373] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2373] = true;
		popD[ART_L_OcamlLexer_not_comment_2373] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2375] = "OcamlLexer.not_comment ::= . `\\\\\\\\OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2375] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2375] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2375] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2376] = "OcamlLexer.not_comment ::= `\\\\\\\\OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2376] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2376] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2377] = "OcamlLexer.not_comment ::= `\\\\\\\\. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2377] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2377] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2377] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2377] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2379] = "OcamlLexer.not_comment ::= `\\\\\\\\OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2379] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2379] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2379] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2379] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2379] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2379] = true;
		popD[ART_L_OcamlLexer_not_comment_2379] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2381] = "OcamlLexer.not_comment ::= . `]OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2381] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2381] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2381] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2382] = "OcamlLexer.not_comment ::= `]OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2382] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2382] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2383] = "OcamlLexer.not_comment ::= `]. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2383] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2383] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2383] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2383] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2385] = "OcamlLexer.not_comment ::= `]OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2385] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2385] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2385] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2385] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2385] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2385] = true;
		popD[ART_L_OcamlLexer_not_comment_2385] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2387] = "OcamlLexer.not_comment ::= . `^OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2387] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2387] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2387] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2388] = "OcamlLexer.not_comment ::= `^OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2388] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2388] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2389] = "OcamlLexer.not_comment ::= `^. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2389] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2389] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2389] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2389] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2391] = "OcamlLexer.not_comment ::= `^OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2391] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2391] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2391] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2391] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2391] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2391] = true;
		popD[ART_L_OcamlLexer_not_comment_2391] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2393] = "OcamlLexer.not_comment ::= . `_OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2393] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2393] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2393] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2394] = "OcamlLexer.not_comment ::= `_OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2394] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2394] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2395] = "OcamlLexer.not_comment ::= `_. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2395] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2395] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2395] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2395] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2397] = "OcamlLexer.not_comment ::= `_OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2397] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2397] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2397] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2397] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2397] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2397] = true;
		popD[ART_L_OcamlLexer_not_comment_2397] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2399] = "OcamlLexer.not_comment ::= . `\\\\`OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2399] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2399] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2399] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2400] = "OcamlLexer.not_comment ::= `\\\\`OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2400] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2400] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2401] = "OcamlLexer.not_comment ::= `\\\\`. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2401] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2401] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2401] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2401] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2403] = "OcamlLexer.not_comment ::= `\\\\`OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2403] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2403] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2403] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2403] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2403] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2403] = true;
		popD[ART_L_OcamlLexer_not_comment_2403] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2405] = "OcamlLexer.not_comment ::= . `aOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2405] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2405] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2405] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2406] = "OcamlLexer.not_comment ::= `aOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2406] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2406] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2407] = "OcamlLexer.not_comment ::= `a. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2407] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2407] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2407] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2407] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2409] = "OcamlLexer.not_comment ::= `aOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2409] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2409] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2409] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2409] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2409] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2409] = true;
		popD[ART_L_OcamlLexer_not_comment_2409] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2411] = "OcamlLexer.not_comment ::= . `bOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2411] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2411] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2411] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2412] = "OcamlLexer.not_comment ::= `bOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2412] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2412] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2413] = "OcamlLexer.not_comment ::= `b. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2413] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2413] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2413] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2413] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2415] = "OcamlLexer.not_comment ::= `bOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2415] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2415] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2415] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2415] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2415] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2415] = true;
		popD[ART_L_OcamlLexer_not_comment_2415] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2417] = "OcamlLexer.not_comment ::= . `cOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2417] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2417] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2417] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2418] = "OcamlLexer.not_comment ::= `cOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2418] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2418] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2419] = "OcamlLexer.not_comment ::= `c. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2419] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2419] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2419] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2419] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2421] = "OcamlLexer.not_comment ::= `cOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2421] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2421] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2421] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2421] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2421] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2421] = true;
		popD[ART_L_OcamlLexer_not_comment_2421] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2423] = "OcamlLexer.not_comment ::= . `dOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2423] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2423] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2423] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2424] = "OcamlLexer.not_comment ::= `dOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2424] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2424] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2425] = "OcamlLexer.not_comment ::= `d. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2425] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2425] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2425] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2425] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2427] = "OcamlLexer.not_comment ::= `dOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2427] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2427] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2427] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2427] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2427] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2427] = true;
		popD[ART_L_OcamlLexer_not_comment_2427] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2429] = "OcamlLexer.not_comment ::= . `fOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2429] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2429] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2429] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2430] = "OcamlLexer.not_comment ::= `fOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2430] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2430] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2431] = "OcamlLexer.not_comment ::= `f. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2431] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2431] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2431] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2431] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2433] = "OcamlLexer.not_comment ::= `fOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2433] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2433] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2433] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2433] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2433] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2433] = true;
		popD[ART_L_OcamlLexer_not_comment_2433] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2435] = "OcamlLexer.not_comment ::= . `gOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2435] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2435] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2435] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2436] = "OcamlLexer.not_comment ::= `gOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2436] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2436] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2437] = "OcamlLexer.not_comment ::= `g. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2437] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2437] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2437] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2437] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2439] = "OcamlLexer.not_comment ::= `gOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2439] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2439] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2439] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2439] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2439] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2439] = true;
		popD[ART_L_OcamlLexer_not_comment_2439] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2441] = "OcamlLexer.not_comment ::= . `hOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2441] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2441] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2441] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2442] = "OcamlLexer.not_comment ::= `hOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2442] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2442] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2443] = "OcamlLexer.not_comment ::= `h. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2443] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2443] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2443] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2443] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2445] = "OcamlLexer.not_comment ::= `hOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2445] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2445] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2445] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2445] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2445] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2445] = true;
		popD[ART_L_OcamlLexer_not_comment_2445] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2447] = "OcamlLexer.not_comment ::= . `iOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2447] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2447] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2447] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2448] = "OcamlLexer.not_comment ::= `iOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2448] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2448] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2449] = "OcamlLexer.not_comment ::= `i. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2449] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2449] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2449] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2449] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2451] = "OcamlLexer.not_comment ::= `iOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2451] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2451] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2451] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2451] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2451] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2451] = true;
		popD[ART_L_OcamlLexer_not_comment_2451] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2453] = "OcamlLexer.not_comment ::= . `jOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2453] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2453] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2453] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2454] = "OcamlLexer.not_comment ::= `jOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2454] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2454] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2455] = "OcamlLexer.not_comment ::= `j. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2455] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2455] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2455] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2455] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2457] = "OcamlLexer.not_comment ::= `jOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2457] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2457] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2457] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2457] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2457] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2457] = true;
		popD[ART_L_OcamlLexer_not_comment_2457] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2459] = "OcamlLexer.not_comment ::= . `kOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2459] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2459] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2459] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2460] = "OcamlLexer.not_comment ::= `kOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2460] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2460] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2461] = "OcamlLexer.not_comment ::= `k. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2461] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2461] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2461] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2461] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2463] = "OcamlLexer.not_comment ::= `kOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2463] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2463] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2463] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2463] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2463] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2463] = true;
		popD[ART_L_OcamlLexer_not_comment_2463] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2465] = "OcamlLexer.not_comment ::= . `lOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2465] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2465] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2465] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2466] = "OcamlLexer.not_comment ::= `lOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2466] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2466] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2467] = "OcamlLexer.not_comment ::= `l. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2467] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2467] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2467] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2467] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2469] = "OcamlLexer.not_comment ::= `lOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2469] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2469] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2469] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2469] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2469] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2469] = true;
		popD[ART_L_OcamlLexer_not_comment_2469] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2471] = "OcamlLexer.not_comment ::= . `mOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2471] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2471] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2471] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2472] = "OcamlLexer.not_comment ::= `mOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2472] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2472] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2473] = "OcamlLexer.not_comment ::= `m. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2473] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2473] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2473] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2473] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2475] = "OcamlLexer.not_comment ::= `mOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2475] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2475] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2475] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2475] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2475] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2475] = true;
		popD[ART_L_OcamlLexer_not_comment_2475] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2477] = "OcamlLexer.not_comment ::= . `nOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2477] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2477] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2477] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2478] = "OcamlLexer.not_comment ::= `nOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2478] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2478] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2479] = "OcamlLexer.not_comment ::= `n. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2479] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2479] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2479] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2479] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2481] = "OcamlLexer.not_comment ::= `nOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2481] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2481] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2481] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2481] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2481] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2481] = true;
		popD[ART_L_OcamlLexer_not_comment_2481] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2483] = "OcamlLexer.not_comment ::= . `oOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2483] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2483] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2483] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2484] = "OcamlLexer.not_comment ::= `oOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2484] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2484] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2485] = "OcamlLexer.not_comment ::= `o. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2485] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2485] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2485] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2485] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2487] = "OcamlLexer.not_comment ::= `oOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2487] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2487] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2487] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2487] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2487] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2487] = true;
		popD[ART_L_OcamlLexer_not_comment_2487] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2489] = "OcamlLexer.not_comment ::= . `pOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2489] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2489] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2489] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2490] = "OcamlLexer.not_comment ::= `pOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2490] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2490] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2491] = "OcamlLexer.not_comment ::= `p. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2491] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2491] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2491] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2491] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2493] = "OcamlLexer.not_comment ::= `pOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2493] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2493] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2493] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2493] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2493] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2493] = true;
		popD[ART_L_OcamlLexer_not_comment_2493] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2495] = "OcamlLexer.not_comment ::= . `qOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2495] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2495] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2495] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2496] = "OcamlLexer.not_comment ::= `qOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2496] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2496] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2497] = "OcamlLexer.not_comment ::= `q. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2497] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2497] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2497] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2497] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2499] = "OcamlLexer.not_comment ::= `qOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2499] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2499] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2499] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2499] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2499] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2499] = true;
		popD[ART_L_OcamlLexer_not_comment_2499] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2501] = "OcamlLexer.not_comment ::= . `rOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2501] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2501] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2501] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2502] = "OcamlLexer.not_comment ::= `rOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2502] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2502] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2503] = "OcamlLexer.not_comment ::= `r. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2503] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2503] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2503] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2503] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2505] = "OcamlLexer.not_comment ::= `rOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2505] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2505] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2505] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2505] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2505] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2505] = true;
		popD[ART_L_OcamlLexer_not_comment_2505] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2507] = "OcamlLexer.not_comment ::= . `sOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2507] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2507] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2507] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2508] = "OcamlLexer.not_comment ::= `sOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2508] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2508] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2509] = "OcamlLexer.not_comment ::= `s. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2509] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2509] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2509] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2509] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2511] = "OcamlLexer.not_comment ::= `sOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2511] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2511] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2511] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2511] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2511] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2511] = true;
		popD[ART_L_OcamlLexer_not_comment_2511] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2513] = "OcamlLexer.not_comment ::= . `tOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2513] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2513] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2513] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2514] = "OcamlLexer.not_comment ::= `tOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2514] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2514] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2515] = "OcamlLexer.not_comment ::= `t. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2515] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2515] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2515] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2515] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2517] = "OcamlLexer.not_comment ::= `tOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2517] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2517] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2517] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2517] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2517] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2517] = true;
		popD[ART_L_OcamlLexer_not_comment_2517] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2519] = "OcamlLexer.not_comment ::= . `uOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2519] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2519] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2519] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2520] = "OcamlLexer.not_comment ::= `uOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2520] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2520] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2521] = "OcamlLexer.not_comment ::= `u. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2521] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2521] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2521] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2521] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2523] = "OcamlLexer.not_comment ::= `uOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2523] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2523] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2523] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2523] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2523] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2523] = true;
		popD[ART_L_OcamlLexer_not_comment_2523] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2525] = "OcamlLexer.not_comment ::= . `vOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2525] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2525] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2525] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2526] = "OcamlLexer.not_comment ::= `vOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2526] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2526] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2527] = "OcamlLexer.not_comment ::= `v. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2527] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2527] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2527] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2527] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2529] = "OcamlLexer.not_comment ::= `vOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2529] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2529] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2529] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2529] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2529] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2529] = true;
		popD[ART_L_OcamlLexer_not_comment_2529] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2531] = "OcamlLexer.not_comment ::= . `wOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2531] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2531] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2531] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2532] = "OcamlLexer.not_comment ::= `wOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2532] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2532] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2533] = "OcamlLexer.not_comment ::= `w. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2533] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2533] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2533] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2533] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2535] = "OcamlLexer.not_comment ::= `wOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2535] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2535] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2535] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2535] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2535] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2535] = true;
		popD[ART_L_OcamlLexer_not_comment_2535] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2537] = "OcamlLexer.not_comment ::= . `xOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2537] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2537] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2537] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2538] = "OcamlLexer.not_comment ::= `xOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2538] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2538] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2539] = "OcamlLexer.not_comment ::= `x. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2539] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2539] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2539] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2539] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2541] = "OcamlLexer.not_comment ::= `xOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2541] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2541] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2541] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2541] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2541] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2541] = true;
		popD[ART_L_OcamlLexer_not_comment_2541] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2543] = "OcamlLexer.not_comment ::= . `yOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2543] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2543] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2543] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2544] = "OcamlLexer.not_comment ::= `yOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2544] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2544] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2545] = "OcamlLexer.not_comment ::= `y. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2545] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2545] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2545] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2545] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2547] = "OcamlLexer.not_comment ::= `yOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2547] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2547] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2547] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2547] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2547] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2547] = true;
		popD[ART_L_OcamlLexer_not_comment_2547] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2549] = "OcamlLexer.not_comment ::= . `zOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2549] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2549] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2549] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2550] = "OcamlLexer.not_comment ::= `zOcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2550] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2550] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2551] = "OcamlLexer.not_comment ::= `z. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2551] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2551] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2551] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2551] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2553] = "OcamlLexer.not_comment ::= `zOcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2553] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2553] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2553] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2553] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2553] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2553] = true;
		popD[ART_L_OcamlLexer_not_comment_2553] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2555] = "OcamlLexer.not_comment ::= . `{OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2555] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2555] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2555] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2556] = "OcamlLexer.not_comment ::= `{OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2556] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2556] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2557] = "OcamlLexer.not_comment ::= `{. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2557] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2557] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2557] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2557] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2559] = "OcamlLexer.not_comment ::= `{OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2559] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2559] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2559] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2559] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2559] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2559] = true;
		popD[ART_L_OcamlLexer_not_comment_2559] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2561] = "OcamlLexer.not_comment ::= . `|OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2561] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2561] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2561] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2562] = "OcamlLexer.not_comment ::= `|OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2562] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2562] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2563] = "OcamlLexer.not_comment ::= `|. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2563] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2563] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2563] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2563] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2565] = "OcamlLexer.not_comment ::= `|OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2565] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2565] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2565] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2565] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2565] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2565] = true;
		popD[ART_L_OcamlLexer_not_comment_2565] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2567] = "OcamlLexer.not_comment ::= . `}OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2567] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2567] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2567] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2568] = "OcamlLexer.not_comment ::= `}OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2568] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2568] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2569] = "OcamlLexer.not_comment ::= `}. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2569] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2569] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2569] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2569] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2571] = "OcamlLexer.not_comment ::= `}OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2571] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2571] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2571] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2571] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2571] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2571] = true;
		popD[ART_L_OcamlLexer_not_comment_2571] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2573] = "OcamlLexer.not_comment ::= . `~OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2573] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2573] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2573] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2574] = "OcamlLexer.not_comment ::= `~OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2574] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2574] = ART_L_OcamlLexer_not_comment;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2575] = "OcamlLexer.not_comment ::= `~. OcamlLexer.not_comment ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2575] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2575] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2575] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_not_comment_2575] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2577] = "OcamlLexer.not_comment ::= `~OcamlLexer.not_comment . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2577] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2577] = ART_L_OcamlLexer_not_comment;
		artSlotInstanceOfs[ART_L_OcamlLexer_not_comment_2577] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2577] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2577] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2577] = true;
		popD[ART_L_OcamlLexer_not_comment_2577] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2579] = "OcamlLexer.not_comment ::= . # ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2579] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2579] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2579] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_comment_2579] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_comment_2581] = "OcamlLexer.not_comment ::= # . ";
		artLabelStrings[ART_L_OcamlLexer_not_comment_2581] = "";
		lhsL[ART_L_OcamlLexer_not_comment_2581] = ART_L_OcamlLexer_not_comment;
		artKindOfs[ART_L_OcamlLexer_not_comment_2581] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_comment_2581] = true;
		eoR_pL[ART_L_OcamlLexer_not_comment_2581] = true;
		popD[ART_L_OcamlLexer_not_comment_2581] = true;
	}

	public void artTableInitialiser_194() {
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen] = "OcamlLexer.not_lparen ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen] = "not_lparen";
		artKindOfs[ART_L_OcamlLexer_not_lparen] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_2993] = "OcamlLexer.not_lparen ::= . `";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_2993] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_2993] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_2993] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_2993] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_2994] = "OcamlLexer.not_lparen ::= `";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_2994] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_2994] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_2994] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_2995] = "OcamlLexer.not_lparen ::= `. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_2995] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_2995] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_2995] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_2995] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_2995] = true;
		popD[ART_L_OcamlLexer_not_lparen_2995] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_2997] = "OcamlLexer.not_lparen ::= . `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_2997] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_2997] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_2997] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_2997] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_2998] = "OcamlLexer.not_lparen ::= `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_2998] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_2998] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_2998] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_2999] = "OcamlLexer.not_lparen ::= `\\\\007. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_2999] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_2999] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_2999] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_2999] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_2999] = true;
		popD[ART_L_OcamlLexer_not_lparen_2999] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3001] = "OcamlLexer.not_lparen ::= . `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3001] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3001] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3001] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3001] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3002] = "OcamlLexer.not_lparen ::= `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3002] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3002] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3002] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3003] = "OcamlLexer.not_lparen ::= `\\\\010. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3003] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3003] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3003] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3003] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3003] = true;
		popD[ART_L_OcamlLexer_not_lparen_3003] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3005] = "OcamlLexer.not_lparen ::= . `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3005] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3005] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3005] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3005] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3006] = "OcamlLexer.not_lparen ::= `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3006] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3006] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3006] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3007] = "OcamlLexer.not_lparen ::= `\\\\t. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3007] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3007] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3007] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3007] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3007] = true;
		popD[ART_L_OcamlLexer_not_lparen_3007] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3009] = "OcamlLexer.not_lparen ::= . `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3009] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3009] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3009] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3009] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3010] = "OcamlLexer.not_lparen ::= `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3010] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3010] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3010] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3011] = "OcamlLexer.not_lparen ::= `\\\\013. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3011] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3011] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3011] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3011] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3011] = true;
		popD[ART_L_OcamlLexer_not_lparen_3011] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3013] = "OcamlLexer.not_lparen ::= . `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3013] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3013] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3013] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3013] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3014] = "OcamlLexer.not_lparen ::= `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3014] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3014] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3014] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3015] = "OcamlLexer.not_lparen ::= `\\\\014. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3015] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3015] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3015] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3015] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3015] = true;
		popD[ART_L_OcamlLexer_not_lparen_3015] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3017] = "OcamlLexer.not_lparen ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3017] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3017] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3017] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3017] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3018] = "OcamlLexer.not_lparen ::= `e";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3018] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3018] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3018] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3019] = "OcamlLexer.not_lparen ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3019] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3019] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3019] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3019] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3019] = true;
		popD[ART_L_OcamlLexer_not_lparen_3019] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3021] = "OcamlLexer.not_lparen ::= . ` ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3021] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3021] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3021] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3021] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3022] = "OcamlLexer.not_lparen ::= ` ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3022] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3022] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3022] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3023] = "OcamlLexer.not_lparen ::= ` . ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3023] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3023] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3023] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3023] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3023] = true;
		popD[ART_L_OcamlLexer_not_lparen_3023] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3025] = "OcamlLexer.not_lparen ::= . `!";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3025] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3025] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3025] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3025] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3026] = "OcamlLexer.not_lparen ::= `!";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3026] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3026] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3026] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3027] = "OcamlLexer.not_lparen ::= `!. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3027] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3027] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3027] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3027] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3027] = true;
		popD[ART_L_OcamlLexer_not_lparen_3027] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3029] = "OcamlLexer.not_lparen ::= . `\\\"";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3029] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3029] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3029] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3029] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3030] = "OcamlLexer.not_lparen ::= `\\\"";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3030] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3030] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3030] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3031] = "OcamlLexer.not_lparen ::= `\\\". ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3031] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3031] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3031] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3031] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3031] = true;
		popD[ART_L_OcamlLexer_not_lparen_3031] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3033] = "OcamlLexer.not_lparen ::= . `#";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3033] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3033] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3033] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3033] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3034] = "OcamlLexer.not_lparen ::= `#";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3034] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3034] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3034] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3035] = "OcamlLexer.not_lparen ::= `#. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3035] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3035] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3035] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3035] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3035] = true;
		popD[ART_L_OcamlLexer_not_lparen_3035] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3037] = "OcamlLexer.not_lparen ::= . `$";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3037] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3037] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3037] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3037] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3038] = "OcamlLexer.not_lparen ::= `$";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3038] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3038] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3038] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3039] = "OcamlLexer.not_lparen ::= `$. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3039] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3039] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3039] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3039] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3039] = true;
		popD[ART_L_OcamlLexer_not_lparen_3039] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3041] = "OcamlLexer.not_lparen ::= . `%";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3041] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3041] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3041] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3041] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3042] = "OcamlLexer.not_lparen ::= `%";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3042] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3042] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3042] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3043] = "OcamlLexer.not_lparen ::= `%. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3043] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3043] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3043] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3043] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3043] = true;
		popD[ART_L_OcamlLexer_not_lparen_3043] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3045] = "OcamlLexer.not_lparen ::= . `&";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3045] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3045] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3045] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3045] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3046] = "OcamlLexer.not_lparen ::= `&";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3046] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3046] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3046] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3047] = "OcamlLexer.not_lparen ::= `&. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3047] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3047] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3047] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3047] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3047] = true;
		popD[ART_L_OcamlLexer_not_lparen_3047] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3049] = "OcamlLexer.not_lparen ::= . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3049] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3049] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3049] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3049] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3050] = "OcamlLexer.not_lparen ::= `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3050] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3050] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3050] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3051] = "OcamlLexer.not_lparen ::= `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3051] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3051] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3051] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3051] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3051] = true;
		popD[ART_L_OcamlLexer_not_lparen_3051] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3053] = "OcamlLexer.not_lparen ::= . `*";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3053] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3053] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3053] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3053] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3054] = "OcamlLexer.not_lparen ::= `*";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3054] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3054] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3054] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3055] = "OcamlLexer.not_lparen ::= `*. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3055] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3055] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3055] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3055] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3055] = true;
		popD[ART_L_OcamlLexer_not_lparen_3055] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3057] = "OcamlLexer.not_lparen ::= . `)";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3057] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3057] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3057] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3057] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3058] = "OcamlLexer.not_lparen ::= `)";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3058] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3058] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3058] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3059] = "OcamlLexer.not_lparen ::= `). ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3059] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3059] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3059] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3059] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3059] = true;
		popD[ART_L_OcamlLexer_not_lparen_3059] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3061] = "OcamlLexer.not_lparen ::= . `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3061] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3061] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3061] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3061] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3062] = "OcamlLexer.not_lparen ::= `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3062] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3062] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3062] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3063] = "OcamlLexer.not_lparen ::= `\\\\r. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3063] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3063] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3063] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3063] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3063] = true;
		popD[ART_L_OcamlLexer_not_lparen_3063] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3065] = "OcamlLexer.not_lparen ::= . `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3065] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3065] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3065] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3065] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3066] = "OcamlLexer.not_lparen ::= `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3066] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3066] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3066] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3067] = "OcamlLexer.not_lparen ::= `\\\\n. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3067] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3067] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3067] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3067] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3067] = true;
		popD[ART_L_OcamlLexer_not_lparen_3067] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3069] = "OcamlLexer.not_lparen ::= . `+";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3069] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3069] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3069] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3069] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3070] = "OcamlLexer.not_lparen ::= `+";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3070] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3070] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3070] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3071] = "OcamlLexer.not_lparen ::= `+. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3071] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3071] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3071] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3071] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3071] = true;
		popD[ART_L_OcamlLexer_not_lparen_3071] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3073] = "OcamlLexer.not_lparen ::= . `,";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3073] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3073] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3073] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3073] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3074] = "OcamlLexer.not_lparen ::= `,";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3074] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3074] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3074] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3075] = "OcamlLexer.not_lparen ::= `,. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3075] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3075] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3075] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3075] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3075] = true;
		popD[ART_L_OcamlLexer_not_lparen_3075] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3077] = "OcamlLexer.not_lparen ::= . `-";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3077] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3077] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3077] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3077] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3078] = "OcamlLexer.not_lparen ::= `-";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3078] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3078] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3078] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3079] = "OcamlLexer.not_lparen ::= `-. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3079] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3079] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3079] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3079] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3079] = true;
		popD[ART_L_OcamlLexer_not_lparen_3079] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3081] = "OcamlLexer.not_lparen ::= . `.";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3081] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3081] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3081] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3081] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3082] = "OcamlLexer.not_lparen ::= `.";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3082] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3082] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3082] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3083] = "OcamlLexer.not_lparen ::= `.. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3083] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3083] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3083] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3083] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3083] = true;
		popD[ART_L_OcamlLexer_not_lparen_3083] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3085] = "OcamlLexer.not_lparen ::= . `/";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3085] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3085] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3085] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3085] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3086] = "OcamlLexer.not_lparen ::= `/";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3086] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3086] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3086] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3087] = "OcamlLexer.not_lparen ::= `/. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3087] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3087] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3087] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3087] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3087] = true;
		popD[ART_L_OcamlLexer_not_lparen_3087] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3089] = "OcamlLexer.not_lparen ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3089] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3089] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3089] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3089] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3090] = "OcamlLexer.not_lparen ::= `0";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3090] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3090] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3090] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3091] = "OcamlLexer.not_lparen ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3091] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3091] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3091] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3091] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3091] = true;
		popD[ART_L_OcamlLexer_not_lparen_3091] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3093] = "OcamlLexer.not_lparen ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3093] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3093] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3093] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3093] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3094] = "OcamlLexer.not_lparen ::= `1";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3094] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3094] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3094] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3095] = "OcamlLexer.not_lparen ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3095] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3095] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3095] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3095] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3095] = true;
		popD[ART_L_OcamlLexer_not_lparen_3095] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3097] = "OcamlLexer.not_lparen ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3097] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3097] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3097] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3097] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3098] = "OcamlLexer.not_lparen ::= `2";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3098] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3098] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3098] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3099] = "OcamlLexer.not_lparen ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3099] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3099] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3099] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3099] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3099] = true;
		popD[ART_L_OcamlLexer_not_lparen_3099] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3101] = "OcamlLexer.not_lparen ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3101] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3101] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3101] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3101] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3102] = "OcamlLexer.not_lparen ::= `3";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3102] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3102] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3102] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3103] = "OcamlLexer.not_lparen ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3103] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3103] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3103] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3103] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3103] = true;
		popD[ART_L_OcamlLexer_not_lparen_3103] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3105] = "OcamlLexer.not_lparen ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3105] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3105] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3105] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3105] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3106] = "OcamlLexer.not_lparen ::= `4";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3106] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3106] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3106] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3107] = "OcamlLexer.not_lparen ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3107] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3107] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3107] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3107] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3107] = true;
		popD[ART_L_OcamlLexer_not_lparen_3107] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3109] = "OcamlLexer.not_lparen ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3109] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3109] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3109] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3109] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3110] = "OcamlLexer.not_lparen ::= `5";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3110] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3110] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3110] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3111] = "OcamlLexer.not_lparen ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3111] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3111] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3111] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3111] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3111] = true;
		popD[ART_L_OcamlLexer_not_lparen_3111] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3113] = "OcamlLexer.not_lparen ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3113] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3113] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3113] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3113] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3114] = "OcamlLexer.not_lparen ::= `6";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3114] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3114] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3114] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3115] = "OcamlLexer.not_lparen ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3115] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3115] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3115] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3115] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3115] = true;
		popD[ART_L_OcamlLexer_not_lparen_3115] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3117] = "OcamlLexer.not_lparen ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3117] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3117] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3117] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3117] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3118] = "OcamlLexer.not_lparen ::= `7";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3118] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3118] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3118] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3119] = "OcamlLexer.not_lparen ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3119] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3119] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3119] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3119] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3119] = true;
		popD[ART_L_OcamlLexer_not_lparen_3119] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3121] = "OcamlLexer.not_lparen ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3121] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3121] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3121] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3121] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3122] = "OcamlLexer.not_lparen ::= `8";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3122] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3122] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3122] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3123] = "OcamlLexer.not_lparen ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3123] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3123] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3123] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3123] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3123] = true;
		popD[ART_L_OcamlLexer_not_lparen_3123] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3125] = "OcamlLexer.not_lparen ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3125] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3125] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3125] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3125] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3126] = "OcamlLexer.not_lparen ::= `9";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3126] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3126] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3126] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3127] = "OcamlLexer.not_lparen ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3127] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3127] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3127] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3127] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3127] = true;
		popD[ART_L_OcamlLexer_not_lparen_3127] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3129] = "OcamlLexer.not_lparen ::= . `:";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3129] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3129] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3129] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3129] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3130] = "OcamlLexer.not_lparen ::= `:";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3130] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3130] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3130] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3131] = "OcamlLexer.not_lparen ::= `:. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3131] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3131] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3131] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3131] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3131] = true;
		popD[ART_L_OcamlLexer_not_lparen_3131] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3133] = "OcamlLexer.not_lparen ::= . `;";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3133] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3133] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3133] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3133] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3134] = "OcamlLexer.not_lparen ::= `;";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3134] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3134] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3134] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3135] = "OcamlLexer.not_lparen ::= `;. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3135] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3135] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3135] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3135] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3135] = true;
		popD[ART_L_OcamlLexer_not_lparen_3135] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3137] = "OcamlLexer.not_lparen ::= . `<";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3137] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3137] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3137] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3137] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3138] = "OcamlLexer.not_lparen ::= `<";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3138] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3138] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3138] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3139] = "OcamlLexer.not_lparen ::= `<. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3139] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3139] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3139] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3139] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3139] = true;
		popD[ART_L_OcamlLexer_not_lparen_3139] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3141] = "OcamlLexer.not_lparen ::= . `=";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3141] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3141] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3141] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3141] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3142] = "OcamlLexer.not_lparen ::= `=";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3142] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3142] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3142] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3143] = "OcamlLexer.not_lparen ::= `=. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3143] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3143] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3143] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3143] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3143] = true;
		popD[ART_L_OcamlLexer_not_lparen_3143] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3145] = "OcamlLexer.not_lparen ::= . `>";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3145] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3145] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3145] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3145] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3146] = "OcamlLexer.not_lparen ::= `>";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3146] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3146] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3146] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3147] = "OcamlLexer.not_lparen ::= `>. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3147] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3147] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3147] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3147] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3147] = true;
		popD[ART_L_OcamlLexer_not_lparen_3147] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3149] = "OcamlLexer.not_lparen ::= . `?";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3149] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3149] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3149] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3149] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3150] = "OcamlLexer.not_lparen ::= `?";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3150] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3150] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3150] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3151] = "OcamlLexer.not_lparen ::= `?. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3151] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3151] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3151] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3151] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3151] = true;
		popD[ART_L_OcamlLexer_not_lparen_3151] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3153] = "OcamlLexer.not_lparen ::= . `@";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3153] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3153] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3153] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3153] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3154] = "OcamlLexer.not_lparen ::= `@";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3154] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3154] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3154] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3155] = "OcamlLexer.not_lparen ::= `@. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3155] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3155] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3155] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3155] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3155] = true;
		popD[ART_L_OcamlLexer_not_lparen_3155] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3157] = "OcamlLexer.not_lparen ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3157] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3157] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3157] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3157] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3158] = "OcamlLexer.not_lparen ::= `A";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3158] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3158] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3158] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3159] = "OcamlLexer.not_lparen ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3159] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3159] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3159] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3159] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3159] = true;
		popD[ART_L_OcamlLexer_not_lparen_3159] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3161] = "OcamlLexer.not_lparen ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3161] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3161] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3161] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3161] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3162] = "OcamlLexer.not_lparen ::= `B";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3162] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3162] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3162] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3163] = "OcamlLexer.not_lparen ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3163] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3163] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3163] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3163] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3163] = true;
		popD[ART_L_OcamlLexer_not_lparen_3163] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3165] = "OcamlLexer.not_lparen ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3165] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3165] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3165] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3165] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3166] = "OcamlLexer.not_lparen ::= `C";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3166] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3166] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3166] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3167] = "OcamlLexer.not_lparen ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3167] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3167] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3167] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3167] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3167] = true;
		popD[ART_L_OcamlLexer_not_lparen_3167] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3169] = "OcamlLexer.not_lparen ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3169] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3169] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3169] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3169] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3170] = "OcamlLexer.not_lparen ::= `D";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3170] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3170] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3170] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3171] = "OcamlLexer.not_lparen ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3171] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3171] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3171] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3171] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3171] = true;
		popD[ART_L_OcamlLexer_not_lparen_3171] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3173] = "OcamlLexer.not_lparen ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3173] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3173] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3173] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3173] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3174] = "OcamlLexer.not_lparen ::= `E";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3174] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3174] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3174] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3175] = "OcamlLexer.not_lparen ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3175] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3175] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3175] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3175] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3175] = true;
		popD[ART_L_OcamlLexer_not_lparen_3175] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3177] = "OcamlLexer.not_lparen ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3177] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3177] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3177] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3177] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3178] = "OcamlLexer.not_lparen ::= `F";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3178] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3178] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3178] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3179] = "OcamlLexer.not_lparen ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3179] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3179] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3179] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3179] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3179] = true;
		popD[ART_L_OcamlLexer_not_lparen_3179] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3181] = "OcamlLexer.not_lparen ::= . `G";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3181] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3181] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3181] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3181] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3182] = "OcamlLexer.not_lparen ::= `G";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3182] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3182] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3182] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3183] = "OcamlLexer.not_lparen ::= `G. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3183] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3183] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3183] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3183] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3183] = true;
		popD[ART_L_OcamlLexer_not_lparen_3183] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3185] = "OcamlLexer.not_lparen ::= . `H";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3185] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3185] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3185] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3185] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3186] = "OcamlLexer.not_lparen ::= `H";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3186] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3186] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3186] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3187] = "OcamlLexer.not_lparen ::= `H. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3187] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3187] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3187] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3187] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3187] = true;
		popD[ART_L_OcamlLexer_not_lparen_3187] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3189] = "OcamlLexer.not_lparen ::= . `I";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3189] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3189] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3189] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3189] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3190] = "OcamlLexer.not_lparen ::= `I";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3190] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3190] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3190] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3191] = "OcamlLexer.not_lparen ::= `I. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3191] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3191] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3191] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3191] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3191] = true;
		popD[ART_L_OcamlLexer_not_lparen_3191] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3193] = "OcamlLexer.not_lparen ::= . `J";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3193] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3193] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3193] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3193] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3194] = "OcamlLexer.not_lparen ::= `J";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3194] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3194] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3194] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3195] = "OcamlLexer.not_lparen ::= `J. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3195] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3195] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3195] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3195] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3195] = true;
		popD[ART_L_OcamlLexer_not_lparen_3195] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3197] = "OcamlLexer.not_lparen ::= . `K";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3197] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3197] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3197] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3197] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3198] = "OcamlLexer.not_lparen ::= `K";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3198] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3198] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3198] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3199] = "OcamlLexer.not_lparen ::= `K. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3199] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3199] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3199] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3199] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3199] = true;
		popD[ART_L_OcamlLexer_not_lparen_3199] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3201] = "OcamlLexer.not_lparen ::= . `L";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3201] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3201] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3201] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3201] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3202] = "OcamlLexer.not_lparen ::= `L";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3202] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3202] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3202] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3203] = "OcamlLexer.not_lparen ::= `L. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3203] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3203] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3203] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3203] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3203] = true;
		popD[ART_L_OcamlLexer_not_lparen_3203] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3205] = "OcamlLexer.not_lparen ::= . `M";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3205] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3205] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3205] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3205] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3206] = "OcamlLexer.not_lparen ::= `M";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3206] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3206] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3206] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3207] = "OcamlLexer.not_lparen ::= `M. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3207] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3207] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3207] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3207] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3207] = true;
		popD[ART_L_OcamlLexer_not_lparen_3207] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3209] = "OcamlLexer.not_lparen ::= . `N";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3209] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3209] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3209] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3209] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3210] = "OcamlLexer.not_lparen ::= `N";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3210] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3210] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3210] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3211] = "OcamlLexer.not_lparen ::= `N. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3211] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3211] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3211] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3211] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3211] = true;
		popD[ART_L_OcamlLexer_not_lparen_3211] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3213] = "OcamlLexer.not_lparen ::= . `O";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3213] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3213] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3213] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3213] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3214] = "OcamlLexer.not_lparen ::= `O";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3214] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3214] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3214] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3215] = "OcamlLexer.not_lparen ::= `O. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3215] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3215] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3215] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3215] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3215] = true;
		popD[ART_L_OcamlLexer_not_lparen_3215] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3217] = "OcamlLexer.not_lparen ::= . `P";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3217] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3217] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3217] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3217] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3218] = "OcamlLexer.not_lparen ::= `P";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3218] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3218] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3218] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3219] = "OcamlLexer.not_lparen ::= `P. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3219] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3219] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3219] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3219] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3219] = true;
		popD[ART_L_OcamlLexer_not_lparen_3219] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3221] = "OcamlLexer.not_lparen ::= . `Q";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3221] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3221] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3221] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3221] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3222] = "OcamlLexer.not_lparen ::= `Q";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3222] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3222] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3222] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3223] = "OcamlLexer.not_lparen ::= `Q. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3223] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3223] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3223] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3223] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3223] = true;
		popD[ART_L_OcamlLexer_not_lparen_3223] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3225] = "OcamlLexer.not_lparen ::= . `R";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3225] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3225] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3225] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3225] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3226] = "OcamlLexer.not_lparen ::= `R";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3226] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3226] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3226] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3227] = "OcamlLexer.not_lparen ::= `R. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3227] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3227] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3227] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3227] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3227] = true;
		popD[ART_L_OcamlLexer_not_lparen_3227] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3229] = "OcamlLexer.not_lparen ::= . `S";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3229] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3229] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3229] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3229] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3230] = "OcamlLexer.not_lparen ::= `S";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3230] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3230] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3230] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3231] = "OcamlLexer.not_lparen ::= `S. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3231] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3231] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3231] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3231] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3231] = true;
		popD[ART_L_OcamlLexer_not_lparen_3231] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3233] = "OcamlLexer.not_lparen ::= . `T";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3233] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3233] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3233] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3233] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3234] = "OcamlLexer.not_lparen ::= `T";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3234] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3234] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3234] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3235] = "OcamlLexer.not_lparen ::= `T. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3235] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3235] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3235] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3235] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3235] = true;
		popD[ART_L_OcamlLexer_not_lparen_3235] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3237] = "OcamlLexer.not_lparen ::= . `U";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3237] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3237] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3237] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3237] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3238] = "OcamlLexer.not_lparen ::= `U";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3238] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3238] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3238] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3239] = "OcamlLexer.not_lparen ::= `U. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3239] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3239] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3239] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3239] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3239] = true;
		popD[ART_L_OcamlLexer_not_lparen_3239] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3241] = "OcamlLexer.not_lparen ::= . `V";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3241] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3241] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3241] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3241] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3242] = "OcamlLexer.not_lparen ::= `V";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3242] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3242] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3242] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3243] = "OcamlLexer.not_lparen ::= `V. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3243] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3243] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3243] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3243] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3243] = true;
		popD[ART_L_OcamlLexer_not_lparen_3243] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3245] = "OcamlLexer.not_lparen ::= . `W";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3245] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3245] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3245] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3245] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3246] = "OcamlLexer.not_lparen ::= `W";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3246] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3246] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3246] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3247] = "OcamlLexer.not_lparen ::= `W. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3247] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3247] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3247] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3247] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3247] = true;
		popD[ART_L_OcamlLexer_not_lparen_3247] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3249] = "OcamlLexer.not_lparen ::= . `X";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3249] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3249] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3249] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3249] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3250] = "OcamlLexer.not_lparen ::= `X";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3250] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3250] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3250] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3251] = "OcamlLexer.not_lparen ::= `X. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3251] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3251] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3251] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3251] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3251] = true;
		popD[ART_L_OcamlLexer_not_lparen_3251] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3253] = "OcamlLexer.not_lparen ::= . `Y";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3253] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3253] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3253] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3253] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3254] = "OcamlLexer.not_lparen ::= `Y";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3254] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3254] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3254] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3255] = "OcamlLexer.not_lparen ::= `Y. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3255] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3255] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3255] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3255] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3255] = true;
		popD[ART_L_OcamlLexer_not_lparen_3255] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3257] = "OcamlLexer.not_lparen ::= . `Z";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3257] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3257] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3257] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3257] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3258] = "OcamlLexer.not_lparen ::= `Z";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3258] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3258] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3258] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3259] = "OcamlLexer.not_lparen ::= `Z. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3259] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3259] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3259] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3259] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3259] = true;
		popD[ART_L_OcamlLexer_not_lparen_3259] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3261] = "OcamlLexer.not_lparen ::= . `[";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3261] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3261] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3261] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3261] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3262] = "OcamlLexer.not_lparen ::= `[";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3262] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3262] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3262] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3263] = "OcamlLexer.not_lparen ::= `[. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3263] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3263] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3263] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3263] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3263] = true;
		popD[ART_L_OcamlLexer_not_lparen_3263] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3265] = "OcamlLexer.not_lparen ::= . `\\\\\\\\";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3265] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3265] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3265] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3265] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3266] = "OcamlLexer.not_lparen ::= `\\\\\\\\";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3266] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3266] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3266] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3267] = "OcamlLexer.not_lparen ::= `\\\\\\\\. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3267] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3267] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3267] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3267] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3267] = true;
		popD[ART_L_OcamlLexer_not_lparen_3267] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3269] = "OcamlLexer.not_lparen ::= . `]";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3269] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3269] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3269] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3269] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3270] = "OcamlLexer.not_lparen ::= `]";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3270] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3270] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3270] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3271] = "OcamlLexer.not_lparen ::= `]. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3271] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3271] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3271] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3271] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3271] = true;
		popD[ART_L_OcamlLexer_not_lparen_3271] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3273] = "OcamlLexer.not_lparen ::= . `^";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3273] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3273] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3273] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3273] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3274] = "OcamlLexer.not_lparen ::= `^";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3274] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3274] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3274] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3275] = "OcamlLexer.not_lparen ::= `^. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3275] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3275] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3275] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3275] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3275] = true;
		popD[ART_L_OcamlLexer_not_lparen_3275] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3277] = "OcamlLexer.not_lparen ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3277] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3277] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3277] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3277] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3278] = "OcamlLexer.not_lparen ::= `_";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3278] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3278] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3278] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3279] = "OcamlLexer.not_lparen ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3279] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3279] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3279] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3279] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3279] = true;
		popD[ART_L_OcamlLexer_not_lparen_3279] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3281] = "OcamlLexer.not_lparen ::= . `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3281] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3281] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3281] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3281] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3282] = "OcamlLexer.not_lparen ::= `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3282] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3282] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3282] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3283] = "OcamlLexer.not_lparen ::= `\\\\`. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3283] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3283] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3283] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3283] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3283] = true;
		popD[ART_L_OcamlLexer_not_lparen_3283] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3285] = "OcamlLexer.not_lparen ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3285] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3285] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3285] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3285] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3286] = "OcamlLexer.not_lparen ::= `a";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3286] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3286] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3286] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3287] = "OcamlLexer.not_lparen ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3287] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3287] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3287] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3287] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3287] = true;
		popD[ART_L_OcamlLexer_not_lparen_3287] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3289] = "OcamlLexer.not_lparen ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3289] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3289] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3289] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3289] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3290] = "OcamlLexer.not_lparen ::= `b";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3290] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3290] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3290] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3291] = "OcamlLexer.not_lparen ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3291] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3291] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3291] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3291] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3291] = true;
		popD[ART_L_OcamlLexer_not_lparen_3291] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3293] = "OcamlLexer.not_lparen ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3293] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3293] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3293] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3293] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3294] = "OcamlLexer.not_lparen ::= `c";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3294] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3294] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3294] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3295] = "OcamlLexer.not_lparen ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3295] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3295] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3295] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3295] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3295] = true;
		popD[ART_L_OcamlLexer_not_lparen_3295] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3297] = "OcamlLexer.not_lparen ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3297] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3297] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3297] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3297] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3298] = "OcamlLexer.not_lparen ::= `d";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3298] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3298] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3298] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3299] = "OcamlLexer.not_lparen ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3299] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3299] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3299] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3299] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3299] = true;
		popD[ART_L_OcamlLexer_not_lparen_3299] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3301] = "OcamlLexer.not_lparen ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3301] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3301] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3301] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3301] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3302] = "OcamlLexer.not_lparen ::= `f";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3302] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3302] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3302] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3303] = "OcamlLexer.not_lparen ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3303] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3303] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3303] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3303] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3303] = true;
		popD[ART_L_OcamlLexer_not_lparen_3303] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3305] = "OcamlLexer.not_lparen ::= . `g";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3305] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3305] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3305] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3305] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3306] = "OcamlLexer.not_lparen ::= `g";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3306] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3306] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3306] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3307] = "OcamlLexer.not_lparen ::= `g. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3307] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3307] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3307] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3307] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3307] = true;
		popD[ART_L_OcamlLexer_not_lparen_3307] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3309] = "OcamlLexer.not_lparen ::= . `h";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3309] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3309] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3309] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3309] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3310] = "OcamlLexer.not_lparen ::= `h";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3310] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3310] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3310] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3311] = "OcamlLexer.not_lparen ::= `h. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3311] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3311] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3311] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3311] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3311] = true;
		popD[ART_L_OcamlLexer_not_lparen_3311] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3313] = "OcamlLexer.not_lparen ::= . `i";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3313] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3313] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3313] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3313] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3314] = "OcamlLexer.not_lparen ::= `i";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3314] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3314] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3314] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3315] = "OcamlLexer.not_lparen ::= `i. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3315] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3315] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3315] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3315] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3315] = true;
		popD[ART_L_OcamlLexer_not_lparen_3315] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3317] = "OcamlLexer.not_lparen ::= . `j";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3317] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3317] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3317] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3317] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3318] = "OcamlLexer.not_lparen ::= `j";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3318] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3318] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3318] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3319] = "OcamlLexer.not_lparen ::= `j. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3319] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3319] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3319] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3319] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3319] = true;
		popD[ART_L_OcamlLexer_not_lparen_3319] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3321] = "OcamlLexer.not_lparen ::= . `k";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3321] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3321] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3321] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3321] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3322] = "OcamlLexer.not_lparen ::= `k";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3322] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3322] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3322] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3323] = "OcamlLexer.not_lparen ::= `k. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3323] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3323] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3323] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3323] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3323] = true;
		popD[ART_L_OcamlLexer_not_lparen_3323] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3325] = "OcamlLexer.not_lparen ::= . `l";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3325] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3325] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3325] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3325] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3326] = "OcamlLexer.not_lparen ::= `l";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3326] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3326] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3326] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3327] = "OcamlLexer.not_lparen ::= `l. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3327] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3327] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3327] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3327] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3327] = true;
		popD[ART_L_OcamlLexer_not_lparen_3327] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3329] = "OcamlLexer.not_lparen ::= . `m";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3329] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3329] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3329] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3329] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3330] = "OcamlLexer.not_lparen ::= `m";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3330] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3330] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3330] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3331] = "OcamlLexer.not_lparen ::= `m. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3331] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3331] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3331] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3331] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3331] = true;
		popD[ART_L_OcamlLexer_not_lparen_3331] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3333] = "OcamlLexer.not_lparen ::= . `n";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3333] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3333] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3333] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3333] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3334] = "OcamlLexer.not_lparen ::= `n";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3334] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3334] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3334] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3335] = "OcamlLexer.not_lparen ::= `n. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3335] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3335] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3335] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3335] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3335] = true;
		popD[ART_L_OcamlLexer_not_lparen_3335] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3337] = "OcamlLexer.not_lparen ::= . `o";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3337] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3337] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3337] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3337] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3338] = "OcamlLexer.not_lparen ::= `o";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3338] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3338] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3338] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3339] = "OcamlLexer.not_lparen ::= `o. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3339] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3339] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3339] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3339] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3339] = true;
		popD[ART_L_OcamlLexer_not_lparen_3339] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3341] = "OcamlLexer.not_lparen ::= . `p";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3341] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3341] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3341] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3341] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3342] = "OcamlLexer.not_lparen ::= `p";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3342] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3342] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3342] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3343] = "OcamlLexer.not_lparen ::= `p. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3343] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3343] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3343] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3343] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3343] = true;
		popD[ART_L_OcamlLexer_not_lparen_3343] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3345] = "OcamlLexer.not_lparen ::= . `q";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3345] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3345] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3345] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3345] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3346] = "OcamlLexer.not_lparen ::= `q";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3346] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3346] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3346] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3347] = "OcamlLexer.not_lparen ::= `q. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3347] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3347] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3347] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3347] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3347] = true;
		popD[ART_L_OcamlLexer_not_lparen_3347] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3349] = "OcamlLexer.not_lparen ::= . `r";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3349] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3349] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3349] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3349] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3350] = "OcamlLexer.not_lparen ::= `r";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3350] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3350] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3350] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3351] = "OcamlLexer.not_lparen ::= `r. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3351] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3351] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3351] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3351] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3351] = true;
		popD[ART_L_OcamlLexer_not_lparen_3351] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3353] = "OcamlLexer.not_lparen ::= . `s";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3353] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3353] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3353] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3353] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3354] = "OcamlLexer.not_lparen ::= `s";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3354] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3354] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3354] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3355] = "OcamlLexer.not_lparen ::= `s. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3355] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3355] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3355] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3355] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3355] = true;
		popD[ART_L_OcamlLexer_not_lparen_3355] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3357] = "OcamlLexer.not_lparen ::= . `t";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3357] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3357] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3357] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3357] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3358] = "OcamlLexer.not_lparen ::= `t";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3358] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3358] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3358] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3359] = "OcamlLexer.not_lparen ::= `t. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3359] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3359] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3359] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3359] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3359] = true;
		popD[ART_L_OcamlLexer_not_lparen_3359] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3361] = "OcamlLexer.not_lparen ::= . `u";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3361] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3361] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3361] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3361] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3362] = "OcamlLexer.not_lparen ::= `u";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3362] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3362] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3362] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3363] = "OcamlLexer.not_lparen ::= `u. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3363] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3363] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3363] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3363] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3363] = true;
		popD[ART_L_OcamlLexer_not_lparen_3363] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3365] = "OcamlLexer.not_lparen ::= . `v";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3365] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3365] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3365] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3365] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3366] = "OcamlLexer.not_lparen ::= `v";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3366] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3366] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3366] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3367] = "OcamlLexer.not_lparen ::= `v. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3367] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3367] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3367] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3367] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3367] = true;
		popD[ART_L_OcamlLexer_not_lparen_3367] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3369] = "OcamlLexer.not_lparen ::= . `w";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3369] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3369] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3369] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3369] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3370] = "OcamlLexer.not_lparen ::= `w";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3370] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3370] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3370] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3371] = "OcamlLexer.not_lparen ::= `w. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3371] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3371] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3371] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3371] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3371] = true;
		popD[ART_L_OcamlLexer_not_lparen_3371] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3373] = "OcamlLexer.not_lparen ::= . `x";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3373] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3373] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3373] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3373] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3374] = "OcamlLexer.not_lparen ::= `x";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3374] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3374] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3374] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3375] = "OcamlLexer.not_lparen ::= `x. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3375] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3375] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3375] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3375] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3375] = true;
		popD[ART_L_OcamlLexer_not_lparen_3375] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3377] = "OcamlLexer.not_lparen ::= . `y";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3377] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3377] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3377] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3377] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3378] = "OcamlLexer.not_lparen ::= `y";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3378] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3378] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3378] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3379] = "OcamlLexer.not_lparen ::= `y. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3379] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3379] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3379] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3379] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3379] = true;
		popD[ART_L_OcamlLexer_not_lparen_3379] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3381] = "OcamlLexer.not_lparen ::= . `z";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3381] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3381] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3381] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3381] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3382] = "OcamlLexer.not_lparen ::= `z";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3382] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3382] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3382] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3383] = "OcamlLexer.not_lparen ::= `z. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3383] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3383] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3383] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3383] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3383] = true;
		popD[ART_L_OcamlLexer_not_lparen_3383] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3385] = "OcamlLexer.not_lparen ::= . `{";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3385] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3385] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3385] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3385] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3386] = "OcamlLexer.not_lparen ::= `{";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3386] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3386] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3386] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3387] = "OcamlLexer.not_lparen ::= `{. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3387] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3387] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3387] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3387] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3387] = true;
		popD[ART_L_OcamlLexer_not_lparen_3387] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3389] = "OcamlLexer.not_lparen ::= . `|";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3389] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3389] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3389] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3389] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3390] = "OcamlLexer.not_lparen ::= `|";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3390] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3390] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3390] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3391] = "OcamlLexer.not_lparen ::= `|. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3391] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3391] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3391] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3391] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3391] = true;
		popD[ART_L_OcamlLexer_not_lparen_3391] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3393] = "OcamlLexer.not_lparen ::= . `}";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3393] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3393] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3393] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3393] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3394] = "OcamlLexer.not_lparen ::= `}";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3394] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3394] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3394] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3395] = "OcamlLexer.not_lparen ::= `}. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3395] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3395] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3395] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3395] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3395] = true;
		popD[ART_L_OcamlLexer_not_lparen_3395] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3397] = "OcamlLexer.not_lparen ::= . `~";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3397] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3397] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3397] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_lparen_3397] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3398] = "OcamlLexer.not_lparen ::= `~";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3398] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3398] = ART_L_OcamlLexer_not_lparen;
		popD[ART_L_OcamlLexer_not_lparen_3398] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_lparen_3399] = "OcamlLexer.not_lparen ::= `~. ";
		artLabelStrings[ART_L_OcamlLexer_not_lparen_3399] = "";
		lhsL[ART_L_OcamlLexer_not_lparen_3399] = ART_L_OcamlLexer_not_lparen;
		artKindOfs[ART_L_OcamlLexer_not_lparen_3399] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_lparen_3399] = true;
		eoR_pL[ART_L_OcamlLexer_not_lparen_3399] = true;
		popD[ART_L_OcamlLexer_not_lparen_3399] = true;
	}

	public void artTableInitialiser_195() {
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen] = "OcamlLexer.not_rparen ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen] = "not_rparen";
		artKindOfs[ART_L_OcamlLexer_not_rparen] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3402] = "OcamlLexer.not_rparen ::= . `";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3402] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3402] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3402] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3402] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3403] = "OcamlLexer.not_rparen ::= `";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3403] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3403] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3403] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3404] = "OcamlLexer.not_rparen ::= `. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3404] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3404] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3404] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3404] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3404] = true;
		popD[ART_L_OcamlLexer_not_rparen_3404] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3406] = "OcamlLexer.not_rparen ::= . `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3406] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3406] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3406] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3406] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3407] = "OcamlLexer.not_rparen ::= `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3407] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3407] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3407] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3408] = "OcamlLexer.not_rparen ::= `\\\\007. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3408] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3408] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3408] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3408] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3408] = true;
		popD[ART_L_OcamlLexer_not_rparen_3408] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3410] = "OcamlLexer.not_rparen ::= . `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3410] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3410] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3410] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3410] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3411] = "OcamlLexer.not_rparen ::= `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3411] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3411] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3411] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3412] = "OcamlLexer.not_rparen ::= `\\\\010. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3412] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3412] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3412] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3412] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3412] = true;
		popD[ART_L_OcamlLexer_not_rparen_3412] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3414] = "OcamlLexer.not_rparen ::= . `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3414] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3414] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3414] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3414] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3415] = "OcamlLexer.not_rparen ::= `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3415] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3415] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3415] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3416] = "OcamlLexer.not_rparen ::= `\\\\t. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3416] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3416] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3416] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3416] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3416] = true;
		popD[ART_L_OcamlLexer_not_rparen_3416] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3418] = "OcamlLexer.not_rparen ::= . `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3418] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3418] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3418] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3418] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3419] = "OcamlLexer.not_rparen ::= `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3419] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3419] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3419] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3420] = "OcamlLexer.not_rparen ::= `\\\\013. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3420] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3420] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3420] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3420] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3420] = true;
		popD[ART_L_OcamlLexer_not_rparen_3420] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3422] = "OcamlLexer.not_rparen ::= . `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3422] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3422] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3422] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3422] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3423] = "OcamlLexer.not_rparen ::= `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3423] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3423] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3423] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3424] = "OcamlLexer.not_rparen ::= `\\\\014. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3424] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3424] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3424] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3424] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3424] = true;
		popD[ART_L_OcamlLexer_not_rparen_3424] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3426] = "OcamlLexer.not_rparen ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3426] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3426] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3426] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3426] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3427] = "OcamlLexer.not_rparen ::= `e";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3427] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3427] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3427] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3428] = "OcamlLexer.not_rparen ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3428] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3428] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3428] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3428] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3428] = true;
		popD[ART_L_OcamlLexer_not_rparen_3428] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3430] = "OcamlLexer.not_rparen ::= . ` ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3430] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3430] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3430] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3430] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3431] = "OcamlLexer.not_rparen ::= ` ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3431] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3431] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3431] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3432] = "OcamlLexer.not_rparen ::= ` . ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3432] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3432] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3432] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3432] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3432] = true;
		popD[ART_L_OcamlLexer_not_rparen_3432] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3434] = "OcamlLexer.not_rparen ::= . `!";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3434] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3434] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3434] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3434] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3435] = "OcamlLexer.not_rparen ::= `!";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3435] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3435] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3435] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3436] = "OcamlLexer.not_rparen ::= `!. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3436] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3436] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3436] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3436] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3436] = true;
		popD[ART_L_OcamlLexer_not_rparen_3436] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3438] = "OcamlLexer.not_rparen ::= . `\\\"";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3438] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3438] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3438] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3438] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3439] = "OcamlLexer.not_rparen ::= `\\\"";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3439] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3439] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3439] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3440] = "OcamlLexer.not_rparen ::= `\\\". ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3440] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3440] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3440] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3440] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3440] = true;
		popD[ART_L_OcamlLexer_not_rparen_3440] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3442] = "OcamlLexer.not_rparen ::= . `#";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3442] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3442] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3442] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3442] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3443] = "OcamlLexer.not_rparen ::= `#";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3443] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3443] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3443] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3444] = "OcamlLexer.not_rparen ::= `#. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3444] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3444] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3444] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3444] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3444] = true;
		popD[ART_L_OcamlLexer_not_rparen_3444] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3446] = "OcamlLexer.not_rparen ::= . `$";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3446] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3446] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3446] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3446] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3447] = "OcamlLexer.not_rparen ::= `$";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3447] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3447] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3447] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3448] = "OcamlLexer.not_rparen ::= `$. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3448] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3448] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3448] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3448] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3448] = true;
		popD[ART_L_OcamlLexer_not_rparen_3448] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3450] = "OcamlLexer.not_rparen ::= . `%";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3450] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3450] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3450] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3450] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3451] = "OcamlLexer.not_rparen ::= `%";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3451] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3451] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3451] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3452] = "OcamlLexer.not_rparen ::= `%. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3452] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3452] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3452] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3452] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3452] = true;
		popD[ART_L_OcamlLexer_not_rparen_3452] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3454] = "OcamlLexer.not_rparen ::= . `&";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3454] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3454] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3454] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3454] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3455] = "OcamlLexer.not_rparen ::= `&";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3455] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3455] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3455] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3456] = "OcamlLexer.not_rparen ::= `&. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3456] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3456] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3456] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3456] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3456] = true;
		popD[ART_L_OcamlLexer_not_rparen_3456] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3458] = "OcamlLexer.not_rparen ::= . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3458] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3458] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3458] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3458] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3459] = "OcamlLexer.not_rparen ::= `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3459] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3459] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3459] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3460] = "OcamlLexer.not_rparen ::= `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3460] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3460] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3460] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3460] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3460] = true;
		popD[ART_L_OcamlLexer_not_rparen_3460] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3462] = "OcamlLexer.not_rparen ::= . `(";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3462] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3462] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3462] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3462] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3463] = "OcamlLexer.not_rparen ::= `(";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3463] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3463] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3463] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3464] = "OcamlLexer.not_rparen ::= `(. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3464] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3464] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3464] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3464] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3464] = true;
		popD[ART_L_OcamlLexer_not_rparen_3464] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3466] = "OcamlLexer.not_rparen ::= . `*";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3466] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3466] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3466] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3466] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3467] = "OcamlLexer.not_rparen ::= `*";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3467] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3467] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3467] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3468] = "OcamlLexer.not_rparen ::= `*. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3468] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3468] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3468] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3468] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3468] = true;
		popD[ART_L_OcamlLexer_not_rparen_3468] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3470] = "OcamlLexer.not_rparen ::= . `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3470] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3470] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3470] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3470] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3471] = "OcamlLexer.not_rparen ::= `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3471] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3471] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3471] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3472] = "OcamlLexer.not_rparen ::= `\\\\r. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3472] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3472] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3472] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3472] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3472] = true;
		popD[ART_L_OcamlLexer_not_rparen_3472] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3474] = "OcamlLexer.not_rparen ::= . `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3474] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3474] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3474] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3474] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3475] = "OcamlLexer.not_rparen ::= `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3475] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3475] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3475] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3476] = "OcamlLexer.not_rparen ::= `\\\\n. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3476] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3476] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3476] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3476] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3476] = true;
		popD[ART_L_OcamlLexer_not_rparen_3476] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3478] = "OcamlLexer.not_rparen ::= . `+";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3478] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3478] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3478] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3478] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3479] = "OcamlLexer.not_rparen ::= `+";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3479] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3479] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3479] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3480] = "OcamlLexer.not_rparen ::= `+. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3480] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3480] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3480] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3480] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3480] = true;
		popD[ART_L_OcamlLexer_not_rparen_3480] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3482] = "OcamlLexer.not_rparen ::= . `,";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3482] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3482] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3482] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3482] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3483] = "OcamlLexer.not_rparen ::= `,";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3483] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3483] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3483] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3484] = "OcamlLexer.not_rparen ::= `,. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3484] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3484] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3484] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3484] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3484] = true;
		popD[ART_L_OcamlLexer_not_rparen_3484] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3486] = "OcamlLexer.not_rparen ::= . `-";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3486] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3486] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3486] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3486] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3487] = "OcamlLexer.not_rparen ::= `-";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3487] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3487] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3487] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3488] = "OcamlLexer.not_rparen ::= `-. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3488] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3488] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3488] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3488] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3488] = true;
		popD[ART_L_OcamlLexer_not_rparen_3488] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3490] = "OcamlLexer.not_rparen ::= . `.";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3490] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3490] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3490] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3490] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3491] = "OcamlLexer.not_rparen ::= `.";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3491] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3491] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3491] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3492] = "OcamlLexer.not_rparen ::= `.. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3492] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3492] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3492] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3492] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3492] = true;
		popD[ART_L_OcamlLexer_not_rparen_3492] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3494] = "OcamlLexer.not_rparen ::= . `/";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3494] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3494] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3494] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3494] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3495] = "OcamlLexer.not_rparen ::= `/";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3495] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3495] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3495] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3496] = "OcamlLexer.not_rparen ::= `/. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3496] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3496] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3496] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3496] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3496] = true;
		popD[ART_L_OcamlLexer_not_rparen_3496] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3498] = "OcamlLexer.not_rparen ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3498] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3498] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3498] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3498] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3499] = "OcamlLexer.not_rparen ::= `0";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3499] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3499] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3499] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3500] = "OcamlLexer.not_rparen ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3500] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3500] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3500] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3500] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3500] = true;
		popD[ART_L_OcamlLexer_not_rparen_3500] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3502] = "OcamlLexer.not_rparen ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3502] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3502] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3502] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3502] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3503] = "OcamlLexer.not_rparen ::= `1";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3503] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3503] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3503] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3504] = "OcamlLexer.not_rparen ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3504] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3504] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3504] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3504] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3504] = true;
		popD[ART_L_OcamlLexer_not_rparen_3504] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3506] = "OcamlLexer.not_rparen ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3506] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3506] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3506] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3506] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3507] = "OcamlLexer.not_rparen ::= `2";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3507] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3507] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3507] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3508] = "OcamlLexer.not_rparen ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3508] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3508] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3508] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3508] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3508] = true;
		popD[ART_L_OcamlLexer_not_rparen_3508] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3510] = "OcamlLexer.not_rparen ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3510] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3510] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3510] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3510] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3511] = "OcamlLexer.not_rparen ::= `3";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3511] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3511] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3511] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3512] = "OcamlLexer.not_rparen ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3512] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3512] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3512] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3512] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3512] = true;
		popD[ART_L_OcamlLexer_not_rparen_3512] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3514] = "OcamlLexer.not_rparen ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3514] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3514] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3514] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3514] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3515] = "OcamlLexer.not_rparen ::= `4";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3515] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3515] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3515] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3516] = "OcamlLexer.not_rparen ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3516] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3516] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3516] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3516] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3516] = true;
		popD[ART_L_OcamlLexer_not_rparen_3516] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3518] = "OcamlLexer.not_rparen ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3518] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3518] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3518] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3518] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3519] = "OcamlLexer.not_rparen ::= `5";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3519] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3519] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3519] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3520] = "OcamlLexer.not_rparen ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3520] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3520] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3520] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3520] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3520] = true;
		popD[ART_L_OcamlLexer_not_rparen_3520] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3522] = "OcamlLexer.not_rparen ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3522] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3522] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3522] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3522] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3523] = "OcamlLexer.not_rparen ::= `6";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3523] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3523] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3523] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3524] = "OcamlLexer.not_rparen ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3524] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3524] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3524] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3524] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3524] = true;
		popD[ART_L_OcamlLexer_not_rparen_3524] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3526] = "OcamlLexer.not_rparen ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3526] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3526] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3526] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3526] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3527] = "OcamlLexer.not_rparen ::= `7";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3527] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3527] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3527] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3528] = "OcamlLexer.not_rparen ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3528] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3528] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3528] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3528] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3528] = true;
		popD[ART_L_OcamlLexer_not_rparen_3528] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3530] = "OcamlLexer.not_rparen ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3530] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3530] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3530] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3530] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3531] = "OcamlLexer.not_rparen ::= `8";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3531] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3531] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3531] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3532] = "OcamlLexer.not_rparen ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3532] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3532] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3532] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3532] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3532] = true;
		popD[ART_L_OcamlLexer_not_rparen_3532] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3534] = "OcamlLexer.not_rparen ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3534] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3534] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3534] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3534] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3535] = "OcamlLexer.not_rparen ::= `9";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3535] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3535] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3535] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3536] = "OcamlLexer.not_rparen ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3536] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3536] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3536] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3536] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3536] = true;
		popD[ART_L_OcamlLexer_not_rparen_3536] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3538] = "OcamlLexer.not_rparen ::= . `:";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3538] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3538] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3538] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3538] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3539] = "OcamlLexer.not_rparen ::= `:";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3539] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3539] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3539] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3540] = "OcamlLexer.not_rparen ::= `:. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3540] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3540] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3540] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3540] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3540] = true;
		popD[ART_L_OcamlLexer_not_rparen_3540] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3542] = "OcamlLexer.not_rparen ::= . `;";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3542] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3542] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3542] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3542] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3543] = "OcamlLexer.not_rparen ::= `;";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3543] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3543] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3543] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3544] = "OcamlLexer.not_rparen ::= `;. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3544] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3544] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3544] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3544] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3544] = true;
		popD[ART_L_OcamlLexer_not_rparen_3544] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3546] = "OcamlLexer.not_rparen ::= . `<";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3546] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3546] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3546] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3546] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3547] = "OcamlLexer.not_rparen ::= `<";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3547] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3547] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3547] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3548] = "OcamlLexer.not_rparen ::= `<. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3548] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3548] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3548] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3548] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3548] = true;
		popD[ART_L_OcamlLexer_not_rparen_3548] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3550] = "OcamlLexer.not_rparen ::= . `=";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3550] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3550] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3550] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3550] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3551] = "OcamlLexer.not_rparen ::= `=";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3551] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3551] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3551] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3552] = "OcamlLexer.not_rparen ::= `=. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3552] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3552] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3552] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3552] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3552] = true;
		popD[ART_L_OcamlLexer_not_rparen_3552] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3554] = "OcamlLexer.not_rparen ::= . `>";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3554] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3554] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3554] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3554] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3555] = "OcamlLexer.not_rparen ::= `>";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3555] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3555] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3555] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3556] = "OcamlLexer.not_rparen ::= `>. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3556] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3556] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3556] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3556] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3556] = true;
		popD[ART_L_OcamlLexer_not_rparen_3556] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3558] = "OcamlLexer.not_rparen ::= . `?";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3558] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3558] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3558] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3558] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3559] = "OcamlLexer.not_rparen ::= `?";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3559] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3559] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3559] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3560] = "OcamlLexer.not_rparen ::= `?. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3560] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3560] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3560] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3560] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3560] = true;
		popD[ART_L_OcamlLexer_not_rparen_3560] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3562] = "OcamlLexer.not_rparen ::= . `@";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3562] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3562] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3562] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3562] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3563] = "OcamlLexer.not_rparen ::= `@";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3563] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3563] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3563] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3564] = "OcamlLexer.not_rparen ::= `@. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3564] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3564] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3564] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3564] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3564] = true;
		popD[ART_L_OcamlLexer_not_rparen_3564] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3566] = "OcamlLexer.not_rparen ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3566] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3566] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3566] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3566] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3567] = "OcamlLexer.not_rparen ::= `A";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3567] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3567] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3567] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3568] = "OcamlLexer.not_rparen ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3568] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3568] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3568] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3568] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3568] = true;
		popD[ART_L_OcamlLexer_not_rparen_3568] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3570] = "OcamlLexer.not_rparen ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3570] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3570] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3570] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3570] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3571] = "OcamlLexer.not_rparen ::= `B";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3571] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3571] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3571] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3572] = "OcamlLexer.not_rparen ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3572] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3572] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3572] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3572] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3572] = true;
		popD[ART_L_OcamlLexer_not_rparen_3572] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3574] = "OcamlLexer.not_rparen ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3574] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3574] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3574] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3574] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3575] = "OcamlLexer.not_rparen ::= `C";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3575] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3575] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3575] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3576] = "OcamlLexer.not_rparen ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3576] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3576] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3576] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3576] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3576] = true;
		popD[ART_L_OcamlLexer_not_rparen_3576] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3578] = "OcamlLexer.not_rparen ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3578] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3578] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3578] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3578] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3579] = "OcamlLexer.not_rparen ::= `D";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3579] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3579] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3579] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3580] = "OcamlLexer.not_rparen ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3580] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3580] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3580] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3580] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3580] = true;
		popD[ART_L_OcamlLexer_not_rparen_3580] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3582] = "OcamlLexer.not_rparen ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3582] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3582] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3582] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3582] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3583] = "OcamlLexer.not_rparen ::= `E";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3583] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3583] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3583] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3584] = "OcamlLexer.not_rparen ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3584] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3584] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3584] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3584] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3584] = true;
		popD[ART_L_OcamlLexer_not_rparen_3584] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3586] = "OcamlLexer.not_rparen ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3586] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3586] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3586] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3586] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3587] = "OcamlLexer.not_rparen ::= `F";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3587] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3587] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3587] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3588] = "OcamlLexer.not_rparen ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3588] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3588] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3588] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3588] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3588] = true;
		popD[ART_L_OcamlLexer_not_rparen_3588] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3590] = "OcamlLexer.not_rparen ::= . `G";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3590] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3590] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3590] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3590] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3591] = "OcamlLexer.not_rparen ::= `G";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3591] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3591] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3591] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3592] = "OcamlLexer.not_rparen ::= `G. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3592] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3592] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3592] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3592] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3592] = true;
		popD[ART_L_OcamlLexer_not_rparen_3592] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3594] = "OcamlLexer.not_rparen ::= . `H";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3594] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3594] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3594] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3594] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3595] = "OcamlLexer.not_rparen ::= `H";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3595] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3595] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3595] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3596] = "OcamlLexer.not_rparen ::= `H. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3596] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3596] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3596] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3596] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3596] = true;
		popD[ART_L_OcamlLexer_not_rparen_3596] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3598] = "OcamlLexer.not_rparen ::= . `I";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3598] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3598] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3598] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3598] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3599] = "OcamlLexer.not_rparen ::= `I";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3599] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3599] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3599] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3600] = "OcamlLexer.not_rparen ::= `I. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3600] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3600] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3600] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3600] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3600] = true;
		popD[ART_L_OcamlLexer_not_rparen_3600] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3602] = "OcamlLexer.not_rparen ::= . `J";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3602] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3602] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3602] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3602] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3603] = "OcamlLexer.not_rparen ::= `J";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3603] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3603] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3603] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3604] = "OcamlLexer.not_rparen ::= `J. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3604] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3604] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3604] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3604] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3604] = true;
		popD[ART_L_OcamlLexer_not_rparen_3604] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3606] = "OcamlLexer.not_rparen ::= . `K";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3606] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3606] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3606] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3606] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3607] = "OcamlLexer.not_rparen ::= `K";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3607] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3607] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3607] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3608] = "OcamlLexer.not_rparen ::= `K. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3608] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3608] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3608] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3608] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3608] = true;
		popD[ART_L_OcamlLexer_not_rparen_3608] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3610] = "OcamlLexer.not_rparen ::= . `L";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3610] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3610] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3610] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3610] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3611] = "OcamlLexer.not_rparen ::= `L";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3611] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3611] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3611] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3612] = "OcamlLexer.not_rparen ::= `L. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3612] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3612] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3612] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3612] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3612] = true;
		popD[ART_L_OcamlLexer_not_rparen_3612] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3614] = "OcamlLexer.not_rparen ::= . `M";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3614] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3614] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3614] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3614] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3615] = "OcamlLexer.not_rparen ::= `M";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3615] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3615] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3615] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3616] = "OcamlLexer.not_rparen ::= `M. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3616] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3616] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3616] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3616] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3616] = true;
		popD[ART_L_OcamlLexer_not_rparen_3616] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3618] = "OcamlLexer.not_rparen ::= . `N";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3618] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3618] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3618] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3618] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3619] = "OcamlLexer.not_rparen ::= `N";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3619] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3619] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3619] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3620] = "OcamlLexer.not_rparen ::= `N. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3620] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3620] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3620] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3620] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3620] = true;
		popD[ART_L_OcamlLexer_not_rparen_3620] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3622] = "OcamlLexer.not_rparen ::= . `O";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3622] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3622] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3622] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3622] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3623] = "OcamlLexer.not_rparen ::= `O";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3623] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3623] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3623] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3624] = "OcamlLexer.not_rparen ::= `O. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3624] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3624] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3624] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3624] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3624] = true;
		popD[ART_L_OcamlLexer_not_rparen_3624] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3626] = "OcamlLexer.not_rparen ::= . `P";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3626] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3626] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3626] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3626] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3627] = "OcamlLexer.not_rparen ::= `P";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3627] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3627] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3627] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3628] = "OcamlLexer.not_rparen ::= `P. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3628] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3628] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3628] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3628] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3628] = true;
		popD[ART_L_OcamlLexer_not_rparen_3628] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3630] = "OcamlLexer.not_rparen ::= . `Q";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3630] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3630] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3630] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3630] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3631] = "OcamlLexer.not_rparen ::= `Q";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3631] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3631] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3631] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3632] = "OcamlLexer.not_rparen ::= `Q. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3632] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3632] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3632] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3632] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3632] = true;
		popD[ART_L_OcamlLexer_not_rparen_3632] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3634] = "OcamlLexer.not_rparen ::= . `R";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3634] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3634] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3634] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3634] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3635] = "OcamlLexer.not_rparen ::= `R";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3635] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3635] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3635] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3636] = "OcamlLexer.not_rparen ::= `R. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3636] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3636] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3636] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3636] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3636] = true;
		popD[ART_L_OcamlLexer_not_rparen_3636] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3638] = "OcamlLexer.not_rparen ::= . `S";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3638] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3638] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3638] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3638] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3639] = "OcamlLexer.not_rparen ::= `S";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3639] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3639] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3639] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3640] = "OcamlLexer.not_rparen ::= `S. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3640] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3640] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3640] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3640] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3640] = true;
		popD[ART_L_OcamlLexer_not_rparen_3640] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3642] = "OcamlLexer.not_rparen ::= . `T";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3642] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3642] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3642] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3642] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3643] = "OcamlLexer.not_rparen ::= `T";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3643] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3643] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3643] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3644] = "OcamlLexer.not_rparen ::= `T. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3644] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3644] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3644] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3644] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3644] = true;
		popD[ART_L_OcamlLexer_not_rparen_3644] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3646] = "OcamlLexer.not_rparen ::= . `U";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3646] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3646] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3646] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3646] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3647] = "OcamlLexer.not_rparen ::= `U";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3647] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3647] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3647] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3648] = "OcamlLexer.not_rparen ::= `U. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3648] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3648] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3648] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3648] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3648] = true;
		popD[ART_L_OcamlLexer_not_rparen_3648] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3650] = "OcamlLexer.not_rparen ::= . `V";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3650] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3650] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3650] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3650] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3651] = "OcamlLexer.not_rparen ::= `V";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3651] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3651] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3651] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3652] = "OcamlLexer.not_rparen ::= `V. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3652] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3652] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3652] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3652] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3652] = true;
		popD[ART_L_OcamlLexer_not_rparen_3652] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3654] = "OcamlLexer.not_rparen ::= . `W";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3654] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3654] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3654] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3654] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3655] = "OcamlLexer.not_rparen ::= `W";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3655] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3655] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3655] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3656] = "OcamlLexer.not_rparen ::= `W. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3656] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3656] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3656] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3656] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3656] = true;
		popD[ART_L_OcamlLexer_not_rparen_3656] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3658] = "OcamlLexer.not_rparen ::= . `X";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3658] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3658] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3658] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3658] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3659] = "OcamlLexer.not_rparen ::= `X";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3659] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3659] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3659] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3660] = "OcamlLexer.not_rparen ::= `X. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3660] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3660] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3660] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3660] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3660] = true;
		popD[ART_L_OcamlLexer_not_rparen_3660] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3662] = "OcamlLexer.not_rparen ::= . `Y";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3662] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3662] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3662] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3662] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3663] = "OcamlLexer.not_rparen ::= `Y";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3663] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3663] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3663] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3664] = "OcamlLexer.not_rparen ::= `Y. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3664] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3664] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3664] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3664] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3664] = true;
		popD[ART_L_OcamlLexer_not_rparen_3664] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3666] = "OcamlLexer.not_rparen ::= . `Z";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3666] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3666] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3666] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3666] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3667] = "OcamlLexer.not_rparen ::= `Z";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3667] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3667] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3667] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3668] = "OcamlLexer.not_rparen ::= `Z. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3668] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3668] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3668] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3668] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3668] = true;
		popD[ART_L_OcamlLexer_not_rparen_3668] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3670] = "OcamlLexer.not_rparen ::= . `[";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3670] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3670] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3670] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3670] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3671] = "OcamlLexer.not_rparen ::= `[";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3671] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3671] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3671] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3672] = "OcamlLexer.not_rparen ::= `[. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3672] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3672] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3672] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3672] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3672] = true;
		popD[ART_L_OcamlLexer_not_rparen_3672] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3674] = "OcamlLexer.not_rparen ::= . `\\\\\\\\";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3674] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3674] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3674] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3674] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3675] = "OcamlLexer.not_rparen ::= `\\\\\\\\";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3675] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3675] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3675] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3676] = "OcamlLexer.not_rparen ::= `\\\\\\\\. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3676] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3676] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3676] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3676] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3676] = true;
		popD[ART_L_OcamlLexer_not_rparen_3676] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3678] = "OcamlLexer.not_rparen ::= . `]";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3678] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3678] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3678] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3678] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3679] = "OcamlLexer.not_rparen ::= `]";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3679] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3679] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3679] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3680] = "OcamlLexer.not_rparen ::= `]. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3680] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3680] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3680] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3680] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3680] = true;
		popD[ART_L_OcamlLexer_not_rparen_3680] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3682] = "OcamlLexer.not_rparen ::= . `^";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3682] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3682] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3682] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3682] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3683] = "OcamlLexer.not_rparen ::= `^";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3683] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3683] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3683] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3684] = "OcamlLexer.not_rparen ::= `^. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3684] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3684] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3684] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3684] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3684] = true;
		popD[ART_L_OcamlLexer_not_rparen_3684] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3686] = "OcamlLexer.not_rparen ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3686] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3686] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3686] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3686] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3687] = "OcamlLexer.not_rparen ::= `_";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3687] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3687] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3687] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3688] = "OcamlLexer.not_rparen ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3688] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3688] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3688] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3688] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3688] = true;
		popD[ART_L_OcamlLexer_not_rparen_3688] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3690] = "OcamlLexer.not_rparen ::= . `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3690] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3690] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3690] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3690] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3691] = "OcamlLexer.not_rparen ::= `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3691] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3691] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3691] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3692] = "OcamlLexer.not_rparen ::= `\\\\`. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3692] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3692] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3692] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3692] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3692] = true;
		popD[ART_L_OcamlLexer_not_rparen_3692] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3694] = "OcamlLexer.not_rparen ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3694] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3694] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3694] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3694] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3695] = "OcamlLexer.not_rparen ::= `a";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3695] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3695] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3695] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3696] = "OcamlLexer.not_rparen ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3696] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3696] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3696] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3696] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3696] = true;
		popD[ART_L_OcamlLexer_not_rparen_3696] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3698] = "OcamlLexer.not_rparen ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3698] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3698] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3698] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3698] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3699] = "OcamlLexer.not_rparen ::= `b";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3699] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3699] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3699] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3700] = "OcamlLexer.not_rparen ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3700] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3700] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3700] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3700] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3700] = true;
		popD[ART_L_OcamlLexer_not_rparen_3700] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3702] = "OcamlLexer.not_rparen ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3702] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3702] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3702] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3702] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3703] = "OcamlLexer.not_rparen ::= `c";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3703] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3703] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3703] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3704] = "OcamlLexer.not_rparen ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3704] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3704] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3704] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3704] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3704] = true;
		popD[ART_L_OcamlLexer_not_rparen_3704] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3706] = "OcamlLexer.not_rparen ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3706] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3706] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3706] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3706] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3707] = "OcamlLexer.not_rparen ::= `d";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3707] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3707] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3707] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3708] = "OcamlLexer.not_rparen ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3708] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3708] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3708] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3708] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3708] = true;
		popD[ART_L_OcamlLexer_not_rparen_3708] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3710] = "OcamlLexer.not_rparen ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3710] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3710] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3710] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3710] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3711] = "OcamlLexer.not_rparen ::= `f";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3711] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3711] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3711] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3712] = "OcamlLexer.not_rparen ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3712] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3712] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3712] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3712] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3712] = true;
		popD[ART_L_OcamlLexer_not_rparen_3712] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3714] = "OcamlLexer.not_rparen ::= . `g";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3714] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3714] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3714] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3714] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3715] = "OcamlLexer.not_rparen ::= `g";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3715] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3715] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3715] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3716] = "OcamlLexer.not_rparen ::= `g. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3716] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3716] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3716] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3716] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3716] = true;
		popD[ART_L_OcamlLexer_not_rparen_3716] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3718] = "OcamlLexer.not_rparen ::= . `h";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3718] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3718] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3718] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3718] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3719] = "OcamlLexer.not_rparen ::= `h";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3719] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3719] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3719] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3720] = "OcamlLexer.not_rparen ::= `h. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3720] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3720] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3720] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3720] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3720] = true;
		popD[ART_L_OcamlLexer_not_rparen_3720] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3722] = "OcamlLexer.not_rparen ::= . `i";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3722] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3722] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3722] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3722] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3723] = "OcamlLexer.not_rparen ::= `i";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3723] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3723] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3723] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3724] = "OcamlLexer.not_rparen ::= `i. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3724] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3724] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3724] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3724] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3724] = true;
		popD[ART_L_OcamlLexer_not_rparen_3724] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3726] = "OcamlLexer.not_rparen ::= . `j";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3726] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3726] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3726] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3726] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3727] = "OcamlLexer.not_rparen ::= `j";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3727] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3727] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3727] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3728] = "OcamlLexer.not_rparen ::= `j. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3728] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3728] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3728] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3728] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3728] = true;
		popD[ART_L_OcamlLexer_not_rparen_3728] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3730] = "OcamlLexer.not_rparen ::= . `k";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3730] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3730] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3730] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3730] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3731] = "OcamlLexer.not_rparen ::= `k";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3731] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3731] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3731] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3732] = "OcamlLexer.not_rparen ::= `k. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3732] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3732] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3732] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3732] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3732] = true;
		popD[ART_L_OcamlLexer_not_rparen_3732] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3734] = "OcamlLexer.not_rparen ::= . `l";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3734] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3734] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3734] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3734] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3735] = "OcamlLexer.not_rparen ::= `l";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3735] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3735] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3735] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3736] = "OcamlLexer.not_rparen ::= `l. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3736] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3736] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3736] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3736] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3736] = true;
		popD[ART_L_OcamlLexer_not_rparen_3736] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3738] = "OcamlLexer.not_rparen ::= . `m";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3738] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3738] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3738] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3738] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3739] = "OcamlLexer.not_rparen ::= `m";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3739] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3739] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3739] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3740] = "OcamlLexer.not_rparen ::= `m. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3740] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3740] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3740] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3740] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3740] = true;
		popD[ART_L_OcamlLexer_not_rparen_3740] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3742] = "OcamlLexer.not_rparen ::= . `n";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3742] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3742] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3742] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3742] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3743] = "OcamlLexer.not_rparen ::= `n";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3743] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3743] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3743] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3744] = "OcamlLexer.not_rparen ::= `n. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3744] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3744] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3744] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3744] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3744] = true;
		popD[ART_L_OcamlLexer_not_rparen_3744] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3746] = "OcamlLexer.not_rparen ::= . `o";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3746] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3746] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3746] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3746] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3747] = "OcamlLexer.not_rparen ::= `o";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3747] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3747] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3747] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3748] = "OcamlLexer.not_rparen ::= `o. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3748] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3748] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3748] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3748] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3748] = true;
		popD[ART_L_OcamlLexer_not_rparen_3748] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3750] = "OcamlLexer.not_rparen ::= . `p";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3750] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3750] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3750] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3750] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3751] = "OcamlLexer.not_rparen ::= `p";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3751] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3751] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3751] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3752] = "OcamlLexer.not_rparen ::= `p. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3752] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3752] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3752] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3752] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3752] = true;
		popD[ART_L_OcamlLexer_not_rparen_3752] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3754] = "OcamlLexer.not_rparen ::= . `q";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3754] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3754] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3754] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3754] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3755] = "OcamlLexer.not_rparen ::= `q";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3755] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3755] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3755] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3756] = "OcamlLexer.not_rparen ::= `q. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3756] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3756] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3756] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3756] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3756] = true;
		popD[ART_L_OcamlLexer_not_rparen_3756] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3758] = "OcamlLexer.not_rparen ::= . `r";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3758] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3758] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3758] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3758] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3759] = "OcamlLexer.not_rparen ::= `r";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3759] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3759] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3759] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3760] = "OcamlLexer.not_rparen ::= `r. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3760] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3760] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3760] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3760] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3760] = true;
		popD[ART_L_OcamlLexer_not_rparen_3760] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3762] = "OcamlLexer.not_rparen ::= . `s";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3762] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3762] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3762] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3762] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3763] = "OcamlLexer.not_rparen ::= `s";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3763] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3763] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3763] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3764] = "OcamlLexer.not_rparen ::= `s. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3764] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3764] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3764] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3764] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3764] = true;
		popD[ART_L_OcamlLexer_not_rparen_3764] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3766] = "OcamlLexer.not_rparen ::= . `t";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3766] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3766] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3766] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3766] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3767] = "OcamlLexer.not_rparen ::= `t";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3767] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3767] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3767] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3768] = "OcamlLexer.not_rparen ::= `t. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3768] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3768] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3768] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3768] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3768] = true;
		popD[ART_L_OcamlLexer_not_rparen_3768] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3770] = "OcamlLexer.not_rparen ::= . `u";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3770] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3770] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3770] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3770] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3771] = "OcamlLexer.not_rparen ::= `u";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3771] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3771] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3771] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3772] = "OcamlLexer.not_rparen ::= `u. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3772] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3772] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3772] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3772] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3772] = true;
		popD[ART_L_OcamlLexer_not_rparen_3772] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3774] = "OcamlLexer.not_rparen ::= . `v";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3774] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3774] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3774] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3774] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3775] = "OcamlLexer.not_rparen ::= `v";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3775] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3775] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3775] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3776] = "OcamlLexer.not_rparen ::= `v. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3776] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3776] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3776] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3776] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3776] = true;
		popD[ART_L_OcamlLexer_not_rparen_3776] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3778] = "OcamlLexer.not_rparen ::= . `w";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3778] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3778] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3778] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3778] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3779] = "OcamlLexer.not_rparen ::= `w";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3779] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3779] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3779] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3780] = "OcamlLexer.not_rparen ::= `w. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3780] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3780] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3780] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3780] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3780] = true;
		popD[ART_L_OcamlLexer_not_rparen_3780] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3782] = "OcamlLexer.not_rparen ::= . `x";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3782] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3782] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3782] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3782] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3783] = "OcamlLexer.not_rparen ::= `x";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3783] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3783] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3783] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3784] = "OcamlLexer.not_rparen ::= `x. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3784] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3784] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3784] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3784] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3784] = true;
		popD[ART_L_OcamlLexer_not_rparen_3784] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3786] = "OcamlLexer.not_rparen ::= . `y";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3786] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3786] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3786] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3786] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3787] = "OcamlLexer.not_rparen ::= `y";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3787] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3787] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3787] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3788] = "OcamlLexer.not_rparen ::= `y. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3788] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3788] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3788] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3788] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3788] = true;
		popD[ART_L_OcamlLexer_not_rparen_3788] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3790] = "OcamlLexer.not_rparen ::= . `z";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3790] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3790] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3790] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3790] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3791] = "OcamlLexer.not_rparen ::= `z";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3791] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3791] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3791] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3792] = "OcamlLexer.not_rparen ::= `z. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3792] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3792] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3792] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3792] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3792] = true;
		popD[ART_L_OcamlLexer_not_rparen_3792] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3794] = "OcamlLexer.not_rparen ::= . `{";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3794] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3794] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3794] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3794] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3795] = "OcamlLexer.not_rparen ::= `{";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3795] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3795] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3795] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3796] = "OcamlLexer.not_rparen ::= `{. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3796] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3796] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3796] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3796] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3796] = true;
		popD[ART_L_OcamlLexer_not_rparen_3796] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3798] = "OcamlLexer.not_rparen ::= . `|";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3798] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3798] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3798] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3798] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3799] = "OcamlLexer.not_rparen ::= `|";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3799] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3799] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3799] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3800] = "OcamlLexer.not_rparen ::= `|. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3800] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3800] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3800] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3800] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3800] = true;
		popD[ART_L_OcamlLexer_not_rparen_3800] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3802] = "OcamlLexer.not_rparen ::= . `}";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3802] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3802] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3802] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3802] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3803] = "OcamlLexer.not_rparen ::= `}";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3803] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3803] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3803] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3804] = "OcamlLexer.not_rparen ::= `}. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3804] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3804] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3804] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3804] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3804] = true;
		popD[ART_L_OcamlLexer_not_rparen_3804] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3806] = "OcamlLexer.not_rparen ::= . `~";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3806] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3806] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3806] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_not_rparen_3806] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3807] = "OcamlLexer.not_rparen ::= `~";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3807] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3807] = ART_L_OcamlLexer_not_rparen;
		popD[ART_L_OcamlLexer_not_rparen_3807] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_not_rparen_3808] = "OcamlLexer.not_rparen ::= `~. ";
		artLabelStrings[ART_L_OcamlLexer_not_rparen_3808] = "";
		lhsL[ART_L_OcamlLexer_not_rparen_3808] = ART_L_OcamlLexer_not_rparen;
		artKindOfs[ART_L_OcamlLexer_not_rparen_3808] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_not_rparen_3808] = true;
		eoR_pL[ART_L_OcamlLexer_not_rparen_3808] = true;
		popD[ART_L_OcamlLexer_not_rparen_3808] = true;
	}

	public void artTableInitialiser_196() {
		artLabelInternalStrings[ART_L_OcamlLexer_object] = "OcamlLexer.object ";
		artLabelStrings[ART_L_OcamlLexer_object] = "object";
		artKindOfs[ART_L_OcamlLexer_object] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_object_924] = "OcamlLexer.object ::= . `o`b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_924] = "";
		lhsL[ART_L_OcamlLexer_object_924] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_object_924] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_object_924] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_925] = "OcamlLexer.object ::= `o`b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_925] = "";
		lhsL[ART_L_OcamlLexer_object_925] = ART_L_OcamlLexer_object;
		popD[ART_L_OcamlLexer_object_925] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_926] = "OcamlLexer.object ::= `o. `b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_926] = "";
		lhsL[ART_L_OcamlLexer_object_926] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_object_926] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_object_926] = true;
		popD[ART_L_OcamlLexer_object_926] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_927] = "OcamlLexer.object ::= `o`b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_927] = "";
		lhsL[ART_L_OcamlLexer_object_927] = ART_L_OcamlLexer_object;
		popD[ART_L_OcamlLexer_object_927] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_928] = "OcamlLexer.object ::= `o`b. `j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_928] = "";
		lhsL[ART_L_OcamlLexer_object_928] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_object_928] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_object_928] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_929] = "OcamlLexer.object ::= `o`b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_929] = "";
		lhsL[ART_L_OcamlLexer_object_929] = ART_L_OcamlLexer_object;
		popD[ART_L_OcamlLexer_object_929] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_930] = "OcamlLexer.object ::= `o`b`j. `e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_930] = "";
		lhsL[ART_L_OcamlLexer_object_930] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_object_930] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_object_930] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_931] = "OcamlLexer.object ::= `o`b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_931] = "";
		lhsL[ART_L_OcamlLexer_object_931] = ART_L_OcamlLexer_object;
		popD[ART_L_OcamlLexer_object_931] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_932] = "OcamlLexer.object ::= `o`b`j`e. `c`t";
		artLabelStrings[ART_L_OcamlLexer_object_932] = "";
		lhsL[ART_L_OcamlLexer_object_932] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_object_932] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_object_932] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_933] = "OcamlLexer.object ::= `o`b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_933] = "";
		lhsL[ART_L_OcamlLexer_object_933] = ART_L_OcamlLexer_object;
		popD[ART_L_OcamlLexer_object_933] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_934] = "OcamlLexer.object ::= `o`b`j`e`c. `t";
		artLabelStrings[ART_L_OcamlLexer_object_934] = "";
		lhsL[ART_L_OcamlLexer_object_934] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_object_934] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_object_934] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_935] = "OcamlLexer.object ::= `o`b`j`e`c`t";
		artLabelStrings[ART_L_OcamlLexer_object_935] = "";
		lhsL[ART_L_OcamlLexer_object_935] = ART_L_OcamlLexer_object;
		popD[ART_L_OcamlLexer_object_935] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_object_936] = "OcamlLexer.object ::= `o`b`j`e`c`t. ";
		artLabelStrings[ART_L_OcamlLexer_object_936] = "";
		lhsL[ART_L_OcamlLexer_object_936] = ART_L_OcamlLexer_object;
		artKindOfs[ART_L_OcamlLexer_object_936] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_object_936] = true;
		eoR_pL[ART_L_OcamlLexer_object_936] = true;
		popD[ART_L_OcamlLexer_object_936] = true;
	}

	public void artTableInitialiser_197() {
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit] = "OcamlLexer.oct_digit ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit] = "oct_digit";
		artKindOfs[ART_L_OcamlLexer_oct_digit] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_3995] = "OcamlLexer.oct_digit ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_3995] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_3995] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_3995] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_3995] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_3996] = "OcamlLexer.oct_digit ::= `0";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_3996] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_3996] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_3996] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_3997] = "OcamlLexer.oct_digit ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_3997] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_3997] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_3997] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_3997] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_3997] = true;
		popD[ART_L_OcamlLexer_oct_digit_3997] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_3999] = "OcamlLexer.oct_digit ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_3999] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_3999] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_3999] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_3999] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4000] = "OcamlLexer.oct_digit ::= `1";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4000] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4000] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_4000] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4001] = "OcamlLexer.oct_digit ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4001] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4001] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4001] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_4001] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_4001] = true;
		popD[ART_L_OcamlLexer_oct_digit_4001] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4003] = "OcamlLexer.oct_digit ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4003] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4003] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4003] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_4003] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4004] = "OcamlLexer.oct_digit ::= `2";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4004] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4004] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_4004] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4005] = "OcamlLexer.oct_digit ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4005] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4005] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4005] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_4005] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_4005] = true;
		popD[ART_L_OcamlLexer_oct_digit_4005] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4007] = "OcamlLexer.oct_digit ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4007] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4007] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4007] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_4007] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4008] = "OcamlLexer.oct_digit ::= `3";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4008] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4008] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_4008] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4009] = "OcamlLexer.oct_digit ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4009] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4009] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4009] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_4009] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_4009] = true;
		popD[ART_L_OcamlLexer_oct_digit_4009] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4011] = "OcamlLexer.oct_digit ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4011] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4011] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4011] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_4011] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4012] = "OcamlLexer.oct_digit ::= `4";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4012] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4012] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_4012] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4013] = "OcamlLexer.oct_digit ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4013] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4013] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4013] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_4013] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_4013] = true;
		popD[ART_L_OcamlLexer_oct_digit_4013] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4015] = "OcamlLexer.oct_digit ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4015] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4015] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4015] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_4015] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4016] = "OcamlLexer.oct_digit ::= `5";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4016] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4016] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_4016] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4017] = "OcamlLexer.oct_digit ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4017] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4017] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4017] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_4017] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_4017] = true;
		popD[ART_L_OcamlLexer_oct_digit_4017] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4019] = "OcamlLexer.oct_digit ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4019] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4019] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4019] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_4019] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4020] = "OcamlLexer.oct_digit ::= `6";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4020] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4020] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_4020] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4021] = "OcamlLexer.oct_digit ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4021] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4021] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4021] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_4021] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_4021] = true;
		popD[ART_L_OcamlLexer_oct_digit_4021] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4023] = "OcamlLexer.oct_digit ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4023] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4023] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4023] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_oct_digit_4023] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4024] = "OcamlLexer.oct_digit ::= `7";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4024] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4024] = ART_L_OcamlLexer_oct_digit;
		popD[ART_L_OcamlLexer_oct_digit_4024] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_oct_digit_4025] = "OcamlLexer.oct_digit ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_oct_digit_4025] = "";
		lhsL[ART_L_OcamlLexer_oct_digit_4025] = ART_L_OcamlLexer_oct_digit;
		artKindOfs[ART_L_OcamlLexer_oct_digit_4025] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_oct_digit_4025] = true;
		eoR_pL[ART_L_OcamlLexer_oct_digit_4025] = true;
		popD[ART_L_OcamlLexer_oct_digit_4025] = true;
	}

	public void artTableInitialiser_198() {
		artLabelInternalStrings[ART_L_OcamlLexer_of] = "OcamlLexer.of ";
		artLabelStrings[ART_L_OcamlLexer_of] = "of";
		artKindOfs[ART_L_OcamlLexer_of] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_of_939] = "OcamlLexer.of ::= . `o`f";
		artLabelStrings[ART_L_OcamlLexer_of_939] = "";
		lhsL[ART_L_OcamlLexer_of_939] = ART_L_OcamlLexer_of;
		artKindOfs[ART_L_OcamlLexer_of_939] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_of_939] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_of_940] = "OcamlLexer.of ::= `o`f";
		artLabelStrings[ART_L_OcamlLexer_of_940] = "";
		lhsL[ART_L_OcamlLexer_of_940] = ART_L_OcamlLexer_of;
		popD[ART_L_OcamlLexer_of_940] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_of_941] = "OcamlLexer.of ::= `o. `f";
		artLabelStrings[ART_L_OcamlLexer_of_941] = "";
		lhsL[ART_L_OcamlLexer_of_941] = ART_L_OcamlLexer_of;
		artKindOfs[ART_L_OcamlLexer_of_941] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_of_941] = true;
		popD[ART_L_OcamlLexer_of_941] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_of_942] = "OcamlLexer.of ::= `o`f";
		artLabelStrings[ART_L_OcamlLexer_of_942] = "";
		lhsL[ART_L_OcamlLexer_of_942] = ART_L_OcamlLexer_of;
		popD[ART_L_OcamlLexer_of_942] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_of_943] = "OcamlLexer.of ::= `o`f. ";
		artLabelStrings[ART_L_OcamlLexer_of_943] = "";
		lhsL[ART_L_OcamlLexer_of_943] = ART_L_OcamlLexer_of;
		artKindOfs[ART_L_OcamlLexer_of_943] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_of_943] = true;
		eoR_pL[ART_L_OcamlLexer_of_943] = true;
		popD[ART_L_OcamlLexer_of_943] = true;
	}

	public void artTableInitialiser_199() {
		artLabelInternalStrings[ART_L_OcamlLexer_open] = "OcamlLexer.open ";
		artLabelStrings[ART_L_OcamlLexer_open] = "open";
		artKindOfs[ART_L_OcamlLexer_open] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_open_946] = "OcamlLexer.open ::= . `o`p`e`n";
		artLabelStrings[ART_L_OcamlLexer_open_946] = "";
		lhsL[ART_L_OcamlLexer_open_946] = ART_L_OcamlLexer_open;
		artKindOfs[ART_L_OcamlLexer_open_946] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_open_946] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_947] = "OcamlLexer.open ::= `o`p`e`n";
		artLabelStrings[ART_L_OcamlLexer_open_947] = "";
		lhsL[ART_L_OcamlLexer_open_947] = ART_L_OcamlLexer_open;
		popD[ART_L_OcamlLexer_open_947] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_948] = "OcamlLexer.open ::= `o. `p`e`n";
		artLabelStrings[ART_L_OcamlLexer_open_948] = "";
		lhsL[ART_L_OcamlLexer_open_948] = ART_L_OcamlLexer_open;
		artKindOfs[ART_L_OcamlLexer_open_948] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_open_948] = true;
		popD[ART_L_OcamlLexer_open_948] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_949] = "OcamlLexer.open ::= `o`p`e`n";
		artLabelStrings[ART_L_OcamlLexer_open_949] = "";
		lhsL[ART_L_OcamlLexer_open_949] = ART_L_OcamlLexer_open;
		popD[ART_L_OcamlLexer_open_949] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_950] = "OcamlLexer.open ::= `o`p. `e`n";
		artLabelStrings[ART_L_OcamlLexer_open_950] = "";
		lhsL[ART_L_OcamlLexer_open_950] = ART_L_OcamlLexer_open;
		artKindOfs[ART_L_OcamlLexer_open_950] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_open_950] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_951] = "OcamlLexer.open ::= `o`p`e`n";
		artLabelStrings[ART_L_OcamlLexer_open_951] = "";
		lhsL[ART_L_OcamlLexer_open_951] = ART_L_OcamlLexer_open;
		popD[ART_L_OcamlLexer_open_951] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_952] = "OcamlLexer.open ::= `o`p`e. `n";
		artLabelStrings[ART_L_OcamlLexer_open_952] = "";
		lhsL[ART_L_OcamlLexer_open_952] = ART_L_OcamlLexer_open;
		artKindOfs[ART_L_OcamlLexer_open_952] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_open_952] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_953] = "OcamlLexer.open ::= `o`p`e`n";
		artLabelStrings[ART_L_OcamlLexer_open_953] = "";
		lhsL[ART_L_OcamlLexer_open_953] = ART_L_OcamlLexer_open;
		popD[ART_L_OcamlLexer_open_953] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_open_954] = "OcamlLexer.open ::= `o`p`e`n. ";
		artLabelStrings[ART_L_OcamlLexer_open_954] = "";
		lhsL[ART_L_OcamlLexer_open_954] = ART_L_OcamlLexer_open;
		artKindOfs[ART_L_OcamlLexer_open_954] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_open_954] = true;
		eoR_pL[ART_L_OcamlLexer_open_954] = true;
		popD[ART_L_OcamlLexer_open_954] = true;
	}

	public void artTableInitialiser_200() {
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char] = "OcamlLexer.operator_char ";
		artLabelStrings[ART_L_OcamlLexer_operator_char] = "operator_char";
		artKindOfs[ART_L_OcamlLexer_operator_char] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5222] = "OcamlLexer.operator_char ::= . `!";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5222] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5222] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5222] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5222] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5223] = "OcamlLexer.operator_char ::= `!";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5223] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5223] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5223] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5224] = "OcamlLexer.operator_char ::= `!. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5224] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5224] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5224] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5224] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5224] = true;
		popD[ART_L_OcamlLexer_operator_char_5224] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5226] = "OcamlLexer.operator_char ::= . `$";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5226] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5226] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5226] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5226] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5227] = "OcamlLexer.operator_char ::= `$";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5227] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5227] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5227] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5228] = "OcamlLexer.operator_char ::= `$. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5228] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5228] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5228] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5228] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5228] = true;
		popD[ART_L_OcamlLexer_operator_char_5228] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5230] = "OcamlLexer.operator_char ::= . `%";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5230] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5230] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5230] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5230] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5231] = "OcamlLexer.operator_char ::= `%";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5231] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5231] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5231] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5232] = "OcamlLexer.operator_char ::= `%. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5232] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5232] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5232] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5232] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5232] = true;
		popD[ART_L_OcamlLexer_operator_char_5232] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5234] = "OcamlLexer.operator_char ::= . `&";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5234] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5234] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5234] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5234] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5235] = "OcamlLexer.operator_char ::= `&";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5235] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5235] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5235] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5236] = "OcamlLexer.operator_char ::= `&. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5236] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5236] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5236] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5236] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5236] = true;
		popD[ART_L_OcamlLexer_operator_char_5236] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5238] = "OcamlLexer.operator_char ::= . `*";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5238] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5238] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5238] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5238] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5239] = "OcamlLexer.operator_char ::= `*";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5239] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5239] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5239] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5240] = "OcamlLexer.operator_char ::= `*. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5240] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5240] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5240] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5240] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5240] = true;
		popD[ART_L_OcamlLexer_operator_char_5240] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5242] = "OcamlLexer.operator_char ::= . `+";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5242] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5242] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5242] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5242] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5243] = "OcamlLexer.operator_char ::= `+";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5243] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5243] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5243] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5244] = "OcamlLexer.operator_char ::= `+. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5244] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5244] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5244] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5244] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5244] = true;
		popD[ART_L_OcamlLexer_operator_char_5244] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5246] = "OcamlLexer.operator_char ::= . `-";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5246] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5246] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5246] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5246] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5247] = "OcamlLexer.operator_char ::= `-";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5247] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5247] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5247] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5248] = "OcamlLexer.operator_char ::= `-. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5248] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5248] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5248] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5248] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5248] = true;
		popD[ART_L_OcamlLexer_operator_char_5248] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5250] = "OcamlLexer.operator_char ::= . `.";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5250] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5250] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5250] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5250] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5251] = "OcamlLexer.operator_char ::= `.";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5251] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5251] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5251] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5252] = "OcamlLexer.operator_char ::= `.. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5252] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5252] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5252] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5252] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5252] = true;
		popD[ART_L_OcamlLexer_operator_char_5252] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5254] = "OcamlLexer.operator_char ::= . `/";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5254] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5254] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5254] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5254] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5255] = "OcamlLexer.operator_char ::= `/";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5255] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5255] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5255] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5256] = "OcamlLexer.operator_char ::= `/. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5256] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5256] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5256] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5256] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5256] = true;
		popD[ART_L_OcamlLexer_operator_char_5256] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5258] = "OcamlLexer.operator_char ::= . `:";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5258] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5258] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5258] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5258] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5259] = "OcamlLexer.operator_char ::= `:";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5259] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5259] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5259] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5260] = "OcamlLexer.operator_char ::= `:. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5260] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5260] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5260] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5260] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5260] = true;
		popD[ART_L_OcamlLexer_operator_char_5260] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5262] = "OcamlLexer.operator_char ::= . `<";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5262] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5262] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5262] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5262] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5263] = "OcamlLexer.operator_char ::= `<";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5263] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5263] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5263] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5264] = "OcamlLexer.operator_char ::= `<. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5264] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5264] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5264] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5264] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5264] = true;
		popD[ART_L_OcamlLexer_operator_char_5264] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5266] = "OcamlLexer.operator_char ::= . `=";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5266] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5266] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5266] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5266] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5267] = "OcamlLexer.operator_char ::= `=";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5267] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5267] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5267] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5268] = "OcamlLexer.operator_char ::= `=. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5268] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5268] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5268] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5268] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5268] = true;
		popD[ART_L_OcamlLexer_operator_char_5268] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5270] = "OcamlLexer.operator_char ::= . `>";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5270] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5270] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5270] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5270] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5271] = "OcamlLexer.operator_char ::= `>";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5271] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5271] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5271] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5272] = "OcamlLexer.operator_char ::= `>. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5272] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5272] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5272] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5272] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5272] = true;
		popD[ART_L_OcamlLexer_operator_char_5272] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5274] = "OcamlLexer.operator_char ::= . `?";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5274] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5274] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5274] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5274] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5275] = "OcamlLexer.operator_char ::= `?";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5275] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5275] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5275] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5276] = "OcamlLexer.operator_char ::= `?. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5276] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5276] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5276] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5276] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5276] = true;
		popD[ART_L_OcamlLexer_operator_char_5276] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5278] = "OcamlLexer.operator_char ::= . `@";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5278] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5278] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5278] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5278] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5279] = "OcamlLexer.operator_char ::= `@";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5279] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5279] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5279] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5280] = "OcamlLexer.operator_char ::= `@. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5280] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5280] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5280] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5280] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5280] = true;
		popD[ART_L_OcamlLexer_operator_char_5280] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5282] = "OcamlLexer.operator_char ::= . `^";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5282] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5282] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5282] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5282] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5283] = "OcamlLexer.operator_char ::= `^";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5283] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5283] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5283] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5284] = "OcamlLexer.operator_char ::= `^. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5284] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5284] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5284] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5284] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5284] = true;
		popD[ART_L_OcamlLexer_operator_char_5284] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5286] = "OcamlLexer.operator_char ::= . `|";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5286] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5286] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5286] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5286] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5287] = "OcamlLexer.operator_char ::= `|";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5287] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5287] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5287] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5288] = "OcamlLexer.operator_char ::= `|. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5288] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5288] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5288] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5288] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5288] = true;
		popD[ART_L_OcamlLexer_operator_char_5288] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5290] = "OcamlLexer.operator_char ::= . `~";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5290] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5290] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5290] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_operator_char_5290] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5291] = "OcamlLexer.operator_char ::= `~";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5291] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5291] = ART_L_OcamlLexer_operator_char;
		popD[ART_L_OcamlLexer_operator_char_5291] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_operator_char_5292] = "OcamlLexer.operator_char ::= `~. ";
		artLabelStrings[ART_L_OcamlLexer_operator_char_5292] = "";
		lhsL[ART_L_OcamlLexer_operator_char_5292] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_operator_char_5292] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_operator_char_5292] = true;
		eoR_pL[ART_L_OcamlLexer_operator_char_5292] = true;
		popD[ART_L_OcamlLexer_operator_char_5292] = true;
	}

	public void artTableInitialiser_201() {
		artLabelInternalStrings[ART_L_OcamlLexer_optlabel] = "OcamlLexer.optlabel ";
		artLabelStrings[ART_L_OcamlLexer_optlabel] = "optlabel";
		artKindOfs[ART_L_OcamlLexer_optlabel] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_optlabel_5119] = "OcamlLexer.optlabel ::= . `?OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_optlabel_5119] = "";
		lhsL[ART_L_OcamlLexer_optlabel_5119] = ART_L_OcamlLexer_optlabel;
		artKindOfs[ART_L_OcamlLexer_optlabel_5119] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_optlabel_5120] = "OcamlLexer.optlabel ::= `?OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_optlabel_5120] = "";
		lhsL[ART_L_OcamlLexer_optlabel_5120] = ART_L_OcamlLexer_optlabel;
		artLabelInternalStrings[ART_L_OcamlLexer_optlabel_5121] = "OcamlLexer.optlabel ::= `?. OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_optlabel_5121] = "";
		lhsL[ART_L_OcamlLexer_optlabel_5121] = ART_L_OcamlLexer_optlabel;
		artKindOfs[ART_L_OcamlLexer_optlabel_5121] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_optlabel_5121] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_optlabel_5123] = "OcamlLexer.optlabel ::= `?OcamlLexer.label_name . `:";
		artLabelStrings[ART_L_OcamlLexer_optlabel_5123] = "";
		lhsL[ART_L_OcamlLexer_optlabel_5123] = ART_L_OcamlLexer_optlabel;
		artSlotInstanceOfs[ART_L_OcamlLexer_optlabel_5123] = ART_L_OcamlLexer_label_name;
		artKindOfs[ART_L_OcamlLexer_optlabel_5123] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_optlabel_5123] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_optlabel_5124] = "OcamlLexer.optlabel ::= `?OcamlLexer.label_name `:";
		artLabelStrings[ART_L_OcamlLexer_optlabel_5124] = "";
		lhsL[ART_L_OcamlLexer_optlabel_5124] = ART_L_OcamlLexer_optlabel;
		popD[ART_L_OcamlLexer_optlabel_5124] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_optlabel_5125] = "OcamlLexer.optlabel ::= `?OcamlLexer.label_name `:. ";
		artLabelStrings[ART_L_OcamlLexer_optlabel_5125] = "";
		lhsL[ART_L_OcamlLexer_optlabel_5125] = ART_L_OcamlLexer_optlabel;
		artKindOfs[ART_L_OcamlLexer_optlabel_5125] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_optlabel_5125] = true;
		eoR_pL[ART_L_OcamlLexer_optlabel_5125] = true;
		popD[ART_L_OcamlLexer_optlabel_5125] = true;
	}

	public void artTableInitialiser_202() {
		artLabelInternalStrings[ART_L_OcamlLexer_or] = "OcamlLexer.or ";
		artLabelStrings[ART_L_OcamlLexer_or] = "or";
		artKindOfs[ART_L_OcamlLexer_or] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_or_957] = "OcamlLexer.or ::= . `o`r";
		artLabelStrings[ART_L_OcamlLexer_or_957] = "";
		lhsL[ART_L_OcamlLexer_or_957] = ART_L_OcamlLexer_or;
		artKindOfs[ART_L_OcamlLexer_or_957] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_or_957] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_or_958] = "OcamlLexer.or ::= `o`r";
		artLabelStrings[ART_L_OcamlLexer_or_958] = "";
		lhsL[ART_L_OcamlLexer_or_958] = ART_L_OcamlLexer_or;
		popD[ART_L_OcamlLexer_or_958] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_or_959] = "OcamlLexer.or ::= `o. `r";
		artLabelStrings[ART_L_OcamlLexer_or_959] = "";
		lhsL[ART_L_OcamlLexer_or_959] = ART_L_OcamlLexer_or;
		artKindOfs[ART_L_OcamlLexer_or_959] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_or_959] = true;
		popD[ART_L_OcamlLexer_or_959] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_or_960] = "OcamlLexer.or ::= `o`r";
		artLabelStrings[ART_L_OcamlLexer_or_960] = "";
		lhsL[ART_L_OcamlLexer_or_960] = ART_L_OcamlLexer_or;
		popD[ART_L_OcamlLexer_or_960] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_or_961] = "OcamlLexer.or ::= `o`r. ";
		artLabelStrings[ART_L_OcamlLexer_or_961] = "";
		lhsL[ART_L_OcamlLexer_or_961] = ART_L_OcamlLexer_or;
		artKindOfs[ART_L_OcamlLexer_or_961] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_or_961] = true;
		eoR_pL[ART_L_OcamlLexer_or_961] = true;
		popD[ART_L_OcamlLexer_or_961] = true;
	}

	public void artTableInitialiser_203() {
		artLabelInternalStrings[ART_L_OcamlLexer_plus] = "OcamlLexer.plus ";
		artLabelStrings[ART_L_OcamlLexer_plus] = "plus";
		artKindOfs[ART_L_OcamlLexer_plus] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_plus_1168] = "OcamlLexer.plus ::= . `+";
		artLabelStrings[ART_L_OcamlLexer_plus_1168] = "";
		lhsL[ART_L_OcamlLexer_plus_1168] = ART_L_OcamlLexer_plus;
		artKindOfs[ART_L_OcamlLexer_plus_1168] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_plus_1168] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_plus_1169] = "OcamlLexer.plus ::= `+";
		artLabelStrings[ART_L_OcamlLexer_plus_1169] = "";
		lhsL[ART_L_OcamlLexer_plus_1169] = ART_L_OcamlLexer_plus;
		popD[ART_L_OcamlLexer_plus_1169] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_plus_1170] = "OcamlLexer.plus ::= `+. ";
		artLabelStrings[ART_L_OcamlLexer_plus_1170] = "";
		lhsL[ART_L_OcamlLexer_plus_1170] = ART_L_OcamlLexer_plus;
		artKindOfs[ART_L_OcamlLexer_plus_1170] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_plus_1170] = true;
		eoR_pL[ART_L_OcamlLexer_plus_1170] = true;
		popD[ART_L_OcamlLexer_plus_1170] = true;
	}

	public void artTableInitialiser_204() {
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol] = "OcamlLexer.prefix_symbol ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol] = "prefix_symbol";
		artKindOfs[ART_L_OcamlLexer_prefix_symbol] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5192] = "OcamlLexer.prefix_symbol ::= . `!( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5192] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5192] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5192] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5193] = "OcamlLexer.prefix_symbol ::= `!( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5193] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5193] = ART_L_OcamlLexer_prefix_symbol;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5194] = "OcamlLexer.prefix_symbol ::= `!. ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5194] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5194] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5194] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_prefix_symbol_5194] = true;
		lhsL[ART_C_OcamlLexer_prefix_symbol_5195] = ART_L_OcamlLexer_prefix_symbol;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5199] = "OcamlLexer.prefix_symbol ::= `!( OcamlLexer.operator_char . )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5199] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5199] = ART_L_OcamlLexer_prefix_symbol;
		artSlotInstanceOfs[ART_L_OcamlLexer_prefix_symbol_5199] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5199] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_prefix_symbol_5199] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5200] = "OcamlLexer.prefix_symbol ::= `!( OcamlLexer.operator_char )* . ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5200] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5200] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5200] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_prefix_symbol_5200] = true;
		eoR_pL[ART_L_OcamlLexer_prefix_symbol_5200] = true;
		popD[ART_L_OcamlLexer_prefix_symbol_5200] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5202] = "OcamlLexer.prefix_symbol ::= . ( `?| `~) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5202] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5202] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5202] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5204] = "OcamlLexer.prefix_symbol ::= ( `?| `~) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5204] = "";
		lhsL[ART_A_OcamlLexer_prefix_symbol_5204] = ART_L_OcamlLexer_prefix_symbol;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5206] = "OcamlLexer.prefix_symbol ::= ( . `?| `~) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5206] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5206] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5206] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_prefix_symbol_5206] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5207] = "OcamlLexer.prefix_symbol ::= ( `?| `~) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5207] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5207] = ART_L_OcamlLexer_prefix_symbol;
		popD[ART_L_OcamlLexer_prefix_symbol_5207] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5208] = "OcamlLexer.prefix_symbol ::= ( `?. | `~) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5208] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5208] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5208] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_prefix_symbol_5208] = ART_L_OcamlLexer_prefix_symbol_5213;
		aL[ART_L_OcamlLexer_prefix_symbol_5208] = ART_L_OcamlLexer_prefix_symbol_5212;
		eoOPL[ART_L_OcamlLexer_prefix_symbol_5208] = true;
		popD[ART_L_OcamlLexer_prefix_symbol_5208] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5210] = "OcamlLexer.prefix_symbol ::= ( `?| . `~) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5210] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5210] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5210] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_prefix_symbol_5210] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5211] = "OcamlLexer.prefix_symbol ::= ( `?| `~) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5211] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5211] = ART_L_OcamlLexer_prefix_symbol;
		popD[ART_L_OcamlLexer_prefix_symbol_5211] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5212] = "OcamlLexer.prefix_symbol ::= ( `?| `~. ) ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5212] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5212] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5212] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_prefix_symbol_5212] = ART_L_OcamlLexer_prefix_symbol_5213;
		eoOPL[ART_L_OcamlLexer_prefix_symbol_5212] = true;
		popD[ART_L_OcamlLexer_prefix_symbol_5212] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5213] = "OcamlLexer.prefix_symbol ::= ( `?| `~) . ( OcamlLexer.operator_char )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5213] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5213] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5213] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_prefix_symbol_5214] = ART_L_OcamlLexer_prefix_symbol;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5218] = "OcamlLexer.prefix_symbol ::= ( `?| `~) ( OcamlLexer.operator_char . )* ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5218] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5218] = ART_L_OcamlLexer_prefix_symbol;
		artSlotInstanceOfs[ART_L_OcamlLexer_prefix_symbol_5218] = ART_L_OcamlLexer_operator_char;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5218] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_prefix_symbol_5218] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_prefix_symbol_5219] = "OcamlLexer.prefix_symbol ::= ( `?| `~) ( OcamlLexer.operator_char )* . ";
		artLabelStrings[ART_L_OcamlLexer_prefix_symbol_5219] = "";
		lhsL[ART_L_OcamlLexer_prefix_symbol_5219] = ART_L_OcamlLexer_prefix_symbol;
		artKindOfs[ART_L_OcamlLexer_prefix_symbol_5219] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_prefix_symbol_5219] = true;
		eoR_pL[ART_L_OcamlLexer_prefix_symbol_5219] = true;
		popD[ART_L_OcamlLexer_prefix_symbol_5219] = true;
	}

	public void artTableInitialiser_205() {
		artLabelInternalStrings[ART_L_OcamlLexer_private] = "OcamlLexer.private ";
		artLabelStrings[ART_L_OcamlLexer_private] = "private";
		artKindOfs[ART_L_OcamlLexer_private] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_private_964] = "OcamlLexer.private ::= . `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_964] = "";
		lhsL[ART_L_OcamlLexer_private_964] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_964] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_private_964] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_965] = "OcamlLexer.private ::= `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_965] = "";
		lhsL[ART_L_OcamlLexer_private_965] = ART_L_OcamlLexer_private;
		popD[ART_L_OcamlLexer_private_965] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_966] = "OcamlLexer.private ::= `p. `r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_966] = "";
		lhsL[ART_L_OcamlLexer_private_966] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_966] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_private_966] = true;
		popD[ART_L_OcamlLexer_private_966] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_967] = "OcamlLexer.private ::= `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_967] = "";
		lhsL[ART_L_OcamlLexer_private_967] = ART_L_OcamlLexer_private;
		popD[ART_L_OcamlLexer_private_967] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_968] = "OcamlLexer.private ::= `p`r. `i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_968] = "";
		lhsL[ART_L_OcamlLexer_private_968] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_968] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_private_968] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_969] = "OcamlLexer.private ::= `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_969] = "";
		lhsL[ART_L_OcamlLexer_private_969] = ART_L_OcamlLexer_private;
		popD[ART_L_OcamlLexer_private_969] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_970] = "OcamlLexer.private ::= `p`r`i. `v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_970] = "";
		lhsL[ART_L_OcamlLexer_private_970] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_970] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_private_970] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_971] = "OcamlLexer.private ::= `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_971] = "";
		lhsL[ART_L_OcamlLexer_private_971] = ART_L_OcamlLexer_private;
		popD[ART_L_OcamlLexer_private_971] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_972] = "OcamlLexer.private ::= `p`r`i`v. `a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_972] = "";
		lhsL[ART_L_OcamlLexer_private_972] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_972] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_private_972] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_973] = "OcamlLexer.private ::= `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_973] = "";
		lhsL[ART_L_OcamlLexer_private_973] = ART_L_OcamlLexer_private;
		popD[ART_L_OcamlLexer_private_973] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_974] = "OcamlLexer.private ::= `p`r`i`v`a. `t`e";
		artLabelStrings[ART_L_OcamlLexer_private_974] = "";
		lhsL[ART_L_OcamlLexer_private_974] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_974] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_private_974] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_975] = "OcamlLexer.private ::= `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_975] = "";
		lhsL[ART_L_OcamlLexer_private_975] = ART_L_OcamlLexer_private;
		popD[ART_L_OcamlLexer_private_975] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_976] = "OcamlLexer.private ::= `p`r`i`v`a`t. `e";
		artLabelStrings[ART_L_OcamlLexer_private_976] = "";
		lhsL[ART_L_OcamlLexer_private_976] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_976] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_private_976] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_977] = "OcamlLexer.private ::= `p`r`i`v`a`t`e";
		artLabelStrings[ART_L_OcamlLexer_private_977] = "";
		lhsL[ART_L_OcamlLexer_private_977] = ART_L_OcamlLexer_private;
		popD[ART_L_OcamlLexer_private_977] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_private_978] = "OcamlLexer.private ::= `p`r`i`v`a`t`e. ";
		artLabelStrings[ART_L_OcamlLexer_private_978] = "";
		lhsL[ART_L_OcamlLexer_private_978] = ART_L_OcamlLexer_private;
		artKindOfs[ART_L_OcamlLexer_private_978] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_private_978] = true;
		eoR_pL[ART_L_OcamlLexer_private_978] = true;
		popD[ART_L_OcamlLexer_private_978] = true;
	}

	public void artTableInitialiser_206() {
		artLabelInternalStrings[ART_L_OcamlLexer_question] = "OcamlLexer.question ";
		artLabelStrings[ART_L_OcamlLexer_question] = "question";
		artKindOfs[ART_L_OcamlLexer_question] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_question_1283] = "OcamlLexer.question ::= . `?";
		artLabelStrings[ART_L_OcamlLexer_question_1283] = "";
		lhsL[ART_L_OcamlLexer_question_1283] = ART_L_OcamlLexer_question;
		artKindOfs[ART_L_OcamlLexer_question_1283] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_question_1283] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_question_1284] = "OcamlLexer.question ::= `?";
		artLabelStrings[ART_L_OcamlLexer_question_1284] = "";
		lhsL[ART_L_OcamlLexer_question_1284] = ART_L_OcamlLexer_question;
		popD[ART_L_OcamlLexer_question_1284] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_question_1285] = "OcamlLexer.question ::= `?. ";
		artLabelStrings[ART_L_OcamlLexer_question_1285] = "";
		lhsL[ART_L_OcamlLexer_question_1285] = ART_L_OcamlLexer_question;
		artKindOfs[ART_L_OcamlLexer_question_1285] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_question_1285] = true;
		eoR_pL[ART_L_OcamlLexer_question_1285] = true;
		popD[ART_L_OcamlLexer_question_1285] = true;
	}

	public void artTableInitialiser_207() {
		artLabelInternalStrings[ART_L_OcamlLexer_rbrace] = "OcamlLexer.rbrace ";
		artLabelStrings[ART_L_OcamlLexer_rbrace] = "rbrace";
		artKindOfs[ART_L_OcamlLexer_rbrace] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_rbrace_1360] = "OcamlLexer.rbrace ::= . `}";
		artLabelStrings[ART_L_OcamlLexer_rbrace_1360] = "";
		lhsL[ART_L_OcamlLexer_rbrace_1360] = ART_L_OcamlLexer_rbrace;
		artKindOfs[ART_L_OcamlLexer_rbrace_1360] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_rbrace_1360] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rbrace_1361] = "OcamlLexer.rbrace ::= `}";
		artLabelStrings[ART_L_OcamlLexer_rbrace_1361] = "";
		lhsL[ART_L_OcamlLexer_rbrace_1361] = ART_L_OcamlLexer_rbrace;
		popD[ART_L_OcamlLexer_rbrace_1361] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rbrace_1362] = "OcamlLexer.rbrace ::= `}. ";
		artLabelStrings[ART_L_OcamlLexer_rbrace_1362] = "";
		lhsL[ART_L_OcamlLexer_rbrace_1362] = ART_L_OcamlLexer_rbrace;
		artKindOfs[ART_L_OcamlLexer_rbrace_1362] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_rbrace_1362] = true;
		eoR_pL[ART_L_OcamlLexer_rbrace_1362] = true;
		popD[ART_L_OcamlLexer_rbrace_1362] = true;
	}

	public void artTableInitialiser_208() {
		artLabelInternalStrings[ART_L_OcamlLexer_rbracket] = "OcamlLexer.rbracket ";
		artLabelStrings[ART_L_OcamlLexer_rbracket] = "rbracket";
		artKindOfs[ART_L_OcamlLexer_rbracket] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_rbracket_1314] = "OcamlLexer.rbracket ::= . `]";
		artLabelStrings[ART_L_OcamlLexer_rbracket_1314] = "";
		lhsL[ART_L_OcamlLexer_rbracket_1314] = ART_L_OcamlLexer_rbracket;
		artKindOfs[ART_L_OcamlLexer_rbracket_1314] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_rbracket_1314] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rbracket_1315] = "OcamlLexer.rbracket ::= `]";
		artLabelStrings[ART_L_OcamlLexer_rbracket_1315] = "";
		lhsL[ART_L_OcamlLexer_rbracket_1315] = ART_L_OcamlLexer_rbracket;
		popD[ART_L_OcamlLexer_rbracket_1315] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rbracket_1316] = "OcamlLexer.rbracket ::= `]. ";
		artLabelStrings[ART_L_OcamlLexer_rbracket_1316] = "";
		lhsL[ART_L_OcamlLexer_rbracket_1316] = ART_L_OcamlLexer_rbracket;
		artKindOfs[ART_L_OcamlLexer_rbracket_1316] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_rbracket_1316] = true;
		eoR_pL[ART_L_OcamlLexer_rbracket_1316] = true;
		popD[ART_L_OcamlLexer_rbracket_1316] = true;
	}

	public void artTableInitialiser_209() {
		artLabelInternalStrings[ART_L_OcamlLexer_rec] = "OcamlLexer.rec ";
		artLabelStrings[ART_L_OcamlLexer_rec] = "rec";
		artKindOfs[ART_L_OcamlLexer_rec] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_rec_981] = "OcamlLexer.rec ::= . `r`e`c";
		artLabelStrings[ART_L_OcamlLexer_rec_981] = "";
		lhsL[ART_L_OcamlLexer_rec_981] = ART_L_OcamlLexer_rec;
		artKindOfs[ART_L_OcamlLexer_rec_981] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_rec_981] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rec_982] = "OcamlLexer.rec ::= `r`e`c";
		artLabelStrings[ART_L_OcamlLexer_rec_982] = "";
		lhsL[ART_L_OcamlLexer_rec_982] = ART_L_OcamlLexer_rec;
		popD[ART_L_OcamlLexer_rec_982] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rec_983] = "OcamlLexer.rec ::= `r. `e`c";
		artLabelStrings[ART_L_OcamlLexer_rec_983] = "";
		lhsL[ART_L_OcamlLexer_rec_983] = ART_L_OcamlLexer_rec;
		artKindOfs[ART_L_OcamlLexer_rec_983] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_rec_983] = true;
		popD[ART_L_OcamlLexer_rec_983] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rec_984] = "OcamlLexer.rec ::= `r`e`c";
		artLabelStrings[ART_L_OcamlLexer_rec_984] = "";
		lhsL[ART_L_OcamlLexer_rec_984] = ART_L_OcamlLexer_rec;
		popD[ART_L_OcamlLexer_rec_984] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rec_985] = "OcamlLexer.rec ::= `r`e. `c";
		artLabelStrings[ART_L_OcamlLexer_rec_985] = "";
		lhsL[ART_L_OcamlLexer_rec_985] = ART_L_OcamlLexer_rec;
		artKindOfs[ART_L_OcamlLexer_rec_985] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_rec_985] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rec_986] = "OcamlLexer.rec ::= `r`e`c";
		artLabelStrings[ART_L_OcamlLexer_rec_986] = "";
		lhsL[ART_L_OcamlLexer_rec_986] = ART_L_OcamlLexer_rec;
		popD[ART_L_OcamlLexer_rec_986] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rec_987] = "OcamlLexer.rec ::= `r`e`c. ";
		artLabelStrings[ART_L_OcamlLexer_rec_987] = "";
		lhsL[ART_L_OcamlLexer_rec_987] = ART_L_OcamlLexer_rec;
		artKindOfs[ART_L_OcamlLexer_rec_987] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_rec_987] = true;
		eoR_pL[ART_L_OcamlLexer_rec_987] = true;
		popD[ART_L_OcamlLexer_rec_987] = true;
	}

	public void artTableInitialiser_210() {
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char] = "OcamlLexer.regular_char ";
		artLabelStrings[ART_L_OcamlLexer_regular_char] = "regular_char";
		artKindOfs[ART_L_OcamlLexer_regular_char] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4212] = "OcamlLexer.regular_char ::= . `";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4212] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4212] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4212] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4212] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4213] = "OcamlLexer.regular_char ::= `";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4213] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4213] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4213] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4214] = "OcamlLexer.regular_char ::= `. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4214] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4214] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4214] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4214] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4214] = true;
		popD[ART_L_OcamlLexer_regular_char_4214] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4216] = "OcamlLexer.regular_char ::= . `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4216] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4216] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4216] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4216] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4217] = "OcamlLexer.regular_char ::= `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4217] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4217] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4217] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4218] = "OcamlLexer.regular_char ::= `\\\\007. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4218] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4218] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4218] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4218] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4218] = true;
		popD[ART_L_OcamlLexer_regular_char_4218] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4220] = "OcamlLexer.regular_char ::= . `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4220] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4220] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4220] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4220] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4221] = "OcamlLexer.regular_char ::= `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4221] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4221] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4221] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4222] = "OcamlLexer.regular_char ::= `\\\\010. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4222] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4222] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4222] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4222] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4222] = true;
		popD[ART_L_OcamlLexer_regular_char_4222] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4224] = "OcamlLexer.regular_char ::= . `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4224] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4224] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4224] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4224] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4225] = "OcamlLexer.regular_char ::= `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4225] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4225] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4225] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4226] = "OcamlLexer.regular_char ::= `\\\\t. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4226] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4226] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4226] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4226] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4226] = true;
		popD[ART_L_OcamlLexer_regular_char_4226] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4228] = "OcamlLexer.regular_char ::= . `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4228] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4228] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4228] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4228] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4229] = "OcamlLexer.regular_char ::= `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4229] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4229] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4229] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4230] = "OcamlLexer.regular_char ::= `\\\\013. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4230] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4230] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4230] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4230] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4230] = true;
		popD[ART_L_OcamlLexer_regular_char_4230] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4232] = "OcamlLexer.regular_char ::= . `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4232] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4232] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4232] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4232] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4233] = "OcamlLexer.regular_char ::= `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4233] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4233] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4233] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4234] = "OcamlLexer.regular_char ::= `\\\\014. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4234] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4234] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4234] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4234] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4234] = true;
		popD[ART_L_OcamlLexer_regular_char_4234] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4236] = "OcamlLexer.regular_char ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4236] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4236] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4236] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4236] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4237] = "OcamlLexer.regular_char ::= `e";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4237] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4237] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4237] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4238] = "OcamlLexer.regular_char ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4238] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4238] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4238] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4238] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4238] = true;
		popD[ART_L_OcamlLexer_regular_char_4238] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4240] = "OcamlLexer.regular_char ::= . ` ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4240] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4240] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4240] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4240] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4241] = "OcamlLexer.regular_char ::= ` ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4241] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4241] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4241] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4242] = "OcamlLexer.regular_char ::= ` . ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4242] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4242] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4242] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4242] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4242] = true;
		popD[ART_L_OcamlLexer_regular_char_4242] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4244] = "OcamlLexer.regular_char ::= . `!";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4244] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4244] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4244] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4244] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4245] = "OcamlLexer.regular_char ::= `!";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4245] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4245] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4245] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4246] = "OcamlLexer.regular_char ::= `!. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4246] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4246] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4246] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4246] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4246] = true;
		popD[ART_L_OcamlLexer_regular_char_4246] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4248] = "OcamlLexer.regular_char ::= . `\\\"";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4248] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4248] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4248] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4248] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4249] = "OcamlLexer.regular_char ::= `\\\"";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4249] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4249] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4249] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4250] = "OcamlLexer.regular_char ::= `\\\". ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4250] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4250] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4250] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4250] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4250] = true;
		popD[ART_L_OcamlLexer_regular_char_4250] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4252] = "OcamlLexer.regular_char ::= . `#";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4252] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4252] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4252] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4252] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4253] = "OcamlLexer.regular_char ::= `#";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4253] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4253] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4253] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4254] = "OcamlLexer.regular_char ::= `#. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4254] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4254] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4254] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4254] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4254] = true;
		popD[ART_L_OcamlLexer_regular_char_4254] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4256] = "OcamlLexer.regular_char ::= . `$";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4256] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4256] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4256] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4256] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4257] = "OcamlLexer.regular_char ::= `$";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4257] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4257] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4257] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4258] = "OcamlLexer.regular_char ::= `$. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4258] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4258] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4258] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4258] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4258] = true;
		popD[ART_L_OcamlLexer_regular_char_4258] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4260] = "OcamlLexer.regular_char ::= . `%";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4260] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4260] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4260] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4260] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4261] = "OcamlLexer.regular_char ::= `%";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4261] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4261] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4261] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4262] = "OcamlLexer.regular_char ::= `%. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4262] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4262] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4262] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4262] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4262] = true;
		popD[ART_L_OcamlLexer_regular_char_4262] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4264] = "OcamlLexer.regular_char ::= . `&";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4264] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4264] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4264] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4264] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4265] = "OcamlLexer.regular_char ::= `&";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4265] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4265] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4265] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4266] = "OcamlLexer.regular_char ::= `&. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4266] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4266] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4266] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4266] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4266] = true;
		popD[ART_L_OcamlLexer_regular_char_4266] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4268] = "OcamlLexer.regular_char ::= . `(";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4268] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4268] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4268] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4268] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4269] = "OcamlLexer.regular_char ::= `(";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4269] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4269] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4269] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4270] = "OcamlLexer.regular_char ::= `(. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4270] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4270] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4270] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4270] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4270] = true;
		popD[ART_L_OcamlLexer_regular_char_4270] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4272] = "OcamlLexer.regular_char ::= . `)";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4272] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4272] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4272] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4272] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4273] = "OcamlLexer.regular_char ::= `)";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4273] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4273] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4273] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4274] = "OcamlLexer.regular_char ::= `). ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4274] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4274] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4274] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4274] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4274] = true;
		popD[ART_L_OcamlLexer_regular_char_4274] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4276] = "OcamlLexer.regular_char ::= . `*";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4276] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4276] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4276] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4276] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4277] = "OcamlLexer.regular_char ::= `*";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4277] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4277] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4277] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4278] = "OcamlLexer.regular_char ::= `*. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4278] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4278] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4278] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4278] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4278] = true;
		popD[ART_L_OcamlLexer_regular_char_4278] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4280] = "OcamlLexer.regular_char ::= . `+";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4280] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4280] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4280] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4280] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4281] = "OcamlLexer.regular_char ::= `+";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4281] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4281] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4281] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4282] = "OcamlLexer.regular_char ::= `+. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4282] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4282] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4282] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4282] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4282] = true;
		popD[ART_L_OcamlLexer_regular_char_4282] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4284] = "OcamlLexer.regular_char ::= . `,";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4284] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4284] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4284] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4284] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4285] = "OcamlLexer.regular_char ::= `,";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4285] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4285] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4285] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4286] = "OcamlLexer.regular_char ::= `,. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4286] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4286] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4286] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4286] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4286] = true;
		popD[ART_L_OcamlLexer_regular_char_4286] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4288] = "OcamlLexer.regular_char ::= . `-";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4288] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4288] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4288] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4288] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4289] = "OcamlLexer.regular_char ::= `-";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4289] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4289] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4289] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4290] = "OcamlLexer.regular_char ::= `-. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4290] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4290] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4290] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4290] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4290] = true;
		popD[ART_L_OcamlLexer_regular_char_4290] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4292] = "OcamlLexer.regular_char ::= . `.";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4292] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4292] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4292] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4292] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4293] = "OcamlLexer.regular_char ::= `.";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4293] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4293] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4293] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4294] = "OcamlLexer.regular_char ::= `.. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4294] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4294] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4294] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4294] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4294] = true;
		popD[ART_L_OcamlLexer_regular_char_4294] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4296] = "OcamlLexer.regular_char ::= . `/";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4296] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4296] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4296] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4296] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4297] = "OcamlLexer.regular_char ::= `/";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4297] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4297] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4297] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4298] = "OcamlLexer.regular_char ::= `/. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4298] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4298] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4298] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4298] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4298] = true;
		popD[ART_L_OcamlLexer_regular_char_4298] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4300] = "OcamlLexer.regular_char ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4300] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4300] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4300] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4300] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4301] = "OcamlLexer.regular_char ::= `0";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4301] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4301] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4301] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4302] = "OcamlLexer.regular_char ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4302] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4302] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4302] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4302] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4302] = true;
		popD[ART_L_OcamlLexer_regular_char_4302] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4304] = "OcamlLexer.regular_char ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4304] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4304] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4304] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4304] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4305] = "OcamlLexer.regular_char ::= `1";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4305] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4305] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4305] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4306] = "OcamlLexer.regular_char ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4306] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4306] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4306] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4306] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4306] = true;
		popD[ART_L_OcamlLexer_regular_char_4306] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4308] = "OcamlLexer.regular_char ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4308] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4308] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4308] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4308] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4309] = "OcamlLexer.regular_char ::= `2";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4309] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4309] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4309] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4310] = "OcamlLexer.regular_char ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4310] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4310] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4310] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4310] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4310] = true;
		popD[ART_L_OcamlLexer_regular_char_4310] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4312] = "OcamlLexer.regular_char ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4312] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4312] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4312] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4312] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4313] = "OcamlLexer.regular_char ::= `3";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4313] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4313] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4313] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4314] = "OcamlLexer.regular_char ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4314] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4314] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4314] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4314] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4314] = true;
		popD[ART_L_OcamlLexer_regular_char_4314] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4316] = "OcamlLexer.regular_char ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4316] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4316] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4316] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4316] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4317] = "OcamlLexer.regular_char ::= `4";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4317] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4317] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4317] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4318] = "OcamlLexer.regular_char ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4318] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4318] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4318] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4318] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4318] = true;
		popD[ART_L_OcamlLexer_regular_char_4318] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4320] = "OcamlLexer.regular_char ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4320] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4320] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4320] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4320] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4321] = "OcamlLexer.regular_char ::= `5";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4321] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4321] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4321] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4322] = "OcamlLexer.regular_char ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4322] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4322] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4322] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4322] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4322] = true;
		popD[ART_L_OcamlLexer_regular_char_4322] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4324] = "OcamlLexer.regular_char ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4324] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4324] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4324] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4324] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4325] = "OcamlLexer.regular_char ::= `6";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4325] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4325] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4325] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4326] = "OcamlLexer.regular_char ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4326] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4326] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4326] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4326] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4326] = true;
		popD[ART_L_OcamlLexer_regular_char_4326] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4328] = "OcamlLexer.regular_char ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4328] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4328] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4328] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4328] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4329] = "OcamlLexer.regular_char ::= `7";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4329] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4329] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4329] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4330] = "OcamlLexer.regular_char ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4330] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4330] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4330] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4330] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4330] = true;
		popD[ART_L_OcamlLexer_regular_char_4330] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4332] = "OcamlLexer.regular_char ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4332] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4332] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4332] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4332] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4333] = "OcamlLexer.regular_char ::= `8";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4333] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4333] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4333] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4334] = "OcamlLexer.regular_char ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4334] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4334] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4334] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4334] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4334] = true;
		popD[ART_L_OcamlLexer_regular_char_4334] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4336] = "OcamlLexer.regular_char ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4336] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4336] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4336] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4336] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4337] = "OcamlLexer.regular_char ::= `9";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4337] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4337] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4337] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4338] = "OcamlLexer.regular_char ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4338] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4338] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4338] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4338] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4338] = true;
		popD[ART_L_OcamlLexer_regular_char_4338] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4340] = "OcamlLexer.regular_char ::= . `:";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4340] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4340] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4340] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4340] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4341] = "OcamlLexer.regular_char ::= `:";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4341] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4341] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4341] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4342] = "OcamlLexer.regular_char ::= `:. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4342] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4342] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4342] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4342] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4342] = true;
		popD[ART_L_OcamlLexer_regular_char_4342] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4344] = "OcamlLexer.regular_char ::= . `;";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4344] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4344] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4344] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4344] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4345] = "OcamlLexer.regular_char ::= `;";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4345] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4345] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4345] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4346] = "OcamlLexer.regular_char ::= `;. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4346] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4346] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4346] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4346] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4346] = true;
		popD[ART_L_OcamlLexer_regular_char_4346] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4348] = "OcamlLexer.regular_char ::= . `<";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4348] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4348] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4348] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4348] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4349] = "OcamlLexer.regular_char ::= `<";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4349] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4349] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4349] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4350] = "OcamlLexer.regular_char ::= `<. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4350] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4350] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4350] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4350] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4350] = true;
		popD[ART_L_OcamlLexer_regular_char_4350] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4352] = "OcamlLexer.regular_char ::= . `=";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4352] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4352] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4352] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4352] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4353] = "OcamlLexer.regular_char ::= `=";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4353] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4353] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4353] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4354] = "OcamlLexer.regular_char ::= `=. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4354] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4354] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4354] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4354] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4354] = true;
		popD[ART_L_OcamlLexer_regular_char_4354] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4356] = "OcamlLexer.regular_char ::= . `>";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4356] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4356] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4356] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4356] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4357] = "OcamlLexer.regular_char ::= `>";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4357] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4357] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4357] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4358] = "OcamlLexer.regular_char ::= `>. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4358] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4358] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4358] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4358] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4358] = true;
		popD[ART_L_OcamlLexer_regular_char_4358] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4360] = "OcamlLexer.regular_char ::= . `?";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4360] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4360] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4360] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4360] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4361] = "OcamlLexer.regular_char ::= `?";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4361] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4361] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4361] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4362] = "OcamlLexer.regular_char ::= `?. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4362] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4362] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4362] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4362] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4362] = true;
		popD[ART_L_OcamlLexer_regular_char_4362] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4364] = "OcamlLexer.regular_char ::= . `@";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4364] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4364] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4364] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4364] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4365] = "OcamlLexer.regular_char ::= `@";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4365] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4365] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4365] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4366] = "OcamlLexer.regular_char ::= `@. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4366] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4366] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4366] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4366] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4366] = true;
		popD[ART_L_OcamlLexer_regular_char_4366] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4368] = "OcamlLexer.regular_char ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4368] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4368] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4368] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4368] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4369] = "OcamlLexer.regular_char ::= `A";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4369] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4369] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4369] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4370] = "OcamlLexer.regular_char ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4370] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4370] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4370] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4370] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4370] = true;
		popD[ART_L_OcamlLexer_regular_char_4370] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4372] = "OcamlLexer.regular_char ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4372] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4372] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4372] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4372] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4373] = "OcamlLexer.regular_char ::= `B";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4373] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4373] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4373] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4374] = "OcamlLexer.regular_char ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4374] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4374] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4374] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4374] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4374] = true;
		popD[ART_L_OcamlLexer_regular_char_4374] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4376] = "OcamlLexer.regular_char ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4376] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4376] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4376] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4376] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4377] = "OcamlLexer.regular_char ::= `C";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4377] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4377] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4377] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4378] = "OcamlLexer.regular_char ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4378] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4378] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4378] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4378] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4378] = true;
		popD[ART_L_OcamlLexer_regular_char_4378] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4380] = "OcamlLexer.regular_char ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4380] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4380] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4380] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4380] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4381] = "OcamlLexer.regular_char ::= `D";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4381] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4381] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4381] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4382] = "OcamlLexer.regular_char ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4382] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4382] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4382] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4382] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4382] = true;
		popD[ART_L_OcamlLexer_regular_char_4382] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4384] = "OcamlLexer.regular_char ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4384] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4384] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4384] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4384] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4385] = "OcamlLexer.regular_char ::= `E";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4385] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4385] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4385] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4386] = "OcamlLexer.regular_char ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4386] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4386] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4386] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4386] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4386] = true;
		popD[ART_L_OcamlLexer_regular_char_4386] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4388] = "OcamlLexer.regular_char ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4388] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4388] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4388] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4388] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4389] = "OcamlLexer.regular_char ::= `F";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4389] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4389] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4389] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4390] = "OcamlLexer.regular_char ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4390] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4390] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4390] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4390] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4390] = true;
		popD[ART_L_OcamlLexer_regular_char_4390] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4392] = "OcamlLexer.regular_char ::= . `G";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4392] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4392] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4392] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4392] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4393] = "OcamlLexer.regular_char ::= `G";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4393] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4393] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4393] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4394] = "OcamlLexer.regular_char ::= `G. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4394] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4394] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4394] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4394] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4394] = true;
		popD[ART_L_OcamlLexer_regular_char_4394] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4396] = "OcamlLexer.regular_char ::= . `H";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4396] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4396] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4396] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4396] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4397] = "OcamlLexer.regular_char ::= `H";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4397] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4397] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4397] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4398] = "OcamlLexer.regular_char ::= `H. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4398] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4398] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4398] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4398] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4398] = true;
		popD[ART_L_OcamlLexer_regular_char_4398] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4400] = "OcamlLexer.regular_char ::= . `I";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4400] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4400] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4400] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4400] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4401] = "OcamlLexer.regular_char ::= `I";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4401] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4401] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4401] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4402] = "OcamlLexer.regular_char ::= `I. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4402] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4402] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4402] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4402] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4402] = true;
		popD[ART_L_OcamlLexer_regular_char_4402] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4404] = "OcamlLexer.regular_char ::= . `J";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4404] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4404] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4404] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4404] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4405] = "OcamlLexer.regular_char ::= `J";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4405] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4405] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4405] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4406] = "OcamlLexer.regular_char ::= `J. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4406] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4406] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4406] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4406] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4406] = true;
		popD[ART_L_OcamlLexer_regular_char_4406] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4408] = "OcamlLexer.regular_char ::= . `K";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4408] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4408] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4408] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4408] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4409] = "OcamlLexer.regular_char ::= `K";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4409] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4409] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4409] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4410] = "OcamlLexer.regular_char ::= `K. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4410] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4410] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4410] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4410] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4410] = true;
		popD[ART_L_OcamlLexer_regular_char_4410] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4412] = "OcamlLexer.regular_char ::= . `L";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4412] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4412] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4412] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4412] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4413] = "OcamlLexer.regular_char ::= `L";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4413] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4413] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4413] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4414] = "OcamlLexer.regular_char ::= `L. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4414] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4414] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4414] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4414] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4414] = true;
		popD[ART_L_OcamlLexer_regular_char_4414] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4416] = "OcamlLexer.regular_char ::= . `M";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4416] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4416] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4416] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4416] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4417] = "OcamlLexer.regular_char ::= `M";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4417] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4417] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4417] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4418] = "OcamlLexer.regular_char ::= `M. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4418] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4418] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4418] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4418] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4418] = true;
		popD[ART_L_OcamlLexer_regular_char_4418] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4420] = "OcamlLexer.regular_char ::= . `N";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4420] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4420] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4420] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4420] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4421] = "OcamlLexer.regular_char ::= `N";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4421] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4421] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4421] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4422] = "OcamlLexer.regular_char ::= `N. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4422] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4422] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4422] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4422] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4422] = true;
		popD[ART_L_OcamlLexer_regular_char_4422] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4424] = "OcamlLexer.regular_char ::= . `O";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4424] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4424] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4424] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4424] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4425] = "OcamlLexer.regular_char ::= `O";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4425] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4425] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4425] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4426] = "OcamlLexer.regular_char ::= `O. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4426] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4426] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4426] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4426] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4426] = true;
		popD[ART_L_OcamlLexer_regular_char_4426] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4428] = "OcamlLexer.regular_char ::= . `P";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4428] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4428] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4428] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4428] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4429] = "OcamlLexer.regular_char ::= `P";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4429] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4429] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4429] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4430] = "OcamlLexer.regular_char ::= `P. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4430] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4430] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4430] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4430] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4430] = true;
		popD[ART_L_OcamlLexer_regular_char_4430] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4432] = "OcamlLexer.regular_char ::= . `Q";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4432] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4432] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4432] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4432] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4433] = "OcamlLexer.regular_char ::= `Q";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4433] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4433] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4433] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4434] = "OcamlLexer.regular_char ::= `Q. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4434] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4434] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4434] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4434] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4434] = true;
		popD[ART_L_OcamlLexer_regular_char_4434] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4436] = "OcamlLexer.regular_char ::= . `R";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4436] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4436] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4436] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4436] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4437] = "OcamlLexer.regular_char ::= `R";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4437] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4437] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4437] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4438] = "OcamlLexer.regular_char ::= `R. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4438] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4438] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4438] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4438] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4438] = true;
		popD[ART_L_OcamlLexer_regular_char_4438] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4440] = "OcamlLexer.regular_char ::= . `S";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4440] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4440] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4440] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4440] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4441] = "OcamlLexer.regular_char ::= `S";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4441] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4441] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4441] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4442] = "OcamlLexer.regular_char ::= `S. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4442] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4442] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4442] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4442] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4442] = true;
		popD[ART_L_OcamlLexer_regular_char_4442] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4444] = "OcamlLexer.regular_char ::= . `T";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4444] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4444] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4444] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4444] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4445] = "OcamlLexer.regular_char ::= `T";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4445] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4445] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4445] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4446] = "OcamlLexer.regular_char ::= `T. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4446] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4446] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4446] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4446] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4446] = true;
		popD[ART_L_OcamlLexer_regular_char_4446] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4448] = "OcamlLexer.regular_char ::= . `U";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4448] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4448] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4448] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4448] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4449] = "OcamlLexer.regular_char ::= `U";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4449] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4449] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4449] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4450] = "OcamlLexer.regular_char ::= `U. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4450] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4450] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4450] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4450] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4450] = true;
		popD[ART_L_OcamlLexer_regular_char_4450] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4452] = "OcamlLexer.regular_char ::= . `V";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4452] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4452] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4452] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4452] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4453] = "OcamlLexer.regular_char ::= `V";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4453] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4453] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4453] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4454] = "OcamlLexer.regular_char ::= `V. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4454] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4454] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4454] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4454] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4454] = true;
		popD[ART_L_OcamlLexer_regular_char_4454] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4456] = "OcamlLexer.regular_char ::= . `W";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4456] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4456] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4456] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4456] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4457] = "OcamlLexer.regular_char ::= `W";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4457] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4457] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4457] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4458] = "OcamlLexer.regular_char ::= `W. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4458] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4458] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4458] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4458] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4458] = true;
		popD[ART_L_OcamlLexer_regular_char_4458] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4460] = "OcamlLexer.regular_char ::= . `X";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4460] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4460] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4460] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4460] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4461] = "OcamlLexer.regular_char ::= `X";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4461] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4461] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4461] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4462] = "OcamlLexer.regular_char ::= `X. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4462] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4462] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4462] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4462] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4462] = true;
		popD[ART_L_OcamlLexer_regular_char_4462] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4464] = "OcamlLexer.regular_char ::= . `Y";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4464] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4464] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4464] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4464] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4465] = "OcamlLexer.regular_char ::= `Y";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4465] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4465] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4465] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4466] = "OcamlLexer.regular_char ::= `Y. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4466] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4466] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4466] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4466] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4466] = true;
		popD[ART_L_OcamlLexer_regular_char_4466] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4468] = "OcamlLexer.regular_char ::= . `Z";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4468] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4468] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4468] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4468] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4469] = "OcamlLexer.regular_char ::= `Z";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4469] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4469] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4469] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4470] = "OcamlLexer.regular_char ::= `Z. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4470] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4470] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4470] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4470] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4470] = true;
		popD[ART_L_OcamlLexer_regular_char_4470] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4472] = "OcamlLexer.regular_char ::= . `[";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4472] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4472] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4472] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4472] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4473] = "OcamlLexer.regular_char ::= `[";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4473] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4473] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4473] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4474] = "OcamlLexer.regular_char ::= `[. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4474] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4474] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4474] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4474] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4474] = true;
		popD[ART_L_OcamlLexer_regular_char_4474] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4476] = "OcamlLexer.regular_char ::= . `]";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4476] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4476] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4476] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4476] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4477] = "OcamlLexer.regular_char ::= `]";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4477] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4477] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4477] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4478] = "OcamlLexer.regular_char ::= `]. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4478] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4478] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4478] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4478] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4478] = true;
		popD[ART_L_OcamlLexer_regular_char_4478] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4480] = "OcamlLexer.regular_char ::= . `^";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4480] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4480] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4480] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4480] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4481] = "OcamlLexer.regular_char ::= `^";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4481] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4481] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4481] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4482] = "OcamlLexer.regular_char ::= `^. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4482] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4482] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4482] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4482] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4482] = true;
		popD[ART_L_OcamlLexer_regular_char_4482] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4484] = "OcamlLexer.regular_char ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4484] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4484] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4484] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4484] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4485] = "OcamlLexer.regular_char ::= `_";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4485] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4485] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4485] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4486] = "OcamlLexer.regular_char ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4486] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4486] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4486] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4486] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4486] = true;
		popD[ART_L_OcamlLexer_regular_char_4486] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4488] = "OcamlLexer.regular_char ::= . `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4488] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4488] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4488] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4488] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4489] = "OcamlLexer.regular_char ::= `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4489] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4489] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4489] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4490] = "OcamlLexer.regular_char ::= `\\\\`. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4490] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4490] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4490] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4490] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4490] = true;
		popD[ART_L_OcamlLexer_regular_char_4490] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4492] = "OcamlLexer.regular_char ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4492] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4492] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4492] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4492] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4493] = "OcamlLexer.regular_char ::= `a";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4493] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4493] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4493] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4494] = "OcamlLexer.regular_char ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4494] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4494] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4494] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4494] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4494] = true;
		popD[ART_L_OcamlLexer_regular_char_4494] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4496] = "OcamlLexer.regular_char ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4496] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4496] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4496] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4496] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4497] = "OcamlLexer.regular_char ::= `b";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4497] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4497] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4497] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4498] = "OcamlLexer.regular_char ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4498] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4498] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4498] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4498] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4498] = true;
		popD[ART_L_OcamlLexer_regular_char_4498] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4500] = "OcamlLexer.regular_char ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4500] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4500] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4500] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4500] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4501] = "OcamlLexer.regular_char ::= `c";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4501] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4501] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4501] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4502] = "OcamlLexer.regular_char ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4502] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4502] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4502] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4502] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4502] = true;
		popD[ART_L_OcamlLexer_regular_char_4502] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4504] = "OcamlLexer.regular_char ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4504] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4504] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4504] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4504] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4505] = "OcamlLexer.regular_char ::= `d";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4505] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4505] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4505] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4506] = "OcamlLexer.regular_char ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4506] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4506] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4506] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4506] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4506] = true;
		popD[ART_L_OcamlLexer_regular_char_4506] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4508] = "OcamlLexer.regular_char ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4508] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4508] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4508] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4508] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4509] = "OcamlLexer.regular_char ::= `f";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4509] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4509] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4509] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4510] = "OcamlLexer.regular_char ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4510] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4510] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4510] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4510] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4510] = true;
		popD[ART_L_OcamlLexer_regular_char_4510] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4512] = "OcamlLexer.regular_char ::= . `g";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4512] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4512] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4512] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4512] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4513] = "OcamlLexer.regular_char ::= `g";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4513] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4513] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4513] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4514] = "OcamlLexer.regular_char ::= `g. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4514] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4514] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4514] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4514] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4514] = true;
		popD[ART_L_OcamlLexer_regular_char_4514] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4516] = "OcamlLexer.regular_char ::= . `h";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4516] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4516] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4516] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4516] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4517] = "OcamlLexer.regular_char ::= `h";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4517] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4517] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4517] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4518] = "OcamlLexer.regular_char ::= `h. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4518] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4518] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4518] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4518] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4518] = true;
		popD[ART_L_OcamlLexer_regular_char_4518] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4520] = "OcamlLexer.regular_char ::= . `i";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4520] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4520] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4520] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4520] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4521] = "OcamlLexer.regular_char ::= `i";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4521] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4521] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4521] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4522] = "OcamlLexer.regular_char ::= `i. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4522] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4522] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4522] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4522] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4522] = true;
		popD[ART_L_OcamlLexer_regular_char_4522] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4524] = "OcamlLexer.regular_char ::= . `j";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4524] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4524] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4524] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4524] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4525] = "OcamlLexer.regular_char ::= `j";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4525] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4525] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4525] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4526] = "OcamlLexer.regular_char ::= `j. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4526] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4526] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4526] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4526] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4526] = true;
		popD[ART_L_OcamlLexer_regular_char_4526] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4528] = "OcamlLexer.regular_char ::= . `k";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4528] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4528] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4528] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4528] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4529] = "OcamlLexer.regular_char ::= `k";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4529] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4529] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4529] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4530] = "OcamlLexer.regular_char ::= `k. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4530] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4530] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4530] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4530] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4530] = true;
		popD[ART_L_OcamlLexer_regular_char_4530] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4532] = "OcamlLexer.regular_char ::= . `l";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4532] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4532] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4532] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4532] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4533] = "OcamlLexer.regular_char ::= `l";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4533] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4533] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4533] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4534] = "OcamlLexer.regular_char ::= `l. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4534] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4534] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4534] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4534] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4534] = true;
		popD[ART_L_OcamlLexer_regular_char_4534] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4536] = "OcamlLexer.regular_char ::= . `m";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4536] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4536] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4536] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4536] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4537] = "OcamlLexer.regular_char ::= `m";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4537] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4537] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4537] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4538] = "OcamlLexer.regular_char ::= `m. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4538] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4538] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4538] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4538] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4538] = true;
		popD[ART_L_OcamlLexer_regular_char_4538] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4540] = "OcamlLexer.regular_char ::= . `n";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4540] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4540] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4540] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4540] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4541] = "OcamlLexer.regular_char ::= `n";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4541] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4541] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4541] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4542] = "OcamlLexer.regular_char ::= `n. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4542] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4542] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4542] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4542] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4542] = true;
		popD[ART_L_OcamlLexer_regular_char_4542] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4544] = "OcamlLexer.regular_char ::= . `o";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4544] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4544] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4544] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4544] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4545] = "OcamlLexer.regular_char ::= `o";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4545] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4545] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4545] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4546] = "OcamlLexer.regular_char ::= `o. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4546] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4546] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4546] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4546] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4546] = true;
		popD[ART_L_OcamlLexer_regular_char_4546] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4548] = "OcamlLexer.regular_char ::= . `p";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4548] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4548] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4548] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4548] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4549] = "OcamlLexer.regular_char ::= `p";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4549] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4549] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4549] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4550] = "OcamlLexer.regular_char ::= `p. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4550] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4550] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4550] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4550] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4550] = true;
		popD[ART_L_OcamlLexer_regular_char_4550] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4552] = "OcamlLexer.regular_char ::= . `q";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4552] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4552] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4552] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4552] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4553] = "OcamlLexer.regular_char ::= `q";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4553] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4553] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4553] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4554] = "OcamlLexer.regular_char ::= `q. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4554] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4554] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4554] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4554] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4554] = true;
		popD[ART_L_OcamlLexer_regular_char_4554] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4556] = "OcamlLexer.regular_char ::= . `r";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4556] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4556] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4556] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4556] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4557] = "OcamlLexer.regular_char ::= `r";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4557] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4557] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4557] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4558] = "OcamlLexer.regular_char ::= `r. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4558] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4558] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4558] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4558] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4558] = true;
		popD[ART_L_OcamlLexer_regular_char_4558] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4560] = "OcamlLexer.regular_char ::= . `s";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4560] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4560] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4560] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4560] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4561] = "OcamlLexer.regular_char ::= `s";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4561] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4561] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4561] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4562] = "OcamlLexer.regular_char ::= `s. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4562] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4562] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4562] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4562] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4562] = true;
		popD[ART_L_OcamlLexer_regular_char_4562] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4564] = "OcamlLexer.regular_char ::= . `t";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4564] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4564] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4564] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4564] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4565] = "OcamlLexer.regular_char ::= `t";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4565] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4565] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4565] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4566] = "OcamlLexer.regular_char ::= `t. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4566] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4566] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4566] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4566] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4566] = true;
		popD[ART_L_OcamlLexer_regular_char_4566] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4568] = "OcamlLexer.regular_char ::= . `u";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4568] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4568] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4568] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4568] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4569] = "OcamlLexer.regular_char ::= `u";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4569] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4569] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4569] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4570] = "OcamlLexer.regular_char ::= `u. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4570] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4570] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4570] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4570] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4570] = true;
		popD[ART_L_OcamlLexer_regular_char_4570] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4572] = "OcamlLexer.regular_char ::= . `v";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4572] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4572] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4572] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4572] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4573] = "OcamlLexer.regular_char ::= `v";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4573] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4573] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4573] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4574] = "OcamlLexer.regular_char ::= `v. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4574] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4574] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4574] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4574] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4574] = true;
		popD[ART_L_OcamlLexer_regular_char_4574] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4576] = "OcamlLexer.regular_char ::= . `w";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4576] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4576] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4576] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4576] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4577] = "OcamlLexer.regular_char ::= `w";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4577] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4577] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4577] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4578] = "OcamlLexer.regular_char ::= `w. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4578] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4578] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4578] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4578] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4578] = true;
		popD[ART_L_OcamlLexer_regular_char_4578] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4580] = "OcamlLexer.regular_char ::= . `x";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4580] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4580] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4580] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4580] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4581] = "OcamlLexer.regular_char ::= `x";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4581] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4581] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4581] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4582] = "OcamlLexer.regular_char ::= `x. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4582] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4582] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4582] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4582] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4582] = true;
		popD[ART_L_OcamlLexer_regular_char_4582] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4584] = "OcamlLexer.regular_char ::= . `y";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4584] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4584] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4584] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4584] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4585] = "OcamlLexer.regular_char ::= `y";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4585] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4585] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4585] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4586] = "OcamlLexer.regular_char ::= `y. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4586] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4586] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4586] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4586] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4586] = true;
		popD[ART_L_OcamlLexer_regular_char_4586] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4588] = "OcamlLexer.regular_char ::= . `z";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4588] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4588] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4588] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4588] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4589] = "OcamlLexer.regular_char ::= `z";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4589] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4589] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4589] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4590] = "OcamlLexer.regular_char ::= `z. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4590] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4590] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4590] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4590] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4590] = true;
		popD[ART_L_OcamlLexer_regular_char_4590] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4592] = "OcamlLexer.regular_char ::= . `{";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4592] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4592] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4592] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4592] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4593] = "OcamlLexer.regular_char ::= `{";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4593] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4593] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4593] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4594] = "OcamlLexer.regular_char ::= `{. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4594] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4594] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4594] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4594] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4594] = true;
		popD[ART_L_OcamlLexer_regular_char_4594] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4596] = "OcamlLexer.regular_char ::= . `|";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4596] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4596] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4596] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4596] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4597] = "OcamlLexer.regular_char ::= `|";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4597] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4597] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4597] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4598] = "OcamlLexer.regular_char ::= `|. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4598] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4598] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4598] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4598] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4598] = true;
		popD[ART_L_OcamlLexer_regular_char_4598] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4600] = "OcamlLexer.regular_char ::= . `}";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4600] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4600] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4600] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4600] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4601] = "OcamlLexer.regular_char ::= `}";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4601] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4601] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4601] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4602] = "OcamlLexer.regular_char ::= `}. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4602] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4602] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4602] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4602] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4602] = true;
		popD[ART_L_OcamlLexer_regular_char_4602] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4604] = "OcamlLexer.regular_char ::= . `~";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4604] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4604] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4604] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_char_4604] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4605] = "OcamlLexer.regular_char ::= `~";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4605] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4605] = ART_L_OcamlLexer_regular_char;
		popD[ART_L_OcamlLexer_regular_char_4605] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_char_4606] = "OcamlLexer.regular_char ::= `~. ";
		artLabelStrings[ART_L_OcamlLexer_regular_char_4606] = "";
		lhsL[ART_L_OcamlLexer_regular_char_4606] = ART_L_OcamlLexer_regular_char;
		artKindOfs[ART_L_OcamlLexer_regular_char_4606] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_char_4606] = true;
		eoR_pL[ART_L_OcamlLexer_regular_char_4606] = true;
		popD[ART_L_OcamlLexer_regular_char_4606] = true;
	}

	public void artTableInitialiser_211() {
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char] = "OcamlLexer.regular_string_char ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char] = "regular_string_char";
		artKindOfs[ART_L_OcamlLexer_regular_string_char] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4708] = "OcamlLexer.regular_string_char ::= . `";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4708] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4708] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4708] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4708] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4709] = "OcamlLexer.regular_string_char ::= `";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4709] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4709] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4709] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4710] = "OcamlLexer.regular_string_char ::= `. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4710] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4710] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4710] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4710] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4710] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4710] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4712] = "OcamlLexer.regular_string_char ::= . `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4712] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4712] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4712] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4712] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4713] = "OcamlLexer.regular_string_char ::= `\\\\007";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4713] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4713] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4713] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4714] = "OcamlLexer.regular_string_char ::= `\\\\007. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4714] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4714] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4714] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4714] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4714] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4714] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4716] = "OcamlLexer.regular_string_char ::= . `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4716] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4716] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4716] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4716] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4717] = "OcamlLexer.regular_string_char ::= `\\\\010";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4717] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4717] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4717] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4718] = "OcamlLexer.regular_string_char ::= `\\\\010. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4718] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4718] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4718] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4718] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4718] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4718] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4720] = "OcamlLexer.regular_string_char ::= . `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4720] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4720] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4720] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4720] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4721] = "OcamlLexer.regular_string_char ::= `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4721] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4721] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4721] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4722] = "OcamlLexer.regular_string_char ::= `\\\\t. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4722] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4722] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4722] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4722] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4722] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4722] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4724] = "OcamlLexer.regular_string_char ::= . `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4724] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4724] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4724] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4724] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4725] = "OcamlLexer.regular_string_char ::= `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4725] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4725] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4725] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4726] = "OcamlLexer.regular_string_char ::= `\\\\013. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4726] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4726] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4726] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4726] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4726] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4726] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4728] = "OcamlLexer.regular_string_char ::= . `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4728] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4728] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4728] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4728] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4729] = "OcamlLexer.regular_string_char ::= `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4729] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4729] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4729] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4730] = "OcamlLexer.regular_string_char ::= `\\\\014. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4730] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4730] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4730] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4730] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4730] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4730] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4732] = "OcamlLexer.regular_string_char ::= . `e";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4732] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4732] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4732] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4732] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4733] = "OcamlLexer.regular_string_char ::= `e";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4733] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4733] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4733] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4734] = "OcamlLexer.regular_string_char ::= `e. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4734] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4734] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4734] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4734] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4734] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4734] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4736] = "OcamlLexer.regular_string_char ::= . ` ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4736] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4736] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4736] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4736] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4737] = "OcamlLexer.regular_string_char ::= ` ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4737] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4737] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4737] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4738] = "OcamlLexer.regular_string_char ::= ` . ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4738] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4738] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4738] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4738] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4738] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4738] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4740] = "OcamlLexer.regular_string_char ::= . `!";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4740] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4740] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4740] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4740] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4741] = "OcamlLexer.regular_string_char ::= `!";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4741] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4741] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4741] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4742] = "OcamlLexer.regular_string_char ::= `!. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4742] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4742] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4742] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4742] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4742] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4742] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4744] = "OcamlLexer.regular_string_char ::= . `#";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4744] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4744] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4744] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4744] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4745] = "OcamlLexer.regular_string_char ::= `#";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4745] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4745] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4745] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4746] = "OcamlLexer.regular_string_char ::= `#. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4746] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4746] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4746] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4746] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4746] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4746] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4748] = "OcamlLexer.regular_string_char ::= . `$";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4748] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4748] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4748] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4748] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4749] = "OcamlLexer.regular_string_char ::= `$";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4749] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4749] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4749] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4750] = "OcamlLexer.regular_string_char ::= `$. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4750] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4750] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4750] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4750] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4750] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4750] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4752] = "OcamlLexer.regular_string_char ::= . `%";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4752] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4752] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4752] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4752] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4753] = "OcamlLexer.regular_string_char ::= `%";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4753] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4753] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4753] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4754] = "OcamlLexer.regular_string_char ::= `%. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4754] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4754] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4754] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4754] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4754] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4754] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4756] = "OcamlLexer.regular_string_char ::= . `&";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4756] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4756] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4756] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4756] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4757] = "OcamlLexer.regular_string_char ::= `&";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4757] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4757] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4757] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4758] = "OcamlLexer.regular_string_char ::= `&. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4758] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4758] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4758] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4758] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4758] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4758] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4760] = "OcamlLexer.regular_string_char ::= . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4760] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4760] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4760] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4760] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4761] = "OcamlLexer.regular_string_char ::= `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4761] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4761] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4761] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4762] = "OcamlLexer.regular_string_char ::= `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4762] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4762] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4762] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4762] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4762] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4762] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4764] = "OcamlLexer.regular_string_char ::= . `(";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4764] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4764] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4764] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4764] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4765] = "OcamlLexer.regular_string_char ::= `(";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4765] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4765] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4765] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4766] = "OcamlLexer.regular_string_char ::= `(. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4766] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4766] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4766] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4766] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4766] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4766] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4768] = "OcamlLexer.regular_string_char ::= . `)";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4768] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4768] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4768] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4768] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4769] = "OcamlLexer.regular_string_char ::= `)";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4769] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4769] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4769] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4770] = "OcamlLexer.regular_string_char ::= `). ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4770] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4770] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4770] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4770] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4770] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4770] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4772] = "OcamlLexer.regular_string_char ::= . `*";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4772] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4772] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4772] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4772] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4773] = "OcamlLexer.regular_string_char ::= `*";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4773] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4773] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4773] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4774] = "OcamlLexer.regular_string_char ::= `*. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4774] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4774] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4774] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4774] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4774] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4774] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4776] = "OcamlLexer.regular_string_char ::= . `+";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4776] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4776] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4776] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4776] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4777] = "OcamlLexer.regular_string_char ::= `+";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4777] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4777] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4777] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4778] = "OcamlLexer.regular_string_char ::= `+. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4778] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4778] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4778] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4778] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4778] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4778] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4780] = "OcamlLexer.regular_string_char ::= . `,";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4780] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4780] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4780] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4780] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4781] = "OcamlLexer.regular_string_char ::= `,";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4781] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4781] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4781] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4782] = "OcamlLexer.regular_string_char ::= `,. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4782] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4782] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4782] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4782] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4782] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4782] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4784] = "OcamlLexer.regular_string_char ::= . `-";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4784] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4784] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4784] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4784] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4785] = "OcamlLexer.regular_string_char ::= `-";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4785] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4785] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4785] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4786] = "OcamlLexer.regular_string_char ::= `-. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4786] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4786] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4786] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4786] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4786] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4786] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4788] = "OcamlLexer.regular_string_char ::= . `.";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4788] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4788] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4788] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4788] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4789] = "OcamlLexer.regular_string_char ::= `.";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4789] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4789] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4789] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4790] = "OcamlLexer.regular_string_char ::= `.. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4790] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4790] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4790] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4790] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4790] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4790] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4792] = "OcamlLexer.regular_string_char ::= . `/";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4792] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4792] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4792] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4792] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4793] = "OcamlLexer.regular_string_char ::= `/";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4793] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4793] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4793] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4794] = "OcamlLexer.regular_string_char ::= `/. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4794] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4794] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4794] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4794] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4794] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4794] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4796] = "OcamlLexer.regular_string_char ::= . `0";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4796] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4796] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4796] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4796] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4797] = "OcamlLexer.regular_string_char ::= `0";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4797] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4797] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4797] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4798] = "OcamlLexer.regular_string_char ::= `0. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4798] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4798] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4798] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4798] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4798] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4798] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4800] = "OcamlLexer.regular_string_char ::= . `1";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4800] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4800] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4800] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4800] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4801] = "OcamlLexer.regular_string_char ::= `1";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4801] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4801] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4801] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4802] = "OcamlLexer.regular_string_char ::= `1. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4802] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4802] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4802] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4802] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4802] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4802] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4804] = "OcamlLexer.regular_string_char ::= . `2";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4804] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4804] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4804] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4804] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4805] = "OcamlLexer.regular_string_char ::= `2";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4805] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4805] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4805] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4806] = "OcamlLexer.regular_string_char ::= `2. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4806] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4806] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4806] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4806] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4806] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4806] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4808] = "OcamlLexer.regular_string_char ::= . `3";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4808] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4808] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4808] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4808] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4809] = "OcamlLexer.regular_string_char ::= `3";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4809] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4809] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4809] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4810] = "OcamlLexer.regular_string_char ::= `3. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4810] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4810] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4810] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4810] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4810] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4810] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4812] = "OcamlLexer.regular_string_char ::= . `4";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4812] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4812] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4812] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4812] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4813] = "OcamlLexer.regular_string_char ::= `4";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4813] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4813] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4813] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4814] = "OcamlLexer.regular_string_char ::= `4. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4814] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4814] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4814] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4814] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4814] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4814] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4816] = "OcamlLexer.regular_string_char ::= . `5";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4816] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4816] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4816] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4816] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4817] = "OcamlLexer.regular_string_char ::= `5";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4817] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4817] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4817] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4818] = "OcamlLexer.regular_string_char ::= `5. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4818] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4818] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4818] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4818] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4818] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4818] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4820] = "OcamlLexer.regular_string_char ::= . `6";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4820] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4820] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4820] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4820] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4821] = "OcamlLexer.regular_string_char ::= `6";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4821] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4821] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4821] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4822] = "OcamlLexer.regular_string_char ::= `6. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4822] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4822] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4822] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4822] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4822] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4822] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4824] = "OcamlLexer.regular_string_char ::= . `7";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4824] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4824] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4824] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4824] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4825] = "OcamlLexer.regular_string_char ::= `7";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4825] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4825] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4825] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4826] = "OcamlLexer.regular_string_char ::= `7. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4826] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4826] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4826] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4826] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4826] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4826] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4828] = "OcamlLexer.regular_string_char ::= . `8";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4828] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4828] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4828] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4828] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4829] = "OcamlLexer.regular_string_char ::= `8";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4829] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4829] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4829] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4830] = "OcamlLexer.regular_string_char ::= `8. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4830] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4830] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4830] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4830] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4830] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4830] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4832] = "OcamlLexer.regular_string_char ::= . `9";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4832] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4832] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4832] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4832] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4833] = "OcamlLexer.regular_string_char ::= `9";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4833] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4833] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4833] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4834] = "OcamlLexer.regular_string_char ::= `9. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4834] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4834] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4834] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4834] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4834] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4834] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4836] = "OcamlLexer.regular_string_char ::= . `:";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4836] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4836] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4836] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4836] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4837] = "OcamlLexer.regular_string_char ::= `:";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4837] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4837] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4837] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4838] = "OcamlLexer.regular_string_char ::= `:. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4838] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4838] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4838] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4838] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4838] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4838] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4840] = "OcamlLexer.regular_string_char ::= . `;";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4840] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4840] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4840] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4840] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4841] = "OcamlLexer.regular_string_char ::= `;";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4841] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4841] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4841] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4842] = "OcamlLexer.regular_string_char ::= `;. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4842] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4842] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4842] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4842] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4842] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4842] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4844] = "OcamlLexer.regular_string_char ::= . `<";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4844] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4844] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4844] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4844] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4845] = "OcamlLexer.regular_string_char ::= `<";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4845] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4845] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4845] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4846] = "OcamlLexer.regular_string_char ::= `<. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4846] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4846] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4846] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4846] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4846] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4846] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4848] = "OcamlLexer.regular_string_char ::= . `=";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4848] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4848] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4848] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4848] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4849] = "OcamlLexer.regular_string_char ::= `=";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4849] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4849] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4849] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4850] = "OcamlLexer.regular_string_char ::= `=. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4850] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4850] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4850] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4850] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4850] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4850] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4852] = "OcamlLexer.regular_string_char ::= . `>";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4852] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4852] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4852] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4852] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4853] = "OcamlLexer.regular_string_char ::= `>";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4853] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4853] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4853] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4854] = "OcamlLexer.regular_string_char ::= `>. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4854] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4854] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4854] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4854] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4854] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4854] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4856] = "OcamlLexer.regular_string_char ::= . `?";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4856] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4856] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4856] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4856] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4857] = "OcamlLexer.regular_string_char ::= `?";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4857] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4857] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4857] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4858] = "OcamlLexer.regular_string_char ::= `?. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4858] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4858] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4858] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4858] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4858] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4858] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4860] = "OcamlLexer.regular_string_char ::= . `@";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4860] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4860] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4860] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4860] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4861] = "OcamlLexer.regular_string_char ::= `@";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4861] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4861] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4861] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4862] = "OcamlLexer.regular_string_char ::= `@. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4862] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4862] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4862] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4862] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4862] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4862] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4864] = "OcamlLexer.regular_string_char ::= . `A";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4864] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4864] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4864] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4864] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4865] = "OcamlLexer.regular_string_char ::= `A";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4865] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4865] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4865] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4866] = "OcamlLexer.regular_string_char ::= `A. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4866] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4866] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4866] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4866] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4866] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4866] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4868] = "OcamlLexer.regular_string_char ::= . `B";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4868] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4868] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4868] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4868] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4869] = "OcamlLexer.regular_string_char ::= `B";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4869] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4869] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4869] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4870] = "OcamlLexer.regular_string_char ::= `B. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4870] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4870] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4870] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4870] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4870] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4870] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4872] = "OcamlLexer.regular_string_char ::= . `C";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4872] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4872] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4872] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4872] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4873] = "OcamlLexer.regular_string_char ::= `C";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4873] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4873] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4873] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4874] = "OcamlLexer.regular_string_char ::= `C. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4874] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4874] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4874] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4874] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4874] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4874] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4876] = "OcamlLexer.regular_string_char ::= . `D";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4876] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4876] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4876] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4876] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4877] = "OcamlLexer.regular_string_char ::= `D";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4877] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4877] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4877] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4878] = "OcamlLexer.regular_string_char ::= `D. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4878] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4878] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4878] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4878] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4878] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4878] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4880] = "OcamlLexer.regular_string_char ::= . `E";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4880] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4880] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4880] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4880] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4881] = "OcamlLexer.regular_string_char ::= `E";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4881] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4881] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4881] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4882] = "OcamlLexer.regular_string_char ::= `E. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4882] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4882] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4882] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4882] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4882] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4882] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4884] = "OcamlLexer.regular_string_char ::= . `F";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4884] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4884] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4884] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4884] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4885] = "OcamlLexer.regular_string_char ::= `F";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4885] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4885] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4885] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4886] = "OcamlLexer.regular_string_char ::= `F. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4886] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4886] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4886] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4886] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4886] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4886] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4888] = "OcamlLexer.regular_string_char ::= . `G";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4888] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4888] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4888] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4888] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4889] = "OcamlLexer.regular_string_char ::= `G";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4889] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4889] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4889] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4890] = "OcamlLexer.regular_string_char ::= `G. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4890] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4890] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4890] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4890] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4890] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4890] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4892] = "OcamlLexer.regular_string_char ::= . `H";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4892] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4892] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4892] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4892] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4893] = "OcamlLexer.regular_string_char ::= `H";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4893] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4893] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4893] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4894] = "OcamlLexer.regular_string_char ::= `H. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4894] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4894] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4894] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4894] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4894] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4894] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4896] = "OcamlLexer.regular_string_char ::= . `I";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4896] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4896] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4896] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4896] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4897] = "OcamlLexer.regular_string_char ::= `I";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4897] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4897] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4897] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4898] = "OcamlLexer.regular_string_char ::= `I. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4898] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4898] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4898] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4898] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4898] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4898] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4900] = "OcamlLexer.regular_string_char ::= . `J";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4900] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4900] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4900] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4900] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4901] = "OcamlLexer.regular_string_char ::= `J";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4901] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4901] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4901] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4902] = "OcamlLexer.regular_string_char ::= `J. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4902] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4902] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4902] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4902] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4902] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4902] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4904] = "OcamlLexer.regular_string_char ::= . `K";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4904] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4904] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4904] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4904] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4905] = "OcamlLexer.regular_string_char ::= `K";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4905] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4905] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4905] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4906] = "OcamlLexer.regular_string_char ::= `K. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4906] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4906] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4906] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4906] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4906] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4906] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4908] = "OcamlLexer.regular_string_char ::= . `L";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4908] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4908] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4908] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4908] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4909] = "OcamlLexer.regular_string_char ::= `L";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4909] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4909] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4909] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4910] = "OcamlLexer.regular_string_char ::= `L. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4910] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4910] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4910] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4910] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4910] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4910] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4912] = "OcamlLexer.regular_string_char ::= . `M";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4912] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4912] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4912] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4912] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4913] = "OcamlLexer.regular_string_char ::= `M";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4913] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4913] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4913] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4914] = "OcamlLexer.regular_string_char ::= `M. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4914] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4914] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4914] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4914] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4914] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4914] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4916] = "OcamlLexer.regular_string_char ::= . `N";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4916] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4916] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4916] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4916] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4917] = "OcamlLexer.regular_string_char ::= `N";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4917] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4917] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4917] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4918] = "OcamlLexer.regular_string_char ::= `N. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4918] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4918] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4918] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4918] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4918] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4918] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4920] = "OcamlLexer.regular_string_char ::= . `O";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4920] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4920] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4920] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4920] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4921] = "OcamlLexer.regular_string_char ::= `O";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4921] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4921] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4921] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4922] = "OcamlLexer.regular_string_char ::= `O. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4922] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4922] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4922] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4922] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4922] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4922] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4924] = "OcamlLexer.regular_string_char ::= . `P";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4924] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4924] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4924] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4924] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4925] = "OcamlLexer.regular_string_char ::= `P";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4925] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4925] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4925] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4926] = "OcamlLexer.regular_string_char ::= `P. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4926] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4926] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4926] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4926] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4926] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4926] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4928] = "OcamlLexer.regular_string_char ::= . `Q";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4928] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4928] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4928] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4928] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4929] = "OcamlLexer.regular_string_char ::= `Q";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4929] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4929] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4929] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4930] = "OcamlLexer.regular_string_char ::= `Q. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4930] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4930] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4930] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4930] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4930] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4930] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4932] = "OcamlLexer.regular_string_char ::= . `R";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4932] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4932] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4932] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4932] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4933] = "OcamlLexer.regular_string_char ::= `R";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4933] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4933] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4933] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4934] = "OcamlLexer.regular_string_char ::= `R. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4934] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4934] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4934] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4934] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4934] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4934] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4936] = "OcamlLexer.regular_string_char ::= . `S";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4936] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4936] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4936] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4936] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4937] = "OcamlLexer.regular_string_char ::= `S";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4937] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4937] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4937] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4938] = "OcamlLexer.regular_string_char ::= `S. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4938] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4938] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4938] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4938] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4938] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4938] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4940] = "OcamlLexer.regular_string_char ::= . `T";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4940] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4940] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4940] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4940] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4941] = "OcamlLexer.regular_string_char ::= `T";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4941] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4941] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4941] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4942] = "OcamlLexer.regular_string_char ::= `T. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4942] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4942] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4942] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4942] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4942] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4942] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4944] = "OcamlLexer.regular_string_char ::= . `U";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4944] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4944] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4944] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4944] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4945] = "OcamlLexer.regular_string_char ::= `U";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4945] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4945] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4945] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4946] = "OcamlLexer.regular_string_char ::= `U. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4946] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4946] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4946] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4946] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4946] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4946] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4948] = "OcamlLexer.regular_string_char ::= . `V";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4948] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4948] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4948] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4948] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4949] = "OcamlLexer.regular_string_char ::= `V";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4949] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4949] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4949] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4950] = "OcamlLexer.regular_string_char ::= `V. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4950] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4950] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4950] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4950] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4950] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4950] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4952] = "OcamlLexer.regular_string_char ::= . `W";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4952] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4952] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4952] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4952] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4953] = "OcamlLexer.regular_string_char ::= `W";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4953] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4953] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4953] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4954] = "OcamlLexer.regular_string_char ::= `W. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4954] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4954] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4954] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4954] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4954] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4954] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4956] = "OcamlLexer.regular_string_char ::= . `X";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4956] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4956] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4956] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4956] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4957] = "OcamlLexer.regular_string_char ::= `X";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4957] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4957] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4957] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4958] = "OcamlLexer.regular_string_char ::= `X. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4958] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4958] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4958] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4958] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4958] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4958] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4960] = "OcamlLexer.regular_string_char ::= . `Y";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4960] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4960] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4960] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4960] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4961] = "OcamlLexer.regular_string_char ::= `Y";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4961] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4961] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4961] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4962] = "OcamlLexer.regular_string_char ::= `Y. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4962] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4962] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4962] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4962] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4962] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4962] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4964] = "OcamlLexer.regular_string_char ::= . `Z";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4964] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4964] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4964] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4964] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4965] = "OcamlLexer.regular_string_char ::= `Z";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4965] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4965] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4965] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4966] = "OcamlLexer.regular_string_char ::= `Z. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4966] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4966] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4966] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4966] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4966] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4966] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4968] = "OcamlLexer.regular_string_char ::= . `[";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4968] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4968] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4968] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4968] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4969] = "OcamlLexer.regular_string_char ::= `[";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4969] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4969] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4969] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4970] = "OcamlLexer.regular_string_char ::= `[. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4970] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4970] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4970] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4970] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4970] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4970] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4972] = "OcamlLexer.regular_string_char ::= . `]";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4972] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4972] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4972] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4972] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4973] = "OcamlLexer.regular_string_char ::= `]";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4973] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4973] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4973] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4974] = "OcamlLexer.regular_string_char ::= `]. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4974] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4974] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4974] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4974] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4974] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4974] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4976] = "OcamlLexer.regular_string_char ::= . `^";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4976] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4976] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4976] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4976] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4977] = "OcamlLexer.regular_string_char ::= `^";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4977] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4977] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4977] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4978] = "OcamlLexer.regular_string_char ::= `^. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4978] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4978] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4978] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4978] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4978] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4978] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4980] = "OcamlLexer.regular_string_char ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4980] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4980] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4980] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4980] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4981] = "OcamlLexer.regular_string_char ::= `_";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4981] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4981] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4981] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4982] = "OcamlLexer.regular_string_char ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4982] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4982] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4982] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4982] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4982] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4982] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4984] = "OcamlLexer.regular_string_char ::= . `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4984] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4984] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4984] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4984] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4985] = "OcamlLexer.regular_string_char ::= `\\\\`";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4985] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4985] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4985] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4986] = "OcamlLexer.regular_string_char ::= `\\\\`. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4986] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4986] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4986] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4986] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4986] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4986] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4988] = "OcamlLexer.regular_string_char ::= . `a";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4988] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4988] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4988] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4988] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4989] = "OcamlLexer.regular_string_char ::= `a";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4989] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4989] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4989] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4990] = "OcamlLexer.regular_string_char ::= `a. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4990] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4990] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4990] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4990] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4990] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4990] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4992] = "OcamlLexer.regular_string_char ::= . `b";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4992] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4992] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4992] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4992] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4993] = "OcamlLexer.regular_string_char ::= `b";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4993] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4993] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4993] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4994] = "OcamlLexer.regular_string_char ::= `b. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4994] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4994] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4994] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4994] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4994] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4994] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4996] = "OcamlLexer.regular_string_char ::= . `c";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4996] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4996] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4996] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_4996] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4997] = "OcamlLexer.regular_string_char ::= `c";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4997] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4997] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_4997] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_4998] = "OcamlLexer.regular_string_char ::= `c. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_4998] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_4998] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_4998] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_4998] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_4998] = true;
		popD[ART_L_OcamlLexer_regular_string_char_4998] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5000] = "OcamlLexer.regular_string_char ::= . `d";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5000] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5000] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5000] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5000] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5001] = "OcamlLexer.regular_string_char ::= `d";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5001] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5001] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5001] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5002] = "OcamlLexer.regular_string_char ::= `d. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5002] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5002] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5002] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5002] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5002] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5002] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5004] = "OcamlLexer.regular_string_char ::= . `f";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5004] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5004] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5004] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5004] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5005] = "OcamlLexer.regular_string_char ::= `f";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5005] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5005] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5005] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5006] = "OcamlLexer.regular_string_char ::= `f. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5006] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5006] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5006] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5006] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5006] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5006] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5008] = "OcamlLexer.regular_string_char ::= . `g";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5008] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5008] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5008] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5008] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5009] = "OcamlLexer.regular_string_char ::= `g";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5009] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5009] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5009] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5010] = "OcamlLexer.regular_string_char ::= `g. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5010] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5010] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5010] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5010] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5010] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5010] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5012] = "OcamlLexer.regular_string_char ::= . `h";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5012] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5012] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5012] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5012] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5013] = "OcamlLexer.regular_string_char ::= `h";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5013] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5013] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5013] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5014] = "OcamlLexer.regular_string_char ::= `h. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5014] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5014] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5014] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5014] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5014] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5014] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5016] = "OcamlLexer.regular_string_char ::= . `i";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5016] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5016] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5016] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5016] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5017] = "OcamlLexer.regular_string_char ::= `i";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5017] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5017] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5017] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5018] = "OcamlLexer.regular_string_char ::= `i. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5018] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5018] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5018] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5018] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5018] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5018] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5020] = "OcamlLexer.regular_string_char ::= . `j";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5020] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5020] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5020] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5020] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5021] = "OcamlLexer.regular_string_char ::= `j";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5021] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5021] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5021] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5022] = "OcamlLexer.regular_string_char ::= `j. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5022] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5022] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5022] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5022] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5022] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5022] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5024] = "OcamlLexer.regular_string_char ::= . `k";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5024] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5024] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5024] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5024] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5025] = "OcamlLexer.regular_string_char ::= `k";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5025] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5025] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5025] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5026] = "OcamlLexer.regular_string_char ::= `k. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5026] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5026] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5026] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5026] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5026] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5026] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5028] = "OcamlLexer.regular_string_char ::= . `l";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5028] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5028] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5028] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5028] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5029] = "OcamlLexer.regular_string_char ::= `l";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5029] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5029] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5029] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5030] = "OcamlLexer.regular_string_char ::= `l. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5030] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5030] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5030] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5030] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5030] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5030] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5032] = "OcamlLexer.regular_string_char ::= . `m";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5032] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5032] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5032] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5032] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5033] = "OcamlLexer.regular_string_char ::= `m";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5033] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5033] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5033] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5034] = "OcamlLexer.regular_string_char ::= `m. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5034] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5034] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5034] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5034] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5034] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5034] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5036] = "OcamlLexer.regular_string_char ::= . `n";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5036] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5036] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5036] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5036] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5037] = "OcamlLexer.regular_string_char ::= `n";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5037] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5037] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5037] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5038] = "OcamlLexer.regular_string_char ::= `n. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5038] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5038] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5038] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5038] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5038] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5038] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5040] = "OcamlLexer.regular_string_char ::= . `o";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5040] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5040] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5040] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5040] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5041] = "OcamlLexer.regular_string_char ::= `o";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5041] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5041] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5041] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5042] = "OcamlLexer.regular_string_char ::= `o. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5042] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5042] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5042] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5042] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5042] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5042] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5044] = "OcamlLexer.regular_string_char ::= . `p";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5044] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5044] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5044] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5044] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5045] = "OcamlLexer.regular_string_char ::= `p";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5045] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5045] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5045] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5046] = "OcamlLexer.regular_string_char ::= `p. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5046] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5046] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5046] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5046] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5046] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5046] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5048] = "OcamlLexer.regular_string_char ::= . `q";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5048] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5048] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5048] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5048] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5049] = "OcamlLexer.regular_string_char ::= `q";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5049] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5049] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5049] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5050] = "OcamlLexer.regular_string_char ::= `q. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5050] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5050] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5050] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5050] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5050] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5050] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5052] = "OcamlLexer.regular_string_char ::= . `r";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5052] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5052] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5052] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5052] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5053] = "OcamlLexer.regular_string_char ::= `r";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5053] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5053] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5053] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5054] = "OcamlLexer.regular_string_char ::= `r. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5054] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5054] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5054] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5054] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5054] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5054] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5056] = "OcamlLexer.regular_string_char ::= . `s";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5056] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5056] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5056] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5056] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5057] = "OcamlLexer.regular_string_char ::= `s";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5057] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5057] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5057] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5058] = "OcamlLexer.regular_string_char ::= `s. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5058] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5058] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5058] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5058] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5058] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5058] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5060] = "OcamlLexer.regular_string_char ::= . `t";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5060] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5060] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5060] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5060] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5061] = "OcamlLexer.regular_string_char ::= `t";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5061] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5061] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5061] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5062] = "OcamlLexer.regular_string_char ::= `t. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5062] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5062] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5062] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5062] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5062] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5062] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5064] = "OcamlLexer.regular_string_char ::= . `u";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5064] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5064] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5064] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5064] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5065] = "OcamlLexer.regular_string_char ::= `u";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5065] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5065] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5065] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5066] = "OcamlLexer.regular_string_char ::= `u. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5066] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5066] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5066] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5066] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5066] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5066] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5068] = "OcamlLexer.regular_string_char ::= . `v";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5068] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5068] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5068] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5068] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5069] = "OcamlLexer.regular_string_char ::= `v";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5069] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5069] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5069] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5070] = "OcamlLexer.regular_string_char ::= `v. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5070] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5070] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5070] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5070] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5070] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5070] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5072] = "OcamlLexer.regular_string_char ::= . `w";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5072] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5072] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5072] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5072] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5073] = "OcamlLexer.regular_string_char ::= `w";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5073] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5073] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5073] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5074] = "OcamlLexer.regular_string_char ::= `w. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5074] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5074] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5074] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5074] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5074] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5074] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5076] = "OcamlLexer.regular_string_char ::= . `x";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5076] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5076] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5076] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5076] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5077] = "OcamlLexer.regular_string_char ::= `x";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5077] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5077] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5077] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5078] = "OcamlLexer.regular_string_char ::= `x. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5078] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5078] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5078] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5078] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5078] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5078] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5080] = "OcamlLexer.regular_string_char ::= . `y";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5080] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5080] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5080] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5080] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5081] = "OcamlLexer.regular_string_char ::= `y";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5081] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5081] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5081] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5082] = "OcamlLexer.regular_string_char ::= `y. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5082] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5082] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5082] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5082] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5082] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5082] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5084] = "OcamlLexer.regular_string_char ::= . `z";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5084] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5084] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5084] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5084] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5085] = "OcamlLexer.regular_string_char ::= `z";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5085] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5085] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5085] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5086] = "OcamlLexer.regular_string_char ::= `z. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5086] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5086] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5086] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5086] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5086] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5086] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5088] = "OcamlLexer.regular_string_char ::= . `{";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5088] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5088] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5088] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5088] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5089] = "OcamlLexer.regular_string_char ::= `{";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5089] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5089] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5089] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5090] = "OcamlLexer.regular_string_char ::= `{. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5090] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5090] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5090] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5090] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5090] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5090] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5092] = "OcamlLexer.regular_string_char ::= . `|";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5092] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5092] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5092] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5092] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5093] = "OcamlLexer.regular_string_char ::= `|";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5093] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5093] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5093] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5094] = "OcamlLexer.regular_string_char ::= `|. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5094] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5094] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5094] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5094] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5094] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5094] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5096] = "OcamlLexer.regular_string_char ::= . `}";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5096] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5096] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5096] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5096] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5097] = "OcamlLexer.regular_string_char ::= `}";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5097] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5097] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5097] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5098] = "OcamlLexer.regular_string_char ::= `}. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5098] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5098] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5098] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5098] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5098] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5098] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5100] = "OcamlLexer.regular_string_char ::= . `~";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5100] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5100] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5100] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_regular_string_char_5100] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5101] = "OcamlLexer.regular_string_char ::= `~";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5101] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5101] = ART_L_OcamlLexer_regular_string_char;
		popD[ART_L_OcamlLexer_regular_string_char_5101] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_regular_string_char_5102] = "OcamlLexer.regular_string_char ::= `~. ";
		artLabelStrings[ART_L_OcamlLexer_regular_string_char_5102] = "";
		lhsL[ART_L_OcamlLexer_regular_string_char_5102] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_regular_string_char_5102] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_regular_string_char_5102] = true;
		eoR_pL[ART_L_OcamlLexer_regular_string_char_5102] = true;
		popD[ART_L_OcamlLexer_regular_string_char_5102] = true;
	}

	public void artTableInitialiser_212() {
		artLabelInternalStrings[ART_L_OcamlLexer_rparen] = "OcamlLexer.rparen ";
		artLabelStrings[ART_L_OcamlLexer_rparen] = "rparen";
		artKindOfs[ART_L_OcamlLexer_rparen] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_rparen_1158] = "OcamlLexer.rparen ::= . `)";
		artLabelStrings[ART_L_OcamlLexer_rparen_1158] = "";
		lhsL[ART_L_OcamlLexer_rparen_1158] = ART_L_OcamlLexer_rparen;
		artKindOfs[ART_L_OcamlLexer_rparen_1158] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_rparen_1158] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rparen_1159] = "OcamlLexer.rparen ::= `)";
		artLabelStrings[ART_L_OcamlLexer_rparen_1159] = "";
		lhsL[ART_L_OcamlLexer_rparen_1159] = ART_L_OcamlLexer_rparen;
		popD[ART_L_OcamlLexer_rparen_1159] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_rparen_1160] = "OcamlLexer.rparen ::= `). ";
		artLabelStrings[ART_L_OcamlLexer_rparen_1160] = "";
		lhsL[ART_L_OcamlLexer_rparen_1160] = ART_L_OcamlLexer_rparen;
		artKindOfs[ART_L_OcamlLexer_rparen_1160] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_rparen_1160] = true;
		eoR_pL[ART_L_OcamlLexer_rparen_1160] = true;
		popD[ART_L_OcamlLexer_rparen_1160] = true;
	}

	public void artTableInitialiser_213() {
		artLabelInternalStrings[ART_L_OcamlLexer_semi] = "OcamlLexer.semi ";
		artLabelStrings[ART_L_OcamlLexer_semi] = "semi";
		artKindOfs[ART_L_OcamlLexer_semi] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_semi_1235] = "OcamlLexer.semi ::= . `;";
		artLabelStrings[ART_L_OcamlLexer_semi_1235] = "";
		lhsL[ART_L_OcamlLexer_semi_1235] = ART_L_OcamlLexer_semi;
		artKindOfs[ART_L_OcamlLexer_semi_1235] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_semi_1235] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_semi_1236] = "OcamlLexer.semi ::= `;";
		artLabelStrings[ART_L_OcamlLexer_semi_1236] = "";
		lhsL[ART_L_OcamlLexer_semi_1236] = ART_L_OcamlLexer_semi;
		popD[ART_L_OcamlLexer_semi_1236] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_semi_1237] = "OcamlLexer.semi ::= `;. ";
		artLabelStrings[ART_L_OcamlLexer_semi_1237] = "";
		lhsL[ART_L_OcamlLexer_semi_1237] = ART_L_OcamlLexer_semi;
		artKindOfs[ART_L_OcamlLexer_semi_1237] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_semi_1237] = true;
		eoR_pL[ART_L_OcamlLexer_semi_1237] = true;
		popD[ART_L_OcamlLexer_semi_1237] = true;
	}

	public void artTableInitialiser_214() {
		artLabelInternalStrings[ART_L_OcamlLexer_semisemi] = "OcamlLexer.semisemi ";
		artLabelStrings[ART_L_OcamlLexer_semisemi] = "semisemi";
		artKindOfs[ART_L_OcamlLexer_semisemi] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_semisemi_1240] = "OcamlLexer.semisemi ::= . `;`;";
		artLabelStrings[ART_L_OcamlLexer_semisemi_1240] = "";
		lhsL[ART_L_OcamlLexer_semisemi_1240] = ART_L_OcamlLexer_semisemi;
		artKindOfs[ART_L_OcamlLexer_semisemi_1240] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_semisemi_1240] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_semisemi_1241] = "OcamlLexer.semisemi ::= `;`;";
		artLabelStrings[ART_L_OcamlLexer_semisemi_1241] = "";
		lhsL[ART_L_OcamlLexer_semisemi_1241] = ART_L_OcamlLexer_semisemi;
		popD[ART_L_OcamlLexer_semisemi_1241] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_semisemi_1242] = "OcamlLexer.semisemi ::= `;. `;";
		artLabelStrings[ART_L_OcamlLexer_semisemi_1242] = "";
		lhsL[ART_L_OcamlLexer_semisemi_1242] = ART_L_OcamlLexer_semisemi;
		artKindOfs[ART_L_OcamlLexer_semisemi_1242] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_semisemi_1242] = true;
		popD[ART_L_OcamlLexer_semisemi_1242] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_semisemi_1243] = "OcamlLexer.semisemi ::= `;`;";
		artLabelStrings[ART_L_OcamlLexer_semisemi_1243] = "";
		lhsL[ART_L_OcamlLexer_semisemi_1243] = ART_L_OcamlLexer_semisemi;
		popD[ART_L_OcamlLexer_semisemi_1243] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_semisemi_1244] = "OcamlLexer.semisemi ::= `;`;. ";
		artLabelStrings[ART_L_OcamlLexer_semisemi_1244] = "";
		lhsL[ART_L_OcamlLexer_semisemi_1244] = ART_L_OcamlLexer_semisemi;
		artKindOfs[ART_L_OcamlLexer_semisemi_1244] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_semisemi_1244] = true;
		eoR_pL[ART_L_OcamlLexer_semisemi_1244] = true;
		popD[ART_L_OcamlLexer_semisemi_1244] = true;
	}

	public void artTableInitialiser_215() {
		artLabelInternalStrings[ART_L_OcamlLexer_sig] = "OcamlLexer.sig ";
		artLabelStrings[ART_L_OcamlLexer_sig] = "sig";
		artKindOfs[ART_L_OcamlLexer_sig] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_sig_990] = "OcamlLexer.sig ::= . `s`i`g";
		artLabelStrings[ART_L_OcamlLexer_sig_990] = "";
		lhsL[ART_L_OcamlLexer_sig_990] = ART_L_OcamlLexer_sig;
		artKindOfs[ART_L_OcamlLexer_sig_990] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_sig_990] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_sig_991] = "OcamlLexer.sig ::= `s`i`g";
		artLabelStrings[ART_L_OcamlLexer_sig_991] = "";
		lhsL[ART_L_OcamlLexer_sig_991] = ART_L_OcamlLexer_sig;
		popD[ART_L_OcamlLexer_sig_991] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_sig_992] = "OcamlLexer.sig ::= `s. `i`g";
		artLabelStrings[ART_L_OcamlLexer_sig_992] = "";
		lhsL[ART_L_OcamlLexer_sig_992] = ART_L_OcamlLexer_sig;
		artKindOfs[ART_L_OcamlLexer_sig_992] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_sig_992] = true;
		popD[ART_L_OcamlLexer_sig_992] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_sig_993] = "OcamlLexer.sig ::= `s`i`g";
		artLabelStrings[ART_L_OcamlLexer_sig_993] = "";
		lhsL[ART_L_OcamlLexer_sig_993] = ART_L_OcamlLexer_sig;
		popD[ART_L_OcamlLexer_sig_993] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_sig_994] = "OcamlLexer.sig ::= `s`i. `g";
		artLabelStrings[ART_L_OcamlLexer_sig_994] = "";
		lhsL[ART_L_OcamlLexer_sig_994] = ART_L_OcamlLexer_sig;
		artKindOfs[ART_L_OcamlLexer_sig_994] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_sig_994] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_sig_995] = "OcamlLexer.sig ::= `s`i`g";
		artLabelStrings[ART_L_OcamlLexer_sig_995] = "";
		lhsL[ART_L_OcamlLexer_sig_995] = ART_L_OcamlLexer_sig;
		popD[ART_L_OcamlLexer_sig_995] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_sig_996] = "OcamlLexer.sig ::= `s`i`g. ";
		artLabelStrings[ART_L_OcamlLexer_sig_996] = "";
		lhsL[ART_L_OcamlLexer_sig_996] = ART_L_OcamlLexer_sig;
		artKindOfs[ART_L_OcamlLexer_sig_996] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_sig_996] = true;
		eoR_pL[ART_L_OcamlLexer_sig_996] = true;
		popD[ART_L_OcamlLexer_sig_996] = true;
	}

	public void artTableInitialiser_216() {
		artLabelInternalStrings[ART_L_OcamlLexer_squote] = "OcamlLexer.squote ";
		artLabelStrings[ART_L_OcamlLexer_squote] = "squote";
		artKindOfs[ART_L_OcamlLexer_squote] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_squote_1148] = "OcamlLexer.squote ::= . `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_squote_1148] = "";
		lhsL[ART_L_OcamlLexer_squote_1148] = ART_L_OcamlLexer_squote;
		artKindOfs[ART_L_OcamlLexer_squote_1148] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_squote_1148] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_squote_1149] = "OcamlLexer.squote ::= `\\\\'";
		artLabelStrings[ART_L_OcamlLexer_squote_1149] = "";
		lhsL[ART_L_OcamlLexer_squote_1149] = ART_L_OcamlLexer_squote;
		popD[ART_L_OcamlLexer_squote_1149] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_squote_1150] = "OcamlLexer.squote ::= `\\\\'. ";
		artLabelStrings[ART_L_OcamlLexer_squote_1150] = "";
		lhsL[ART_L_OcamlLexer_squote_1150] = ART_L_OcamlLexer_squote;
		artKindOfs[ART_L_OcamlLexer_squote_1150] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_squote_1150] = true;
		eoR_pL[ART_L_OcamlLexer_squote_1150] = true;
		popD[ART_L_OcamlLexer_squote_1150] = true;
	}

	public void artTableInitialiser_217() {
		artLabelInternalStrings[ART_L_OcamlLexer_star] = "OcamlLexer.star ";
		artLabelStrings[ART_L_OcamlLexer_star] = "star";
		artKindOfs[ART_L_OcamlLexer_star] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_star_1163] = "OcamlLexer.star ::= . `*";
		artLabelStrings[ART_L_OcamlLexer_star_1163] = "";
		lhsL[ART_L_OcamlLexer_star_1163] = ART_L_OcamlLexer_star;
		artKindOfs[ART_L_OcamlLexer_star_1163] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_star_1163] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_star_1164] = "OcamlLexer.star ::= `*";
		artLabelStrings[ART_L_OcamlLexer_star_1164] = "";
		lhsL[ART_L_OcamlLexer_star_1164] = ART_L_OcamlLexer_star;
		popD[ART_L_OcamlLexer_star_1164] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_star_1165] = "OcamlLexer.star ::= `*. ";
		artLabelStrings[ART_L_OcamlLexer_star_1165] = "";
		lhsL[ART_L_OcamlLexer_star_1165] = ART_L_OcamlLexer_star;
		artKindOfs[ART_L_OcamlLexer_star_1165] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_star_1165] = true;
		eoR_pL[ART_L_OcamlLexer_star_1165] = true;
		popD[ART_L_OcamlLexer_star_1165] = true;
	}

	public void artTableInitialiser_218() {
		artLabelInternalStrings[ART_L_OcamlLexer_string_character] = "OcamlLexer.string_character ";
		artLabelStrings[ART_L_OcamlLexer_string_character] = "string_character";
		artKindOfs[ART_L_OcamlLexer_string_character] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4682] = "OcamlLexer.string_character ::= . OcamlLexer.regular_string_char ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4682] = "";
		lhsL[ART_L_OcamlLexer_string_character_4682] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4682] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4684] = "OcamlLexer.string_character ::= OcamlLexer.regular_string_char . ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4684] = "";
		lhsL[ART_L_OcamlLexer_string_character_4684] = ART_L_OcamlLexer_string_character;
		artSlotInstanceOfs[ART_L_OcamlLexer_string_character_4684] = ART_L_OcamlLexer_regular_string_char;
		artKindOfs[ART_L_OcamlLexer_string_character_4684] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_string_character_4684] = true;
		eoR_pL[ART_L_OcamlLexer_string_character_4684] = true;
		popD[ART_L_OcamlLexer_string_character_4684] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4686] = "OcamlLexer.string_character ::= . OcamlLexer.escape_sequence ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4686] = "";
		lhsL[ART_L_OcamlLexer_string_character_4686] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4686] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4688] = "OcamlLexer.string_character ::= OcamlLexer.escape_sequence . ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4688] = "";
		lhsL[ART_L_OcamlLexer_string_character_4688] = ART_L_OcamlLexer_string_character;
		artSlotInstanceOfs[ART_L_OcamlLexer_string_character_4688] = ART_L_OcamlLexer_escape_sequence;
		artKindOfs[ART_L_OcamlLexer_string_character_4688] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_string_character_4688] = true;
		eoR_pL[ART_L_OcamlLexer_string_character_4688] = true;
		popD[ART_L_OcamlLexer_string_character_4688] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4690] = "OcamlLexer.string_character ::= . `\\\\\\\\`\\\\r( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4690] = "";
		lhsL[ART_L_OcamlLexer_string_character_4690] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4690] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4691] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4691] = "";
		lhsL[ART_L_OcamlLexer_string_character_4691] = ART_L_OcamlLexer_string_character;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4692] = "OcamlLexer.string_character ::= `\\\\\\\\. `\\\\r( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4692] = "";
		lhsL[ART_L_OcamlLexer_string_character_4692] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4692] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_string_character_4692] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4693] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4693] = "";
		lhsL[ART_L_OcamlLexer_string_character_4693] = ART_L_OcamlLexer_string_character;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4694] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r. ( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4694] = "";
		lhsL[ART_L_OcamlLexer_string_character_4694] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4694] = ART_K_INTERMEDIATE;
		lhsL[ART_C_OcamlLexer_string_character_4695] = ART_L_OcamlLexer_string_character;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4696] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4696] = "";
		lhsL[ART_A_OcamlLexer_string_character_4696] = ART_L_OcamlLexer_string_character;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4698] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( . ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4698] = "";
		lhsL[ART_L_OcamlLexer_string_character_4698] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4698] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_string_character_4698] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4699] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4699] = "";
		lhsL[ART_L_OcamlLexer_string_character_4699] = ART_L_OcamlLexer_string_character;
		popD[ART_L_OcamlLexer_string_character_4699] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4700] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` . | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4700] = "";
		lhsL[ART_L_OcamlLexer_string_character_4700] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4700] = ART_K_INTERMEDIATE;
		pL[ART_L_OcamlLexer_string_character_4700] = ART_L_OcamlLexer_string_character_4704;
		aL[ART_L_OcamlLexer_string_character_4700] = ART_L_OcamlLexer_string_character_4704;
		popD[ART_L_OcamlLexer_string_character_4700] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4702] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | . `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4702] = "";
		lhsL[ART_L_OcamlLexer_string_character_4702] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4702] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_string_character_4702] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4703] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | `\\\\t)* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4703] = "";
		lhsL[ART_L_OcamlLexer_string_character_4703] = ART_L_OcamlLexer_string_character;
		popD[ART_L_OcamlLexer_string_character_4703] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4704] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | `\\\\t. )* ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4704] = "";
		lhsL[ART_L_OcamlLexer_string_character_4704] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4704] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_string_character_4704] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_character_4705] = "OcamlLexer.string_character ::= `\\\\\\\\`\\\\r( ` | `\\\\t)* . ";
		artLabelStrings[ART_L_OcamlLexer_string_character_4705] = "";
		lhsL[ART_L_OcamlLexer_string_character_4705] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_character_4705] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_string_character_4705] = true;
		eoR_pL[ART_L_OcamlLexer_string_character_4705] = true;
		popD[ART_L_OcamlLexer_string_character_4705] = true;
	}

	public void artTableInitialiser_219() {
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal] = "OcamlLexer.string_literal ";
		artLabelStrings[ART_L_OcamlLexer_string_literal] = "string_literal";
		artKindOfs[ART_L_OcamlLexer_string_literal] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal_4669] = "OcamlLexer.string_literal ::= . `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_string_literal_4669] = "";
		lhsL[ART_L_OcamlLexer_string_literal_4669] = ART_L_OcamlLexer_string_literal;
		artKindOfs[ART_L_OcamlLexer_string_literal_4669] = ART_K_INTERMEDIATE;
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal_4670] = "OcamlLexer.string_literal ::= `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_string_literal_4670] = "";
		lhsL[ART_L_OcamlLexer_string_literal_4670] = ART_L_OcamlLexer_string_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal_4671] = "OcamlLexer.string_literal ::= `\\\". ( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_string_literal_4671] = "";
		lhsL[ART_L_OcamlLexer_string_literal_4671] = ART_L_OcamlLexer_string_literal;
		artKindOfs[ART_L_OcamlLexer_string_literal_4671] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_string_literal_4671] = true;
		lhsL[ART_C_OcamlLexer_string_literal_4672] = ART_L_OcamlLexer_string_literal;
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal_4676] = "OcamlLexer.string_literal ::= `\\\"( OcamlLexer.string_character . )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_string_literal_4676] = "";
		lhsL[ART_L_OcamlLexer_string_literal_4676] = ART_L_OcamlLexer_string_literal;
		artSlotInstanceOfs[ART_L_OcamlLexer_string_literal_4676] = ART_L_OcamlLexer_string_character;
		artKindOfs[ART_L_OcamlLexer_string_literal_4676] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_string_literal_4676] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal_4677] = "OcamlLexer.string_literal ::= `\\\"( OcamlLexer.string_character )* . `\\\"";
		artLabelStrings[ART_L_OcamlLexer_string_literal_4677] = "";
		lhsL[ART_L_OcamlLexer_string_literal_4677] = ART_L_OcamlLexer_string_literal;
		artKindOfs[ART_L_OcamlLexer_string_literal_4677] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_string_literal_4677] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal_4678] = "OcamlLexer.string_literal ::= `\\\"( OcamlLexer.string_character )* `\\\"";
		artLabelStrings[ART_L_OcamlLexer_string_literal_4678] = "";
		lhsL[ART_L_OcamlLexer_string_literal_4678] = ART_L_OcamlLexer_string_literal;
		popD[ART_L_OcamlLexer_string_literal_4678] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_string_literal_4679] = "OcamlLexer.string_literal ::= `\\\"( OcamlLexer.string_character )* `\\\". ";
		artLabelStrings[ART_L_OcamlLexer_string_literal_4679] = "";
		lhsL[ART_L_OcamlLexer_string_literal_4679] = ART_L_OcamlLexer_string_literal;
		artKindOfs[ART_L_OcamlLexer_string_literal_4679] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_string_literal_4679] = true;
		eoR_pL[ART_L_OcamlLexer_string_literal_4679] = true;
		popD[ART_L_OcamlLexer_string_literal_4679] = true;
	}

	public void artTableInitialiser_220() {
		artLabelInternalStrings[ART_L_OcamlLexer_struct] = "OcamlLexer.struct ";
		artLabelStrings[ART_L_OcamlLexer_struct] = "struct";
		artKindOfs[ART_L_OcamlLexer_struct] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_999] = "OcamlLexer.struct ::= . `s`t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_999] = "";
		lhsL[ART_L_OcamlLexer_struct_999] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_struct_999] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_struct_999] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1000] = "OcamlLexer.struct ::= `s`t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1000] = "";
		lhsL[ART_L_OcamlLexer_struct_1000] = ART_L_OcamlLexer_struct;
		popD[ART_L_OcamlLexer_struct_1000] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1001] = "OcamlLexer.struct ::= `s. `t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1001] = "";
		lhsL[ART_L_OcamlLexer_struct_1001] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_struct_1001] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_struct_1001] = true;
		popD[ART_L_OcamlLexer_struct_1001] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1002] = "OcamlLexer.struct ::= `s`t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1002] = "";
		lhsL[ART_L_OcamlLexer_struct_1002] = ART_L_OcamlLexer_struct;
		popD[ART_L_OcamlLexer_struct_1002] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1003] = "OcamlLexer.struct ::= `s`t. `r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1003] = "";
		lhsL[ART_L_OcamlLexer_struct_1003] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_struct_1003] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_struct_1003] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1004] = "OcamlLexer.struct ::= `s`t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1004] = "";
		lhsL[ART_L_OcamlLexer_struct_1004] = ART_L_OcamlLexer_struct;
		popD[ART_L_OcamlLexer_struct_1004] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1005] = "OcamlLexer.struct ::= `s`t`r. `u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1005] = "";
		lhsL[ART_L_OcamlLexer_struct_1005] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_struct_1005] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_struct_1005] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1006] = "OcamlLexer.struct ::= `s`t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1006] = "";
		lhsL[ART_L_OcamlLexer_struct_1006] = ART_L_OcamlLexer_struct;
		popD[ART_L_OcamlLexer_struct_1006] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1007] = "OcamlLexer.struct ::= `s`t`r`u. `c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1007] = "";
		lhsL[ART_L_OcamlLexer_struct_1007] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_struct_1007] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_struct_1007] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1008] = "OcamlLexer.struct ::= `s`t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1008] = "";
		lhsL[ART_L_OcamlLexer_struct_1008] = ART_L_OcamlLexer_struct;
		popD[ART_L_OcamlLexer_struct_1008] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1009] = "OcamlLexer.struct ::= `s`t`r`u`c. `t";
		artLabelStrings[ART_L_OcamlLexer_struct_1009] = "";
		lhsL[ART_L_OcamlLexer_struct_1009] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_struct_1009] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_struct_1009] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1010] = "OcamlLexer.struct ::= `s`t`r`u`c`t";
		artLabelStrings[ART_L_OcamlLexer_struct_1010] = "";
		lhsL[ART_L_OcamlLexer_struct_1010] = ART_L_OcamlLexer_struct;
		popD[ART_L_OcamlLexer_struct_1010] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_struct_1011] = "OcamlLexer.struct ::= `s`t`r`u`c`t. ";
		artLabelStrings[ART_L_OcamlLexer_struct_1011] = "";
		lhsL[ART_L_OcamlLexer_struct_1011] = ART_L_OcamlLexer_struct;
		artKindOfs[ART_L_OcamlLexer_struct_1011] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_struct_1011] = true;
		eoR_pL[ART_L_OcamlLexer_struct_1011] = true;
		popD[ART_L_OcamlLexer_struct_1011] = true;
	}

	public void artTableInitialiser_221() {
		artLabelInternalStrings[ART_L_OcamlLexer_then] = "OcamlLexer.then ";
		artLabelStrings[ART_L_OcamlLexer_then] = "then";
		artKindOfs[ART_L_OcamlLexer_then] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1014] = "OcamlLexer.then ::= . `t`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_then_1014] = "";
		lhsL[ART_L_OcamlLexer_then_1014] = ART_L_OcamlLexer_then;
		artKindOfs[ART_L_OcamlLexer_then_1014] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_then_1014] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1015] = "OcamlLexer.then ::= `t`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_then_1015] = "";
		lhsL[ART_L_OcamlLexer_then_1015] = ART_L_OcamlLexer_then;
		popD[ART_L_OcamlLexer_then_1015] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1016] = "OcamlLexer.then ::= `t. `h`e`n";
		artLabelStrings[ART_L_OcamlLexer_then_1016] = "";
		lhsL[ART_L_OcamlLexer_then_1016] = ART_L_OcamlLexer_then;
		artKindOfs[ART_L_OcamlLexer_then_1016] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_then_1016] = true;
		popD[ART_L_OcamlLexer_then_1016] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1017] = "OcamlLexer.then ::= `t`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_then_1017] = "";
		lhsL[ART_L_OcamlLexer_then_1017] = ART_L_OcamlLexer_then;
		popD[ART_L_OcamlLexer_then_1017] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1018] = "OcamlLexer.then ::= `t`h. `e`n";
		artLabelStrings[ART_L_OcamlLexer_then_1018] = "";
		lhsL[ART_L_OcamlLexer_then_1018] = ART_L_OcamlLexer_then;
		artKindOfs[ART_L_OcamlLexer_then_1018] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_then_1018] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1019] = "OcamlLexer.then ::= `t`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_then_1019] = "";
		lhsL[ART_L_OcamlLexer_then_1019] = ART_L_OcamlLexer_then;
		popD[ART_L_OcamlLexer_then_1019] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1020] = "OcamlLexer.then ::= `t`h`e. `n";
		artLabelStrings[ART_L_OcamlLexer_then_1020] = "";
		lhsL[ART_L_OcamlLexer_then_1020] = ART_L_OcamlLexer_then;
		artKindOfs[ART_L_OcamlLexer_then_1020] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_then_1020] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1021] = "OcamlLexer.then ::= `t`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_then_1021] = "";
		lhsL[ART_L_OcamlLexer_then_1021] = ART_L_OcamlLexer_then;
		popD[ART_L_OcamlLexer_then_1021] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_then_1022] = "OcamlLexer.then ::= `t`h`e`n. ";
		artLabelStrings[ART_L_OcamlLexer_then_1022] = "";
		lhsL[ART_L_OcamlLexer_then_1022] = ART_L_OcamlLexer_then;
		artKindOfs[ART_L_OcamlLexer_then_1022] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_then_1022] = true;
		eoR_pL[ART_L_OcamlLexer_then_1022] = true;
		popD[ART_L_OcamlLexer_then_1022] = true;
	}

	public void artTableInitialiser_222() {
		artLabelInternalStrings[ART_L_OcamlLexer_tilde] = "OcamlLexer.tilde ";
		artLabelStrings[ART_L_OcamlLexer_tilde] = "tilde";
		artKindOfs[ART_L_OcamlLexer_tilde] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_tilde_1365] = "OcamlLexer.tilde ::= . `~";
		artLabelStrings[ART_L_OcamlLexer_tilde_1365] = "";
		lhsL[ART_L_OcamlLexer_tilde_1365] = ART_L_OcamlLexer_tilde;
		artKindOfs[ART_L_OcamlLexer_tilde_1365] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_tilde_1365] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_tilde_1366] = "OcamlLexer.tilde ::= `~";
		artLabelStrings[ART_L_OcamlLexer_tilde_1366] = "";
		lhsL[ART_L_OcamlLexer_tilde_1366] = ART_L_OcamlLexer_tilde;
		popD[ART_L_OcamlLexer_tilde_1366] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_tilde_1367] = "OcamlLexer.tilde ::= `~. ";
		artLabelStrings[ART_L_OcamlLexer_tilde_1367] = "";
		lhsL[ART_L_OcamlLexer_tilde_1367] = ART_L_OcamlLexer_tilde;
		artKindOfs[ART_L_OcamlLexer_tilde_1367] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_tilde_1367] = true;
		eoR_pL[ART_L_OcamlLexer_tilde_1367] = true;
		popD[ART_L_OcamlLexer_tilde_1367] = true;
	}

	public void artTableInitialiser_223() {
		artLabelInternalStrings[ART_L_OcamlLexer_to] = "OcamlLexer.to ";
		artLabelStrings[ART_L_OcamlLexer_to] = "to";
		artKindOfs[ART_L_OcamlLexer_to] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_to_1025] = "OcamlLexer.to ::= . `t`o";
		artLabelStrings[ART_L_OcamlLexer_to_1025] = "";
		lhsL[ART_L_OcamlLexer_to_1025] = ART_L_OcamlLexer_to;
		artKindOfs[ART_L_OcamlLexer_to_1025] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_to_1025] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_to_1026] = "OcamlLexer.to ::= `t`o";
		artLabelStrings[ART_L_OcamlLexer_to_1026] = "";
		lhsL[ART_L_OcamlLexer_to_1026] = ART_L_OcamlLexer_to;
		popD[ART_L_OcamlLexer_to_1026] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_to_1027] = "OcamlLexer.to ::= `t. `o";
		artLabelStrings[ART_L_OcamlLexer_to_1027] = "";
		lhsL[ART_L_OcamlLexer_to_1027] = ART_L_OcamlLexer_to;
		artKindOfs[ART_L_OcamlLexer_to_1027] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_to_1027] = true;
		popD[ART_L_OcamlLexer_to_1027] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_to_1028] = "OcamlLexer.to ::= `t`o";
		artLabelStrings[ART_L_OcamlLexer_to_1028] = "";
		lhsL[ART_L_OcamlLexer_to_1028] = ART_L_OcamlLexer_to;
		popD[ART_L_OcamlLexer_to_1028] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_to_1029] = "OcamlLexer.to ::= `t`o. ";
		artLabelStrings[ART_L_OcamlLexer_to_1029] = "";
		lhsL[ART_L_OcamlLexer_to_1029] = ART_L_OcamlLexer_to;
		artKindOfs[ART_L_OcamlLexer_to_1029] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_to_1029] = true;
		eoR_pL[ART_L_OcamlLexer_to_1029] = true;
		popD[ART_L_OcamlLexer_to_1029] = true;
	}

	public void artTableInitialiser_224() {
		artLabelInternalStrings[ART_L_OcamlLexer_true] = "OcamlLexer.true ";
		artLabelStrings[ART_L_OcamlLexer_true] = "true";
		artKindOfs[ART_L_OcamlLexer_true] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1032] = "OcamlLexer.true ::= . `t`r`u`e";
		artLabelStrings[ART_L_OcamlLexer_true_1032] = "";
		lhsL[ART_L_OcamlLexer_true_1032] = ART_L_OcamlLexer_true;
		artKindOfs[ART_L_OcamlLexer_true_1032] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_true_1032] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1033] = "OcamlLexer.true ::= `t`r`u`e";
		artLabelStrings[ART_L_OcamlLexer_true_1033] = "";
		lhsL[ART_L_OcamlLexer_true_1033] = ART_L_OcamlLexer_true;
		popD[ART_L_OcamlLexer_true_1033] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1034] = "OcamlLexer.true ::= `t. `r`u`e";
		artLabelStrings[ART_L_OcamlLexer_true_1034] = "";
		lhsL[ART_L_OcamlLexer_true_1034] = ART_L_OcamlLexer_true;
		artKindOfs[ART_L_OcamlLexer_true_1034] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_true_1034] = true;
		popD[ART_L_OcamlLexer_true_1034] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1035] = "OcamlLexer.true ::= `t`r`u`e";
		artLabelStrings[ART_L_OcamlLexer_true_1035] = "";
		lhsL[ART_L_OcamlLexer_true_1035] = ART_L_OcamlLexer_true;
		popD[ART_L_OcamlLexer_true_1035] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1036] = "OcamlLexer.true ::= `t`r. `u`e";
		artLabelStrings[ART_L_OcamlLexer_true_1036] = "";
		lhsL[ART_L_OcamlLexer_true_1036] = ART_L_OcamlLexer_true;
		artKindOfs[ART_L_OcamlLexer_true_1036] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_true_1036] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1037] = "OcamlLexer.true ::= `t`r`u`e";
		artLabelStrings[ART_L_OcamlLexer_true_1037] = "";
		lhsL[ART_L_OcamlLexer_true_1037] = ART_L_OcamlLexer_true;
		popD[ART_L_OcamlLexer_true_1037] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1038] = "OcamlLexer.true ::= `t`r`u. `e";
		artLabelStrings[ART_L_OcamlLexer_true_1038] = "";
		lhsL[ART_L_OcamlLexer_true_1038] = ART_L_OcamlLexer_true;
		artKindOfs[ART_L_OcamlLexer_true_1038] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_true_1038] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1039] = "OcamlLexer.true ::= `t`r`u`e";
		artLabelStrings[ART_L_OcamlLexer_true_1039] = "";
		lhsL[ART_L_OcamlLexer_true_1039] = ART_L_OcamlLexer_true;
		popD[ART_L_OcamlLexer_true_1039] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_true_1040] = "OcamlLexer.true ::= `t`r`u`e. ";
		artLabelStrings[ART_L_OcamlLexer_true_1040] = "";
		lhsL[ART_L_OcamlLexer_true_1040] = ART_L_OcamlLexer_true;
		artKindOfs[ART_L_OcamlLexer_true_1040] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_true_1040] = true;
		eoR_pL[ART_L_OcamlLexer_true_1040] = true;
		popD[ART_L_OcamlLexer_true_1040] = true;
	}

	public void artTableInitialiser_225() {
		artLabelInternalStrings[ART_L_OcamlLexer_try] = "OcamlLexer.try ";
		artLabelStrings[ART_L_OcamlLexer_try] = "try";
		artKindOfs[ART_L_OcamlLexer_try] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_try_1043] = "OcamlLexer.try ::= . `t`r`y";
		artLabelStrings[ART_L_OcamlLexer_try_1043] = "";
		lhsL[ART_L_OcamlLexer_try_1043] = ART_L_OcamlLexer_try;
		artKindOfs[ART_L_OcamlLexer_try_1043] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_try_1043] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_try_1044] = "OcamlLexer.try ::= `t`r`y";
		artLabelStrings[ART_L_OcamlLexer_try_1044] = "";
		lhsL[ART_L_OcamlLexer_try_1044] = ART_L_OcamlLexer_try;
		popD[ART_L_OcamlLexer_try_1044] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_try_1045] = "OcamlLexer.try ::= `t. `r`y";
		artLabelStrings[ART_L_OcamlLexer_try_1045] = "";
		lhsL[ART_L_OcamlLexer_try_1045] = ART_L_OcamlLexer_try;
		artKindOfs[ART_L_OcamlLexer_try_1045] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_try_1045] = true;
		popD[ART_L_OcamlLexer_try_1045] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_try_1046] = "OcamlLexer.try ::= `t`r`y";
		artLabelStrings[ART_L_OcamlLexer_try_1046] = "";
		lhsL[ART_L_OcamlLexer_try_1046] = ART_L_OcamlLexer_try;
		popD[ART_L_OcamlLexer_try_1046] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_try_1047] = "OcamlLexer.try ::= `t`r. `y";
		artLabelStrings[ART_L_OcamlLexer_try_1047] = "";
		lhsL[ART_L_OcamlLexer_try_1047] = ART_L_OcamlLexer_try;
		artKindOfs[ART_L_OcamlLexer_try_1047] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_try_1047] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_try_1048] = "OcamlLexer.try ::= `t`r`y";
		artLabelStrings[ART_L_OcamlLexer_try_1048] = "";
		lhsL[ART_L_OcamlLexer_try_1048] = ART_L_OcamlLexer_try;
		popD[ART_L_OcamlLexer_try_1048] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_try_1049] = "OcamlLexer.try ::= `t`r`y. ";
		artLabelStrings[ART_L_OcamlLexer_try_1049] = "";
		lhsL[ART_L_OcamlLexer_try_1049] = ART_L_OcamlLexer_try;
		artKindOfs[ART_L_OcamlLexer_try_1049] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_try_1049] = true;
		eoR_pL[ART_L_OcamlLexer_try_1049] = true;
		popD[ART_L_OcamlLexer_try_1049] = true;
	}

	public void artTableInitialiser_226() {
		artLabelInternalStrings[ART_L_OcamlLexer_type] = "OcamlLexer.type ";
		artLabelStrings[ART_L_OcamlLexer_type] = "type";
		artKindOfs[ART_L_OcamlLexer_type] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1052] = "OcamlLexer.type ::= . `t`y`p`e";
		artLabelStrings[ART_L_OcamlLexer_type_1052] = "";
		lhsL[ART_L_OcamlLexer_type_1052] = ART_L_OcamlLexer_type;
		artKindOfs[ART_L_OcamlLexer_type_1052] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_type_1052] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1053] = "OcamlLexer.type ::= `t`y`p`e";
		artLabelStrings[ART_L_OcamlLexer_type_1053] = "";
		lhsL[ART_L_OcamlLexer_type_1053] = ART_L_OcamlLexer_type;
		popD[ART_L_OcamlLexer_type_1053] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1054] = "OcamlLexer.type ::= `t. `y`p`e";
		artLabelStrings[ART_L_OcamlLexer_type_1054] = "";
		lhsL[ART_L_OcamlLexer_type_1054] = ART_L_OcamlLexer_type;
		artKindOfs[ART_L_OcamlLexer_type_1054] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_type_1054] = true;
		popD[ART_L_OcamlLexer_type_1054] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1055] = "OcamlLexer.type ::= `t`y`p`e";
		artLabelStrings[ART_L_OcamlLexer_type_1055] = "";
		lhsL[ART_L_OcamlLexer_type_1055] = ART_L_OcamlLexer_type;
		popD[ART_L_OcamlLexer_type_1055] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1056] = "OcamlLexer.type ::= `t`y. `p`e";
		artLabelStrings[ART_L_OcamlLexer_type_1056] = "";
		lhsL[ART_L_OcamlLexer_type_1056] = ART_L_OcamlLexer_type;
		artKindOfs[ART_L_OcamlLexer_type_1056] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_type_1056] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1057] = "OcamlLexer.type ::= `t`y`p`e";
		artLabelStrings[ART_L_OcamlLexer_type_1057] = "";
		lhsL[ART_L_OcamlLexer_type_1057] = ART_L_OcamlLexer_type;
		popD[ART_L_OcamlLexer_type_1057] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1058] = "OcamlLexer.type ::= `t`y`p. `e";
		artLabelStrings[ART_L_OcamlLexer_type_1058] = "";
		lhsL[ART_L_OcamlLexer_type_1058] = ART_L_OcamlLexer_type;
		artKindOfs[ART_L_OcamlLexer_type_1058] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_type_1058] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1059] = "OcamlLexer.type ::= `t`y`p`e";
		artLabelStrings[ART_L_OcamlLexer_type_1059] = "";
		lhsL[ART_L_OcamlLexer_type_1059] = ART_L_OcamlLexer_type;
		popD[ART_L_OcamlLexer_type_1059] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_type_1060] = "OcamlLexer.type ::= `t`y`p`e. ";
		artLabelStrings[ART_L_OcamlLexer_type_1060] = "";
		lhsL[ART_L_OcamlLexer_type_1060] = ART_L_OcamlLexer_type;
		artKindOfs[ART_L_OcamlLexer_type_1060] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_type_1060] = true;
		eoR_pL[ART_L_OcamlLexer_type_1060] = true;
		popD[ART_L_OcamlLexer_type_1060] = true;
	}

	public void artTableInitialiser_227() {
		artLabelInternalStrings[ART_L_OcamlLexer_underscore] = "OcamlLexer.underscore ";
		artLabelStrings[ART_L_OcamlLexer_underscore] = "underscore";
		artKindOfs[ART_L_OcamlLexer_underscore] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_underscore_1319] = "OcamlLexer.underscore ::= . `_";
		artLabelStrings[ART_L_OcamlLexer_underscore_1319] = "";
		lhsL[ART_L_OcamlLexer_underscore_1319] = ART_L_OcamlLexer_underscore;
		artKindOfs[ART_L_OcamlLexer_underscore_1319] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_underscore_1319] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_underscore_1320] = "OcamlLexer.underscore ::= `_";
		artLabelStrings[ART_L_OcamlLexer_underscore_1320] = "";
		lhsL[ART_L_OcamlLexer_underscore_1320] = ART_L_OcamlLexer_underscore;
		popD[ART_L_OcamlLexer_underscore_1320] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_underscore_1321] = "OcamlLexer.underscore ::= `_. ";
		artLabelStrings[ART_L_OcamlLexer_underscore_1321] = "";
		lhsL[ART_L_OcamlLexer_underscore_1321] = ART_L_OcamlLexer_underscore;
		artKindOfs[ART_L_OcamlLexer_underscore_1321] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_underscore_1321] = true;
		eoR_pL[ART_L_OcamlLexer_underscore_1321] = true;
		popD[ART_L_OcamlLexer_underscore_1321] = true;
	}

	public void artTableInitialiser_228() {
		artLabelInternalStrings[ART_L_OcamlLexer_val] = "OcamlLexer.val ";
		artLabelStrings[ART_L_OcamlLexer_val] = "val";
		artKindOfs[ART_L_OcamlLexer_val] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_val_1063] = "OcamlLexer.val ::= . `v`a`l";
		artLabelStrings[ART_L_OcamlLexer_val_1063] = "";
		lhsL[ART_L_OcamlLexer_val_1063] = ART_L_OcamlLexer_val;
		artKindOfs[ART_L_OcamlLexer_val_1063] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_val_1063] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_val_1064] = "OcamlLexer.val ::= `v`a`l";
		artLabelStrings[ART_L_OcamlLexer_val_1064] = "";
		lhsL[ART_L_OcamlLexer_val_1064] = ART_L_OcamlLexer_val;
		popD[ART_L_OcamlLexer_val_1064] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_val_1065] = "OcamlLexer.val ::= `v. `a`l";
		artLabelStrings[ART_L_OcamlLexer_val_1065] = "";
		lhsL[ART_L_OcamlLexer_val_1065] = ART_L_OcamlLexer_val;
		artKindOfs[ART_L_OcamlLexer_val_1065] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_val_1065] = true;
		popD[ART_L_OcamlLexer_val_1065] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_val_1066] = "OcamlLexer.val ::= `v`a`l";
		artLabelStrings[ART_L_OcamlLexer_val_1066] = "";
		lhsL[ART_L_OcamlLexer_val_1066] = ART_L_OcamlLexer_val;
		popD[ART_L_OcamlLexer_val_1066] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_val_1067] = "OcamlLexer.val ::= `v`a. `l";
		artLabelStrings[ART_L_OcamlLexer_val_1067] = "";
		lhsL[ART_L_OcamlLexer_val_1067] = ART_L_OcamlLexer_val;
		artKindOfs[ART_L_OcamlLexer_val_1067] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_val_1067] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_val_1068] = "OcamlLexer.val ::= `v`a`l";
		artLabelStrings[ART_L_OcamlLexer_val_1068] = "";
		lhsL[ART_L_OcamlLexer_val_1068] = ART_L_OcamlLexer_val;
		popD[ART_L_OcamlLexer_val_1068] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_val_1069] = "OcamlLexer.val ::= `v`a`l. ";
		artLabelStrings[ART_L_OcamlLexer_val_1069] = "";
		lhsL[ART_L_OcamlLexer_val_1069] = ART_L_OcamlLexer_val;
		artKindOfs[ART_L_OcamlLexer_val_1069] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_val_1069] = true;
		eoR_pL[ART_L_OcamlLexer_val_1069] = true;
		popD[ART_L_OcamlLexer_val_1069] = true;
	}

	public void artTableInitialiser_229() {
		artLabelInternalStrings[ART_L_OcamlLexer_virtual] = "OcamlLexer.virtual ";
		artLabelStrings[ART_L_OcamlLexer_virtual] = "virtual";
		artKindOfs[ART_L_OcamlLexer_virtual] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1072] = "OcamlLexer.virtual ::= . `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1072] = "";
		lhsL[ART_L_OcamlLexer_virtual_1072] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1072] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_virtual_1072] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1073] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1073] = "";
		lhsL[ART_L_OcamlLexer_virtual_1073] = ART_L_OcamlLexer_virtual;
		popD[ART_L_OcamlLexer_virtual_1073] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1074] = "OcamlLexer.virtual ::= `v. `i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1074] = "";
		lhsL[ART_L_OcamlLexer_virtual_1074] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1074] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_virtual_1074] = true;
		popD[ART_L_OcamlLexer_virtual_1074] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1075] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1075] = "";
		lhsL[ART_L_OcamlLexer_virtual_1075] = ART_L_OcamlLexer_virtual;
		popD[ART_L_OcamlLexer_virtual_1075] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1076] = "OcamlLexer.virtual ::= `v`i. `r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1076] = "";
		lhsL[ART_L_OcamlLexer_virtual_1076] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1076] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_virtual_1076] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1077] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1077] = "";
		lhsL[ART_L_OcamlLexer_virtual_1077] = ART_L_OcamlLexer_virtual;
		popD[ART_L_OcamlLexer_virtual_1077] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1078] = "OcamlLexer.virtual ::= `v`i`r. `t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1078] = "";
		lhsL[ART_L_OcamlLexer_virtual_1078] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1078] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_virtual_1078] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1079] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1079] = "";
		lhsL[ART_L_OcamlLexer_virtual_1079] = ART_L_OcamlLexer_virtual;
		popD[ART_L_OcamlLexer_virtual_1079] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1080] = "OcamlLexer.virtual ::= `v`i`r`t. `u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1080] = "";
		lhsL[ART_L_OcamlLexer_virtual_1080] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1080] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_virtual_1080] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1081] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1081] = "";
		lhsL[ART_L_OcamlLexer_virtual_1081] = ART_L_OcamlLexer_virtual;
		popD[ART_L_OcamlLexer_virtual_1081] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1082] = "OcamlLexer.virtual ::= `v`i`r`t`u. `a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1082] = "";
		lhsL[ART_L_OcamlLexer_virtual_1082] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1082] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_virtual_1082] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1083] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1083] = "";
		lhsL[ART_L_OcamlLexer_virtual_1083] = ART_L_OcamlLexer_virtual;
		popD[ART_L_OcamlLexer_virtual_1083] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1084] = "OcamlLexer.virtual ::= `v`i`r`t`u`a. `l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1084] = "";
		lhsL[ART_L_OcamlLexer_virtual_1084] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1084] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_virtual_1084] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1085] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l";
		artLabelStrings[ART_L_OcamlLexer_virtual_1085] = "";
		lhsL[ART_L_OcamlLexer_virtual_1085] = ART_L_OcamlLexer_virtual;
		popD[ART_L_OcamlLexer_virtual_1085] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_virtual_1086] = "OcamlLexer.virtual ::= `v`i`r`t`u`a`l. ";
		artLabelStrings[ART_L_OcamlLexer_virtual_1086] = "";
		lhsL[ART_L_OcamlLexer_virtual_1086] = ART_L_OcamlLexer_virtual;
		artKindOfs[ART_L_OcamlLexer_virtual_1086] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_virtual_1086] = true;
		eoR_pL[ART_L_OcamlLexer_virtual_1086] = true;
		popD[ART_L_OcamlLexer_virtual_1086] = true;
	}

	public void artTableInitialiser_230() {
		artLabelInternalStrings[ART_L_OcamlLexer_when] = "OcamlLexer.when ";
		artLabelStrings[ART_L_OcamlLexer_when] = "when";
		artKindOfs[ART_L_OcamlLexer_when] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1089] = "OcamlLexer.when ::= . `w`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_when_1089] = "";
		lhsL[ART_L_OcamlLexer_when_1089] = ART_L_OcamlLexer_when;
		artKindOfs[ART_L_OcamlLexer_when_1089] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_when_1089] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1090] = "OcamlLexer.when ::= `w`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_when_1090] = "";
		lhsL[ART_L_OcamlLexer_when_1090] = ART_L_OcamlLexer_when;
		popD[ART_L_OcamlLexer_when_1090] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1091] = "OcamlLexer.when ::= `w. `h`e`n";
		artLabelStrings[ART_L_OcamlLexer_when_1091] = "";
		lhsL[ART_L_OcamlLexer_when_1091] = ART_L_OcamlLexer_when;
		artKindOfs[ART_L_OcamlLexer_when_1091] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_when_1091] = true;
		popD[ART_L_OcamlLexer_when_1091] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1092] = "OcamlLexer.when ::= `w`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_when_1092] = "";
		lhsL[ART_L_OcamlLexer_when_1092] = ART_L_OcamlLexer_when;
		popD[ART_L_OcamlLexer_when_1092] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1093] = "OcamlLexer.when ::= `w`h. `e`n";
		artLabelStrings[ART_L_OcamlLexer_when_1093] = "";
		lhsL[ART_L_OcamlLexer_when_1093] = ART_L_OcamlLexer_when;
		artKindOfs[ART_L_OcamlLexer_when_1093] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_when_1093] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1094] = "OcamlLexer.when ::= `w`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_when_1094] = "";
		lhsL[ART_L_OcamlLexer_when_1094] = ART_L_OcamlLexer_when;
		popD[ART_L_OcamlLexer_when_1094] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1095] = "OcamlLexer.when ::= `w`h`e. `n";
		artLabelStrings[ART_L_OcamlLexer_when_1095] = "";
		lhsL[ART_L_OcamlLexer_when_1095] = ART_L_OcamlLexer_when;
		artKindOfs[ART_L_OcamlLexer_when_1095] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_when_1095] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1096] = "OcamlLexer.when ::= `w`h`e`n";
		artLabelStrings[ART_L_OcamlLexer_when_1096] = "";
		lhsL[ART_L_OcamlLexer_when_1096] = ART_L_OcamlLexer_when;
		popD[ART_L_OcamlLexer_when_1096] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_when_1097] = "OcamlLexer.when ::= `w`h`e`n. ";
		artLabelStrings[ART_L_OcamlLexer_when_1097] = "";
		lhsL[ART_L_OcamlLexer_when_1097] = ART_L_OcamlLexer_when;
		artKindOfs[ART_L_OcamlLexer_when_1097] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_when_1097] = true;
		eoR_pL[ART_L_OcamlLexer_when_1097] = true;
		popD[ART_L_OcamlLexer_when_1097] = true;
	}

	public void artTableInitialiser_231() {
		artLabelInternalStrings[ART_L_OcamlLexer_while] = "OcamlLexer.while ";
		artLabelStrings[ART_L_OcamlLexer_while] = "while";
		artKindOfs[ART_L_OcamlLexer_while] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1100] = "OcamlLexer.while ::= . `w`h`i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1100] = "";
		lhsL[ART_L_OcamlLexer_while_1100] = ART_L_OcamlLexer_while;
		artKindOfs[ART_L_OcamlLexer_while_1100] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_while_1100] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1101] = "OcamlLexer.while ::= `w`h`i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1101] = "";
		lhsL[ART_L_OcamlLexer_while_1101] = ART_L_OcamlLexer_while;
		popD[ART_L_OcamlLexer_while_1101] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1102] = "OcamlLexer.while ::= `w. `h`i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1102] = "";
		lhsL[ART_L_OcamlLexer_while_1102] = ART_L_OcamlLexer_while;
		artKindOfs[ART_L_OcamlLexer_while_1102] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_while_1102] = true;
		popD[ART_L_OcamlLexer_while_1102] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1103] = "OcamlLexer.while ::= `w`h`i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1103] = "";
		lhsL[ART_L_OcamlLexer_while_1103] = ART_L_OcamlLexer_while;
		popD[ART_L_OcamlLexer_while_1103] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1104] = "OcamlLexer.while ::= `w`h. `i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1104] = "";
		lhsL[ART_L_OcamlLexer_while_1104] = ART_L_OcamlLexer_while;
		artKindOfs[ART_L_OcamlLexer_while_1104] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_while_1104] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1105] = "OcamlLexer.while ::= `w`h`i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1105] = "";
		lhsL[ART_L_OcamlLexer_while_1105] = ART_L_OcamlLexer_while;
		popD[ART_L_OcamlLexer_while_1105] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1106] = "OcamlLexer.while ::= `w`h`i. `l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1106] = "";
		lhsL[ART_L_OcamlLexer_while_1106] = ART_L_OcamlLexer_while;
		artKindOfs[ART_L_OcamlLexer_while_1106] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_while_1106] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1107] = "OcamlLexer.while ::= `w`h`i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1107] = "";
		lhsL[ART_L_OcamlLexer_while_1107] = ART_L_OcamlLexer_while;
		popD[ART_L_OcamlLexer_while_1107] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1108] = "OcamlLexer.while ::= `w`h`i`l. `e";
		artLabelStrings[ART_L_OcamlLexer_while_1108] = "";
		lhsL[ART_L_OcamlLexer_while_1108] = ART_L_OcamlLexer_while;
		artKindOfs[ART_L_OcamlLexer_while_1108] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_while_1108] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1109] = "OcamlLexer.while ::= `w`h`i`l`e";
		artLabelStrings[ART_L_OcamlLexer_while_1109] = "";
		lhsL[ART_L_OcamlLexer_while_1109] = ART_L_OcamlLexer_while;
		popD[ART_L_OcamlLexer_while_1109] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_while_1110] = "OcamlLexer.while ::= `w`h`i`l`e. ";
		artLabelStrings[ART_L_OcamlLexer_while_1110] = "";
		lhsL[ART_L_OcamlLexer_while_1110] = ART_L_OcamlLexer_while;
		artKindOfs[ART_L_OcamlLexer_while_1110] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_while_1110] = true;
		eoR_pL[ART_L_OcamlLexer_while_1110] = true;
		popD[ART_L_OcamlLexer_while_1110] = true;
	}

	public void artTableInitialiser_232() {
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace] = "OcamlLexer.whitespace ";
		artLabelStrings[ART_L_OcamlLexer_whitespace] = "whitespace";
		artKindOfs[ART_L_OcamlLexer_whitespace] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1892] = "OcamlLexer.whitespace ::= . ` ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1892] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1892] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1892] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_whitespace_1892] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1893] = "OcamlLexer.whitespace ::= ` ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1893] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1893] = ART_L_OcamlLexer_whitespace;
		popD[ART_L_OcamlLexer_whitespace_1893] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1894] = "OcamlLexer.whitespace ::= ` . ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1894] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1894] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1894] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_whitespace_1894] = true;
		eoR_pL[ART_L_OcamlLexer_whitespace_1894] = true;
		popD[ART_L_OcamlLexer_whitespace_1894] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1896] = "OcamlLexer.whitespace ::= . `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1896] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1896] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1896] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_whitespace_1896] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1897] = "OcamlLexer.whitespace ::= `\\\\t";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1897] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1897] = ART_L_OcamlLexer_whitespace;
		popD[ART_L_OcamlLexer_whitespace_1897] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1898] = "OcamlLexer.whitespace ::= `\\\\t. ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1898] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1898] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1898] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_whitespace_1898] = true;
		eoR_pL[ART_L_OcamlLexer_whitespace_1898] = true;
		popD[ART_L_OcamlLexer_whitespace_1898] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1900] = "OcamlLexer.whitespace ::= . `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1900] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1900] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1900] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_whitespace_1900] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1901] = "OcamlLexer.whitespace ::= `\\\\013";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1901] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1901] = ART_L_OcamlLexer_whitespace;
		popD[ART_L_OcamlLexer_whitespace_1901] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1902] = "OcamlLexer.whitespace ::= `\\\\013. ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1902] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1902] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1902] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_whitespace_1902] = true;
		eoR_pL[ART_L_OcamlLexer_whitespace_1902] = true;
		popD[ART_L_OcamlLexer_whitespace_1902] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1904] = "OcamlLexer.whitespace ::= . `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1904] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1904] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1904] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_whitespace_1904] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1905] = "OcamlLexer.whitespace ::= `\\\\014";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1905] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1905] = ART_L_OcamlLexer_whitespace;
		popD[ART_L_OcamlLexer_whitespace_1905] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1906] = "OcamlLexer.whitespace ::= `\\\\014. ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1906] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1906] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1906] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_whitespace_1906] = true;
		eoR_pL[ART_L_OcamlLexer_whitespace_1906] = true;
		popD[ART_L_OcamlLexer_whitespace_1906] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1908] = "OcamlLexer.whitespace ::= . `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1908] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1908] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1908] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_whitespace_1908] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1909] = "OcamlLexer.whitespace ::= `\\\\r";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1909] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1909] = ART_L_OcamlLexer_whitespace;
		popD[ART_L_OcamlLexer_whitespace_1909] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1910] = "OcamlLexer.whitespace ::= `\\\\r. ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1910] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1910] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1910] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_whitespace_1910] = true;
		eoR_pL[ART_L_OcamlLexer_whitespace_1910] = true;
		popD[ART_L_OcamlLexer_whitespace_1910] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1912] = "OcamlLexer.whitespace ::= . `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1912] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1912] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1912] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_whitespace_1912] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1913] = "OcamlLexer.whitespace ::= `\\\\n";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1913] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1913] = ART_L_OcamlLexer_whitespace;
		popD[ART_L_OcamlLexer_whitespace_1913] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_whitespace_1914] = "OcamlLexer.whitespace ::= `\\\\n. ";
		artLabelStrings[ART_L_OcamlLexer_whitespace_1914] = "";
		lhsL[ART_L_OcamlLexer_whitespace_1914] = ART_L_OcamlLexer_whitespace;
		artKindOfs[ART_L_OcamlLexer_whitespace_1914] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_whitespace_1914] = true;
		eoR_pL[ART_L_OcamlLexer_whitespace_1914] = true;
		popD[ART_L_OcamlLexer_whitespace_1914] = true;
	}

	public void artTableInitialiser_233() {
		artLabelInternalStrings[ART_L_OcamlLexer_with] = "OcamlLexer.with ";
		artLabelStrings[ART_L_OcamlLexer_with] = "with";
		artKindOfs[ART_L_OcamlLexer_with] = ART_K_NONTERMINAL;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1113] = "OcamlLexer.with ::= . `w`i`t`h";
		artLabelStrings[ART_L_OcamlLexer_with_1113] = "";
		lhsL[ART_L_OcamlLexer_with_1113] = ART_L_OcamlLexer_with;
		artKindOfs[ART_L_OcamlLexer_with_1113] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_with_1113] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1114] = "OcamlLexer.with ::= `w`i`t`h";
		artLabelStrings[ART_L_OcamlLexer_with_1114] = "";
		lhsL[ART_L_OcamlLexer_with_1114] = ART_L_OcamlLexer_with;
		popD[ART_L_OcamlLexer_with_1114] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1115] = "OcamlLexer.with ::= `w. `i`t`h";
		artLabelStrings[ART_L_OcamlLexer_with_1115] = "";
		lhsL[ART_L_OcamlLexer_with_1115] = ART_L_OcamlLexer_with;
		artKindOfs[ART_L_OcamlLexer_with_1115] = ART_K_INTERMEDIATE;
		fiRL[ART_L_OcamlLexer_with_1115] = true;
		popD[ART_L_OcamlLexer_with_1115] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1116] = "OcamlLexer.with ::= `w`i`t`h";
		artLabelStrings[ART_L_OcamlLexer_with_1116] = "";
		lhsL[ART_L_OcamlLexer_with_1116] = ART_L_OcamlLexer_with;
		popD[ART_L_OcamlLexer_with_1116] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1117] = "OcamlLexer.with ::= `w`i. `t`h";
		artLabelStrings[ART_L_OcamlLexer_with_1117] = "";
		lhsL[ART_L_OcamlLexer_with_1117] = ART_L_OcamlLexer_with;
		artKindOfs[ART_L_OcamlLexer_with_1117] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_with_1117] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1118] = "OcamlLexer.with ::= `w`i`t`h";
		artLabelStrings[ART_L_OcamlLexer_with_1118] = "";
		lhsL[ART_L_OcamlLexer_with_1118] = ART_L_OcamlLexer_with;
		popD[ART_L_OcamlLexer_with_1118] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1119] = "OcamlLexer.with ::= `w`i`t. `h";
		artLabelStrings[ART_L_OcamlLexer_with_1119] = "";
		lhsL[ART_L_OcamlLexer_with_1119] = ART_L_OcamlLexer_with;
		artKindOfs[ART_L_OcamlLexer_with_1119] = ART_K_INTERMEDIATE;
		popD[ART_L_OcamlLexer_with_1119] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1120] = "OcamlLexer.with ::= `w`i`t`h";
		artLabelStrings[ART_L_OcamlLexer_with_1120] = "";
		lhsL[ART_L_OcamlLexer_with_1120] = ART_L_OcamlLexer_with;
		popD[ART_L_OcamlLexer_with_1120] = true;
		artLabelInternalStrings[ART_L_OcamlLexer_with_1121] = "OcamlLexer.with ::= `w`i`t`h. ";
		artLabelStrings[ART_L_OcamlLexer_with_1121] = "";
		lhsL[ART_L_OcamlLexer_with_1121] = ART_L_OcamlLexer_with;
		artKindOfs[ART_L_OcamlLexer_with_1121] = ART_K_INTERMEDIATE;
		eoRL[ART_L_OcamlLexer_with_1121] = true;
		eoR_pL[ART_L_OcamlLexer_with_1121] = true;
		popD[ART_L_OcamlLexer_with_1121] = true;
	}

	public void artTableInitialise() {
		artLabelInternalStrings = new String[ART_X_LABEL_EXTENT + 1];
		artLabelStrings = new String[ART_X_LABEL_EXTENT + 1];
		artLabelInternalStrings[ART_L_EOS] = "ART__$";
		artLabelStrings[ART_L_EOS] = " EOS $";
		artLabelInternalStrings[ART_X_DESPATCH] = "ART_X_DESPATCH";
		artLabelStrings[ART_X_DESPATCH] = " DESPATCH";
		artLabelInternalStrings[ART_L_DUMMY] = "ART_L_DUMMY";
		artLabelStrings[ART_L_DUMMY] = " DUMMY";
		artLabelInternalStrings[ART_X_LABEL_EXTENT] = "!!ILLEGAL!!";
		artLabelStrings[ART_X_LABEL_EXTENT] = " ILLEGAL";
		artLabelStrings[ART_L_EPSILON] = "#";
		artLabelInternalStrings[ART_L_EPSILON] = "#";

		artAnnotations = new String[ART_X_LABEL_EXTENT];
		setStringArray(artAnnotations, 0, ART_X_LABEL_EXTENT, null);

		artPreSlots = new int[ART_X_LABEL_EXTENT];
		setIntArray(artPreSlots, 0, ART_X_LABEL_EXTENT);

		artPostSlots = new int[ART_X_LABEL_EXTENT];
		setIntArray(artPostSlots, 0, ART_X_LABEL_EXTENT);

		artInstanceOfs = new int[ART_X_LABEL_EXTENT];
		setIntArray(artInstanceOfs, 0, ART_X_LABEL_EXTENT);

		artSlotInstanceOfs = new int[ART_X_LABEL_EXTENT];
		setIntArray(artSlotInstanceOfs, 0, ART_X_LABEL_EXTENT);

		artKindOfs = new int[ART_X_LABEL_EXTENT + 1];
		artKindOfs[ART_L_EOS] = ART_K_EOS;
		artKindOfs[ART_L_EPSILON] = ART_K_EPSILON;

		artUserNameOfs = new int[ART_X_LABEL_EXTENT + 1];

		artTerminalRequiresWhiteSpace = new boolean[ART_L_EPSILON];
		setBoolArray(artTerminalRequiresWhiteSpace, 0, ART_L_EPSILON, false);

		artTerminalCaseInsensitive = new boolean[ART_L_EPSILON];
		setBoolArray(artTerminalCaseInsensitive, 0, ART_L_EPSILON, false);

		artGathers = new int[ART_X_LABEL_EXTENT];
		setIntArray(artGathers, 0, ART_X_LABEL_EXTENT);

		artFolds = new int[ART_X_LABEL_EXTENT];
		setIntArray(artFolds, 0, ART_X_LABEL_EXTENT, 0);

		lhsL = new int[ART_X_LABEL_EXTENT];
		setIntArray(lhsL, 0, ART_X_LABEL_EXTENT);
		lhsL[ART_X_DESPATCH] = ART_X_DESPATCH;

		pL = new int[ART_X_LABEL_EXTENT];
		setIntArray(pL, 0, ART_X_LABEL_EXTENT);

		aL = new int[ART_X_LABEL_EXTENT];
		setIntArray(aL, 0, ART_X_LABEL_EXTENT);

		eoOPL = new boolean[ART_X_LABEL_EXTENT];
		setBoolArray(eoOPL, 0, ART_X_LABEL_EXTENT, false);

		fiRL = new boolean[ART_X_LABEL_EXTENT];
		setBoolArray(fiRL, 0, ART_X_LABEL_EXTENT, false);

		eoRL = new boolean[ART_X_LABEL_EXTENT];
		setBoolArray(eoRL, 0, ART_X_LABEL_EXTENT, false);

		eoR_pL = new boolean[ART_X_LABEL_EXTENT];
		setBoolArray(eoR_pL, 0, ART_X_LABEL_EXTENT, false);

		popD = new boolean[ART_X_LABEL_EXTENT];
		setBoolArray(popD, 0, ART_X_LABEL_EXTENT, false);

		artLabelStrings[ART_TC_] = "";
		artLabelInternalStrings[ART_TC_] = "`";
		artKindOfs[ART_TC_] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__BEL] = "\007";
		artLabelInternalStrings[ART_TC__BEL] = "`\\\\007";
		artKindOfs[ART_TC__BEL] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__BS] = "\010";
		artLabelInternalStrings[ART_TC__BS] = "`\\\\010";
		artKindOfs[ART_TC__BS] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__HT] = "\t";
		artLabelInternalStrings[ART_TC__HT] = "`\\\\t";
		artKindOfs[ART_TC__HT] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__LF] = "\n";
		artLabelInternalStrings[ART_TC__LF] = "`\\\\n";
		artKindOfs[ART_TC__LF] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__VT] = "\013";
		artLabelInternalStrings[ART_TC__VT] = "`\\\\013";
		artKindOfs[ART_TC__VT] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__FF] = "\014";
		artLabelInternalStrings[ART_TC__FF] = "`\\\\014";
		artKindOfs[ART_TC__FF] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__CR] = "\r";
		artLabelInternalStrings[ART_TC__CR] = "`\\\\r";
		artKindOfs[ART_TC__CR] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__SPACE] = " ";
		artLabelInternalStrings[ART_TC__SPACE] = "` ";
		artKindOfs[ART_TC__SPACE] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__SHREIK] = "!";
		artLabelInternalStrings[ART_TC__SHREIK] = "`!";
		artKindOfs[ART_TC__SHREIK] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__DBLQUOTE] = "\"";
		artLabelInternalStrings[ART_TC__DBLQUOTE] = "`\\\"";
		artKindOfs[ART_TC__DBLQUOTE] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__HASH] = "#";
		artLabelInternalStrings[ART_TC__HASH] = "`#";
		artKindOfs[ART_TC__HASH] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__DOLLAR] = "$";
		artLabelInternalStrings[ART_TC__DOLLAR] = "`$";
		artKindOfs[ART_TC__DOLLAR] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__PERCENT] = "%";
		artLabelInternalStrings[ART_TC__PERCENT] = "`%";
		artKindOfs[ART_TC__PERCENT] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__AMPERSAND] = "&";
		artLabelInternalStrings[ART_TC__AMPERSAND] = "`&";
		artKindOfs[ART_TC__AMPERSAND] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__QUOTE] = "'";
		artLabelInternalStrings[ART_TC__QUOTE] = "`\\\\'";
		artKindOfs[ART_TC__QUOTE] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__LPAR] = "(";
		artLabelInternalStrings[ART_TC__LPAR] = "`(";
		artKindOfs[ART_TC__LPAR] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__RPAR] = ")";
		artLabelInternalStrings[ART_TC__RPAR] = "`)";
		artKindOfs[ART_TC__RPAR] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__STAR] = "*";
		artLabelInternalStrings[ART_TC__STAR] = "`*";
		artKindOfs[ART_TC__STAR] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__PLUS] = "+";
		artLabelInternalStrings[ART_TC__PLUS] = "`+";
		artKindOfs[ART_TC__PLUS] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__COMMA] = ",";
		artLabelInternalStrings[ART_TC__COMMA] = "`,";
		artKindOfs[ART_TC__COMMA] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__MINUS] = "-";
		artLabelInternalStrings[ART_TC__MINUS] = "`-";
		artKindOfs[ART_TC__MINUS] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__PERIOD] = ".";
		artLabelInternalStrings[ART_TC__PERIOD] = "`.";
		artKindOfs[ART_TC__PERIOD] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__SLASH] = "/";
		artLabelInternalStrings[ART_TC__SLASH] = "`/";
		artKindOfs[ART_TC__SLASH] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_0] = "0";
		artLabelInternalStrings[ART_TC_0] = "`0";
		artKindOfs[ART_TC_0] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_1] = "1";
		artLabelInternalStrings[ART_TC_1] = "`1";
		artKindOfs[ART_TC_1] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_2] = "2";
		artLabelInternalStrings[ART_TC_2] = "`2";
		artKindOfs[ART_TC_2] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_3] = "3";
		artLabelInternalStrings[ART_TC_3] = "`3";
		artKindOfs[ART_TC_3] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_4] = "4";
		artLabelInternalStrings[ART_TC_4] = "`4";
		artKindOfs[ART_TC_4] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_5] = "5";
		artLabelInternalStrings[ART_TC_5] = "`5";
		artKindOfs[ART_TC_5] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_6] = "6";
		artLabelInternalStrings[ART_TC_6] = "`6";
		artKindOfs[ART_TC_6] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_7] = "7";
		artLabelInternalStrings[ART_TC_7] = "`7";
		artKindOfs[ART_TC_7] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_8] = "8";
		artLabelInternalStrings[ART_TC_8] = "`8";
		artKindOfs[ART_TC_8] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_9] = "9";
		artLabelInternalStrings[ART_TC_9] = "`9";
		artKindOfs[ART_TC_9] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__COLON] = ":";
		artLabelInternalStrings[ART_TC__COLON] = "`:";
		artKindOfs[ART_TC__COLON] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__SEMICOLON] = ";";
		artLabelInternalStrings[ART_TC__SEMICOLON] = "`;";
		artKindOfs[ART_TC__SEMICOLON] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__LT] = "<";
		artLabelInternalStrings[ART_TC__LT] = "`<";
		artKindOfs[ART_TC__LT] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__EQUAL] = "=";
		artLabelInternalStrings[ART_TC__EQUAL] = "`=";
		artKindOfs[ART_TC__EQUAL] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__GT] = ">";
		artLabelInternalStrings[ART_TC__GT] = "`>";
		artKindOfs[ART_TC__GT] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__QUERY] = "?";
		artLabelInternalStrings[ART_TC__QUERY] = "`?";
		artKindOfs[ART_TC__QUERY] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__AT] = "@";
		artLabelInternalStrings[ART_TC__AT] = "`@";
		artKindOfs[ART_TC__AT] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_A] = "A";
		artLabelInternalStrings[ART_TC_A] = "`A";
		artKindOfs[ART_TC_A] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_B] = "B";
		artLabelInternalStrings[ART_TC_B] = "`B";
		artKindOfs[ART_TC_B] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_C] = "C";
		artLabelInternalStrings[ART_TC_C] = "`C";
		artKindOfs[ART_TC_C] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_D] = "D";
		artLabelInternalStrings[ART_TC_D] = "`D";
		artKindOfs[ART_TC_D] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_E] = "E";
		artLabelInternalStrings[ART_TC_E] = "`E";
		artKindOfs[ART_TC_E] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_F] = "F";
		artLabelInternalStrings[ART_TC_F] = "`F";
		artKindOfs[ART_TC_F] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_G] = "G";
		artLabelInternalStrings[ART_TC_G] = "`G";
		artKindOfs[ART_TC_G] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_H] = "H";
		artLabelInternalStrings[ART_TC_H] = "`H";
		artKindOfs[ART_TC_H] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_I] = "I";
		artLabelInternalStrings[ART_TC_I] = "`I";
		artKindOfs[ART_TC_I] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_J] = "J";
		artLabelInternalStrings[ART_TC_J] = "`J";
		artKindOfs[ART_TC_J] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_K] = "K";
		artLabelInternalStrings[ART_TC_K] = "`K";
		artKindOfs[ART_TC_K] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_L] = "L";
		artLabelInternalStrings[ART_TC_L] = "`L";
		artKindOfs[ART_TC_L] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_M] = "M";
		artLabelInternalStrings[ART_TC_M] = "`M";
		artKindOfs[ART_TC_M] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_N] = "N";
		artLabelInternalStrings[ART_TC_N] = "`N";
		artKindOfs[ART_TC_N] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_O] = "O";
		artLabelInternalStrings[ART_TC_O] = "`O";
		artKindOfs[ART_TC_O] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_P] = "P";
		artLabelInternalStrings[ART_TC_P] = "`P";
		artKindOfs[ART_TC_P] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_Q] = "Q";
		artLabelInternalStrings[ART_TC_Q] = "`Q";
		artKindOfs[ART_TC_Q] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_R] = "R";
		artLabelInternalStrings[ART_TC_R] = "`R";
		artKindOfs[ART_TC_R] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_S] = "S";
		artLabelInternalStrings[ART_TC_S] = "`S";
		artKindOfs[ART_TC_S] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_T] = "T";
		artLabelInternalStrings[ART_TC_T] = "`T";
		artKindOfs[ART_TC_T] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_U] = "U";
		artLabelInternalStrings[ART_TC_U] = "`U";
		artKindOfs[ART_TC_U] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_V] = "V";
		artLabelInternalStrings[ART_TC_V] = "`V";
		artKindOfs[ART_TC_V] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_W] = "W";
		artLabelInternalStrings[ART_TC_W] = "`W";
		artKindOfs[ART_TC_W] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_X] = "X";
		artLabelInternalStrings[ART_TC_X] = "`X";
		artKindOfs[ART_TC_X] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_Y] = "Y";
		artLabelInternalStrings[ART_TC_Y] = "`Y";
		artKindOfs[ART_TC_Y] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_Z] = "Z";
		artLabelInternalStrings[ART_TC_Z] = "`Z";
		artKindOfs[ART_TC_Z] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__LBRACK] = "[";
		artLabelInternalStrings[ART_TC__LBRACK] = "`[";
		artKindOfs[ART_TC__LBRACK] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__BACKSLASH] = "\\";
		artLabelInternalStrings[ART_TC__BACKSLASH] = "`\\\\\\\\";
		artKindOfs[ART_TC__BACKSLASH] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__RBRACK] = "]";
		artLabelInternalStrings[ART_TC__RBRACK] = "`]";
		artKindOfs[ART_TC__RBRACK] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__UPARROW] = "^";
		artLabelInternalStrings[ART_TC__UPARROW] = "`^";
		artKindOfs[ART_TC__UPARROW] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__] = "_";
		artLabelInternalStrings[ART_TC__] = "`_";
		artKindOfs[ART_TC__] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__BACKQUOTE] = "`";
		artLabelInternalStrings[ART_TC__BACKQUOTE] = "`\\\\`";
		artKindOfs[ART_TC__BACKQUOTE] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_a] = "a";
		artLabelInternalStrings[ART_TC_a] = "`a";
		artKindOfs[ART_TC_a] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_b] = "b";
		artLabelInternalStrings[ART_TC_b] = "`b";
		artKindOfs[ART_TC_b] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_c] = "c";
		artLabelInternalStrings[ART_TC_c] = "`c";
		artKindOfs[ART_TC_c] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_d] = "d";
		artLabelInternalStrings[ART_TC_d] = "`d";
		artKindOfs[ART_TC_d] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_e] = "e";
		artLabelInternalStrings[ART_TC_e] = "`e";
		artKindOfs[ART_TC_e] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_f] = "f";
		artLabelInternalStrings[ART_TC_f] = "`f";
		artKindOfs[ART_TC_f] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_g] = "g";
		artLabelInternalStrings[ART_TC_g] = "`g";
		artKindOfs[ART_TC_g] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_h] = "h";
		artLabelInternalStrings[ART_TC_h] = "`h";
		artKindOfs[ART_TC_h] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_i] = "i";
		artLabelInternalStrings[ART_TC_i] = "`i";
		artKindOfs[ART_TC_i] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_j] = "j";
		artLabelInternalStrings[ART_TC_j] = "`j";
		artKindOfs[ART_TC_j] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_k] = "k";
		artLabelInternalStrings[ART_TC_k] = "`k";
		artKindOfs[ART_TC_k] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_l] = "l";
		artLabelInternalStrings[ART_TC_l] = "`l";
		artKindOfs[ART_TC_l] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_m] = "m";
		artLabelInternalStrings[ART_TC_m] = "`m";
		artKindOfs[ART_TC_m] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_n] = "n";
		artLabelInternalStrings[ART_TC_n] = "`n";
		artKindOfs[ART_TC_n] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_o] = "o";
		artLabelInternalStrings[ART_TC_o] = "`o";
		artKindOfs[ART_TC_o] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_p] = "p";
		artLabelInternalStrings[ART_TC_p] = "`p";
		artKindOfs[ART_TC_p] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_q] = "q";
		artLabelInternalStrings[ART_TC_q] = "`q";
		artKindOfs[ART_TC_q] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_r] = "r";
		artLabelInternalStrings[ART_TC_r] = "`r";
		artKindOfs[ART_TC_r] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_s] = "s";
		artLabelInternalStrings[ART_TC_s] = "`s";
		artKindOfs[ART_TC_s] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_t] = "t";
		artLabelInternalStrings[ART_TC_t] = "`t";
		artKindOfs[ART_TC_t] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_u] = "u";
		artLabelInternalStrings[ART_TC_u] = "`u";
		artKindOfs[ART_TC_u] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_v] = "v";
		artLabelInternalStrings[ART_TC_v] = "`v";
		artKindOfs[ART_TC_v] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_w] = "w";
		artLabelInternalStrings[ART_TC_w] = "`w";
		artKindOfs[ART_TC_w] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_x] = "x";
		artLabelInternalStrings[ART_TC_x] = "`x";
		artKindOfs[ART_TC_x] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_y] = "y";
		artLabelInternalStrings[ART_TC_y] = "`y";
		artKindOfs[ART_TC_y] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC_z] = "z";
		artLabelInternalStrings[ART_TC_z] = "`z";
		artKindOfs[ART_TC_z] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__LBRACE] = "{";
		artLabelInternalStrings[ART_TC__LBRACE] = "`{";
		artKindOfs[ART_TC__LBRACE] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__BAR] = "|";
		artLabelInternalStrings[ART_TC__BAR] = "`|";
		artKindOfs[ART_TC__BAR] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__RBRACE] = "}";
		artLabelInternalStrings[ART_TC__RBRACE] = "`}";
		artKindOfs[ART_TC__RBRACE] = ART_K_CHARACTER_TERMINAL;
		artLabelStrings[ART_TC__TILDE] = "~";
		artLabelInternalStrings[ART_TC__TILDE] = "`~";
		artKindOfs[ART_TC__TILDE] = ART_K_CHARACTER_TERMINAL;
		artTableInitialiser_105();
		artTableInitialiser_106();
		artTableInitialiser_107();
		artTableInitialiser_108();
		artTableInitialiser_109();
		artTableInitialiser_110();
		artTableInitialiser_111();
		artTableInitialiser_112();
		artTableInitialiser_113();
		artTableInitialiser_114();
		artTableInitialiser_115();
		artTableInitialiser_116();
		artTableInitialiser_117();
		artTableInitialiser_118();
		artTableInitialiser_119();
		artTableInitialiser_120();
		artTableInitialiser_121();
		artTableInitialiser_122();
		artTableInitialiser_123();
		artTableInitialiser_124();
		artTableInitialiser_125();
		artTableInitialiser_126();
		artTableInitialiser_127();
		artTableInitialiser_128();
		artTableInitialiser_129();
		artTableInitialiser_130();
		artTableInitialiser_131();
		artTableInitialiser_132();
		artTableInitialiser_133();
		artTableInitialiser_134();
		artTableInitialiser_135();
		artTableInitialiser_136();
		artTableInitialiser_137();
		artTableInitialiser_138();
		artTableInitialiser_139();
		artTableInitialiser_140();
		artTableInitialiser_141();
		artTableInitialiser_142();
		artTableInitialiser_143();
		artTableInitialiser_144();
		artTableInitialiser_145();
		artTableInitialiser_146();
		artTableInitialiser_147();
		artTableInitialiser_148();
		artTableInitialiser_149();
		artTableInitialiser_150();
		artTableInitialiser_151();
		artTableInitialiser_152();
		artTableInitialiser_153();
		artTableInitialiser_154();
		artTableInitialiser_155();
		artTableInitialiser_156();
		artTableInitialiser_157();
		artTableInitialiser_158();
		artTableInitialiser_159();
		artTableInitialiser_160();
		artTableInitialiser_161();
		artTableInitialiser_162();
		artTableInitialiser_163();
		artTableInitialiser_164();
		artTableInitialiser_165();
		artTableInitialiser_166();
		artTableInitialiser_167();
		artTableInitialiser_168();
		artTableInitialiser_169();
		artTableInitialiser_170();
		artTableInitialiser_171();
		artTableInitialiser_172();
		artTableInitialiser_173();
		artTableInitialiser_174();
		artTableInitialiser_175();
		artTableInitialiser_176();
		artTableInitialiser_177();
		artTableInitialiser_178();
		artTableInitialiser_179();
		artTableInitialiser_180();
		artTableInitialiser_181();
		artTableInitialiser_182();
		artTableInitialiser_183();
		artTableInitialiser_184();
		artTableInitialiser_185();
		artTableInitialiser_186();
		artTableInitialiser_187();
		artTableInitialiser_188();
		artTableInitialiser_189();
		artTableInitialiser_190();
		artTableInitialiser_191();
		artTableInitialiser_192();
		artTableInitialiser_193();
		artTableInitialiser_194();
		artTableInitialiser_195();
		artTableInitialiser_196();
		artTableInitialiser_197();
		artTableInitialiser_198();
		artTableInitialiser_199();
		artTableInitialiser_200();
		artTableInitialiser_201();
		artTableInitialiser_202();
		artTableInitialiser_203();
		artTableInitialiser_204();
		artTableInitialiser_205();
		artTableInitialiser_206();
		artTableInitialiser_207();
		artTableInitialiser_208();
		artTableInitialiser_209();
		artTableInitialiser_210();
		artTableInitialiser_211();
		artTableInitialiser_212();
		artTableInitialiser_213();
		artTableInitialiser_214();
		artTableInitialiser_215();
		artTableInitialiser_216();
		artTableInitialiser_217();
		artTableInitialiser_218();
		artTableInitialiser_219();
		artTableInitialiser_220();
		artTableInitialiser_221();
		artTableInitialiser_222();
		artTableInitialiser_223();
		artTableInitialiser_224();
		artTableInitialiser_225();
		artTableInitialiser_226();
		artTableInitialiser_227();
		artTableInitialiser_228();
		artTableInitialiser_229();
		artTableInitialiser_230();
		artTableInitialiser_231();
		artTableInitialiser_232();
		artTableInitialiser_233();
	}

	public void constructorCore(Text textHandler) {
		text = textHandler;
		artFirstTerminalLabel = ART_TC_;
		artFirstUnusedLabel = ART_X_LABEL_EXTENT + 1;
		artSetExtent = ART_X_EPSILON + 1;
		ART_L_EOS = ART_X_EOS;
		ART_L_EPSILON = ART_X_EPSILON;
		ART_L_DUMMY = ART_X_DUMMY;
		grammarName = "ocamlLexer";
		defaultStartSymbolLabel = ART_L_OcamlLexer_input;
		buildOptions = " Java fragment HashPool";
		FIFODescriptors = false;
		setInitialise();
		artTableInitialise();
	}

	public OCMLLexerParser() {
				constructorCore(new Text(new DefaultTextHandler()));
	}

	public OCMLLexerParser(Text text) {
				constructorCore(text);
	}

};
