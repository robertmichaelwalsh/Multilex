using
System;
using
System.Threading;
using
System.Reflection;
[Serializable]
public
class
Foo
{
~Foo
()
{
Console.WriteLine
("FINALIZING IN DOMAIN "
+
AppDomain.CurrentDomain.FriendlyName
+
": "
+
AppDomain.CurrentDomain.IsFinalizingForUnload
());
}
}
[Serializable]
public
class
SlowFinalize
{
~SlowFinalize
()
{
Console.WriteLine
("FINALIZE1.");
try
{
Thread.Sleep
(500);
}
catch
(Exception
ex)
{
Console.WriteLine
("A: "
+
ex);
}
Console.WriteLine
("FINALIZE2.");
}
}
[Serializable]
public
class
AThread
{
public
AThread
()
{
new
Thread
(new
ThreadStart
(Run)).Start
();
}
public
void
Run
()
{
try
{
while
(true)
Thread.Sleep
(100);
}
catch
(ThreadAbortException
ex)
{
Console.WriteLine
("Thread aborted correctly.");
}
}
}
public
class
BThread
:
MarshalByRefObject
{
bool
stop;
public
BThread
()
{
new
Thread
(new
ThreadStart
(Run)).Start
();
}
public
void
Stop
()
{
stop
=
true;
}
public
void
Run
()
{
try
{
while
(true)
Thread.Sleep
(100);
}
catch
(ThreadAbortException
ex)
{
while
(!stop)
Thread.Sleep
(100);
}
}
}
public
class
UnloadThread
{
AppDomain
domain;
public
UnloadThread
(AppDomain
domain)
{
this.domain
=
domain;
}
public
void
Run
()
{
Console.WriteLine
("UNLOAD1");
AppDomain.Unload
(domain);
Console.WriteLine
("UNLOAD2");
}
}
class
CrossDomainTester
:
MarshalByRefObject
{
}
public
class
Tests
{
public
static
int
Main()
{
return
TestDriver.RunTests
(typeof
(Tests));
}
public
static
int
test_0_unload
()
{
for
(int
i
=
0;
i
<
10;
++i)
{
AppDomain
appDomain
=
AppDomain.CreateDomain("Test-unload"
+
i);
appDomain.CreateInstanceAndUnwrap
(
typeof
(CrossDomainTester).Assembly.FullName,
"CrossDomainTester");
AppDomain.Unload(appDomain);
}
return
0;
}
public
static
int
test_0_unload_default
()
{
try
{
AppDomain.Unload
(Thread.GetDomain
());
}
catch
(CannotUnloadAppDomainException)
{
return
0;
}
return
1;
}
public
static
int
test_0_unload_after_unload
()
{
AppDomain
domain
=
AppDomain.CreateDomain
("Test2");
AppDomain.Unload
(domain);
try
{
AppDomain.Unload
(domain);
}
catch
(Exception)
{
return
0;
}
return
1;
}
public
static
int
test_0_is_finalizing
()
{
AppDomain
domain
=
AppDomain.CreateDomain
("Test-is-finalizing");
object
o
=
domain.CreateInstanceFromAndUnwrap
(typeof
(Tests).Assembly.Location,
"Foo");
if
(domain.IsFinalizingForUnload
())
return
1;
AppDomain.Unload
(domain);
return
0;
}
public
static
int
test_0_unload_with_active_threads
()
{
AppDomain
domain
=
AppDomain.CreateDomain
("Test3");
object
o
=
domain.CreateInstanceFromAndUnwrap
(typeof
(Tests).Assembly.Location,
"AThread");
Thread.Sleep
(100);
AppDomain.Unload
(domain);
return
0;
}
public
static
int
test_0_unload_with_active_threads_timeout
()
{
AppDomain
domain
=
AppDomain.CreateDomain
("Test4");
BThread
o
=
(BThread)domain.CreateInstanceFromAndUnwrap
(typeof
(Tests).Assembly.Location,
"BThread");
Thread.Sleep
(100);
try
{
AppDomain.Unload
(domain);
}
catch
(Exception)
{
o.Stop
();
AppDomain.Unload
(domain);
return
0;
}
return
1;
}
static
void
Worker
(object
x)
{
Thread.Sleep
(100000);
}
public
static
void
invoke_workers
()
{
for
(int
i
=
0;
i
<
1;
i
++)
ThreadPool.QueueUserWorkItem
(Worker);
}
public
static
int
test_0_unload_with_threadpool
()
{
AppDomain
domain
=
AppDomain.CreateDomain
("test_0_unload_with_threadpool");
domain.DoCallBack
(new
CrossAppDomainDelegate
(invoke_workers));
AppDomain.Unload
(domain);
return
0;
}
public
static
void
SyncCallback
()
{
AppDomain.Unload
(AppDomain.CurrentDomain);
}
public
static
int
test_0_unload_inside_appdomain_sync
()
{
AppDomain
domain
=
AppDomain.CreateDomain
("Test3");
try
{
domain.DoCallBack
(new
CrossAppDomainDelegate
(SyncCallback));
}
catch
(Exception
ex)
{
Thread.ResetAbort
();
}
return
0;
}
}