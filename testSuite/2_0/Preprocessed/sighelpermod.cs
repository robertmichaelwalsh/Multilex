using
System;
using
System.Reflection;
using
System.Reflection.Emit;
using
System.Threading;
public
class
EmitHelloWorld{
static
void
Main(string[]
args)
{
AssemblyName
an
=
new
AssemblyName();
an.Name
=
"HelloWorld";
AssemblyBuilder
ab
=
Thread.GetDomain().DefineDynamicAssembly(an,
AssemblyBuilderAccess.RunAndSave);
ModuleBuilder
module
=
ab.DefineDynamicModule("b.dll");
TypeBuilder
tb
=
module.DefineType("type",
TypeAttributes.Public
|
TypeAttributes.Class);
MethodBuilder
mb
=
tb.DefineMethod("test",
MethodAttributes.HideBySig
|
MethodAttributes.Static
|
MethodAttributes.Public,
typeof(void),
null);
ILGenerator
ig
=
mb.GetILGenerator();
SignatureHelper
sh
=
SignatureHelper.GetMethodSigHelper
(module,
CallingConventions.HasThis,
typeof(int));
sh.AddArgument
(typeof
(bool));
Type
[]
req
=
new
Type
[]
{
typeof
(System.Runtime.CompilerServices.IsBoxed)
};
sh.AddArgument
(typeof
(string),
req,
null);
Type
[]
opt
=
new
Type
[]
{
typeof
(System.Runtime.CompilerServices.IsConst)
};
sh.AddArgument
(typeof
(byte),
null,
opt);
sh.AddArgument
(typeof
(int),
null,
opt);
sh.AddArgument
(typeof
(long),
null,
opt);
ig.Emit
(OpCodes.Call,
sh);
ig.Emit(OpCodes.Ret);
tb.CreateType();
ab.Save
("b.dll");
}
}